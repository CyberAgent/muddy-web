start	end	text
0	11000	マディウェブポッドキャストは、マディの意味が泥であるように ウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、
11000	24000	実際に明日から使えるかもしれないウェブフロントエンド知識や技術を 参加者の皆様と共有し合うことを通して、フロントエンド海外の役に立てるように思いを込めて発信しています。
24000	28000	はい、それではマディウェブポッドキャストを始めていきたいと思います。
28000	32000	ファシリテーターを務めますは株式会社しろく石井です。
32000	38000	本日ゲストでお越しいただいている方が中川海人さんになります。
38000	40000	こんにちは、中川海人さん。
40000	41000	こんにちは、よろしくお願いします。
41000	42000	よろしくお願いします。
42000	47000	すいません、簡単に自己紹介、どこの事業所にいるかと自己紹介の方をよろしくお願いします。
47000	50000	はい、ファンベース事業部に所属しております。
50000	52000	中川海人と申します。
52000	58000	普段はファンベースアリーナというプラットフォームのウェブフロントエンドの事業に従事しております。
58000	68000	今回はウェブスピードハッカーソン2023の開発に携わりましたので、その裏側だったりとかこういうことがありましたよという話をさせていただければいいかなと思っております。
68000	69000	本日はよろしくお願いします。
69000	71000	はい、よろしくお願いします。
71000	79000	今さっき話し終わったんですけど、今日のトピックウェブスピードハッカーソンということで、前回2回目ですかね。
79000	92000	以前に同じような収録をして、その時が2022年の収録だったんですけども、今回2023年に行ったウェブスピードハッカーソンについてお話していけたらなと思います。
93000	102000	ウェブスピードハッカーソン、わからない、ご存知でない方がいらっしゃると思うので、簡単にウェブスピードハッカーソンとは何ぞやということをちょっと紹介していただけますか。
102000	118000	ウェブスピードハッカーソンとは、重たいサイトがイベントとして出題されるので、その重たいサイトっていうのをチューニングをして、使い勝手の良い軽いサイトにしていって、それを競っていただくっていう競技向けのイベントとなっております。
118000	129000	イメージしやすいので言うと、ミスコンのようなパフォーマンスチューニングのイベントがあるかなと思うんですけれども、それのウェブフロントエンド版だと思っていただくとイメージしやすいかなと思っております。
130000	139000	いかにもフロントエンドエンジニアが好きそうなパフォーマンスチューニングみたいな感じのやつのコンテストみたいな感じですよね。
139000	151000	僕まだ実は出てなくて、出ようと思っているんですけど、ちょっと機会がないので、今回2023年の運営を行っていただいたということですかね。
151000	152000	そうですね。
152000	159000	これ前回2022年と2013年の違いとか差分みたいなところって何かあるんですか。
159000	172000	そうですね。一番大きなイベントとしての差分っていうところだと、今年のウェブスピードハッカソンは学生と社内向けのイベントを同時に開催したっていうところが一番大きなところかなと思っています。
172000	175000	前回あれでしたっけ?別々でやったんでしたっけ?
175000	189000	そうですね。実は今までウェブスピードハッカソンは3回開催しているんですけれども、いずれも実はそれぞれのイベントで3回ウェブスピードハッカソンをやっていて、具体的には学生向け、社内向け、一般向けの3回をそれぞれやっていたんですね。
189000	200000	純粋に3回やるっていうところで運営のコストも結構大変だったりするので、そこを1回でまとめてやってみようっていうのが今年の新しい取り組みかなって感じですね。
200000	207000	そうですね。3回やるってなるとなかなか厳しいところを今回は1回でまとめてやったということで。
207000	214000	結構参加人数、そうすると合計すごく多いんじゃないですかね。今回どれくらい参加されたんですか?
214000	229000	そうですね。申し込みだけでも一般の方が70名超えで、学生の方も60名超えっていうところで、だいたい合計130人規模のイベントとなって、歴代で一番盛り上がったらいって感じですね。
229000	232000	すごいですね。今回オンラインとオフライン?
232000	236000	そうですね。オンライン、オフライン両方で開催したっていう感じですね。
236000	238000	オフラインは会場は?
238000	240000	そうですね。アルマタワーのところで。
240000	243000	はい。どれくらいオフラインで参加されました?今回。
243000	261000	そうですね。一応オフラインで参加してくださったのは学生の方だけっていうところで応募をかけたんですけれども、だいたいイベント自体は2日あったんですけど、合計で多分30名くらいの方がオフラインで参加してくださって、残りの方がオフラインっていう感じでしたね。
261000	277000	結構な方がオフラインで、コロナ明けっていうところからやっとオフラインでできたということで、その現場とか見てみたかったですけど、わきあいあいとしてやられた感じですか?
277000	291000	そうですね。もう意外と競技始まってしまえばみなさん自分のパフォーマンスの課題に取り組んじゃうので、もうほんと沈黙したという雰囲気があったりしたんですけれども、ほんとみなさん真剣に取り組んでいただいたって感じですね。
291000	296000	会場シーン、パソコンのタイピングの音だけが鳴り響くみたいな。
297000	310000	一応その人手の方が音楽を流して和わせようという雰囲気とか作っていただいたりしたんですけど、基本的にはみなさん真面目に黙々と取り組んでいたっていうのがオフラインのイメージでしたね。
310000	312000	良さそうですね。
313000	328000	今多分声の音質とか変わってるかと思うんですけど、収録してたところが工事で音が入ってしまってですね、場所を移動しました。
328000	334000	ということでちょっと声の音が変わっちゃってると思うんですけども、続けていきたいと思います。
334000	343000	改めて、前回と今回、技術的なところでの新しい取り組みって何か他にありますか?
343000	353000	新しい取り組みは今年のWebSpeed Hackathonでもたくさん取り入れたんですけれども、大きなところで言うと新しい採点方法を取り入れましたっていうところが一つ。
353000	361000	二つ目が技術的に大きなところで言うと、GraphQLを導入したことっていうのが大きな取り組みかなと思っております。
361000	363000	両方ちょっと面白そうですね。
363000	370000	新しい採点方法、確かに前回採点方法について結構変えていきたいねっていう話をしてたんですよ。
370000	373000	なので今回どういうふうに変わったんですかね?
373000	386000	そうですね。まず大きなところはLighthouseのV10というバージョンのものを導入したので、それに伴ってユーザーフローという機能を使って採点方式を付け加えましたっていうところになります。
386000	388000	ユーザーフローですか?
388000	399000	ユーザーフローというのがページの読み込みだったりとか、そのページのインタラクションとか対話中にもそういったスコアを計算して、それを算出することができるというものでして、
399000	412000	これによって室内者側としては新しい指標が取り入れられたので、新しい問題っていうのを出すことができたっていうところで結構運営側としては非常にありがたい機能だったっていうのがファーストインベッションでしたね。
412000	418000	LighthouseはGoogle Chromeの検証ツールでスコアリングが取れるやつですよね。
418000	427000	その中にユーザーフローという新しい機能が入って、それでスコアリングする項目が増えたっていう認識だったんですかね。
427000	432000	ちなみにどんな新しい項目を採点基準に取り入れましたか?
432000	444000	具体的には特徴的なところで言うと、インタラクショントゥネクストペイントっていう指標などがあったりして、その指標っていうのはいわゆるユーザーフローで測定することができる指標なんですけれども、
444000	456000	今までのウェブスピードハッカソンでは過去3回にわたっていずれも同じ計算方法だったんですけれども、そのページのランディングに伴ってスコアを算出することができていたんですけれども、
456000	467000	今回そのユーザーフローなどを導入したことによって、例えばユーザーがインプット要素にタイピングしている時のスコアのパフォーマンスとかっていうのを計算することができるようになったりとか。
467000	474000	ユーザーのリアクトとかでステートが変わっていった時のパフォーマンスを取るみたいな。
474000	475000	そうです。
475000	476000	そんなのも取れるんですね。
476000	490000	本当にパフォーマンスとして計算できる幅が広がったので、今まではいわゆるページランディング以外のところにデチューニングをしてもスコアにあまり影響がなかったりする場所がたくさんあったんですけれども、
490000	507000	今回のユーザーフローの導入によって、今まででは出題できなかったような問題も取り入れることができたというところで、純粋に新しい問題を出題することができたというところは非常に開発していても面白かったなというのが思いますね。
507000	523000	近年あれですもんね。ほとんどSPAとかサーバーサイトレンダリングで、JavaScriptでフロントを動かすみたいなところが流行っているから、そういうレンダーのパフォーマンスとかもどんどん測っていかないとなかなかいいウェブサイトが作れないよみたいな時代なんですかね。
523000	551000	具体的に言うとリアクトを使って今年もウェブスピンハックスも出題したので、例えば一般的にリアクトを使っていればSPA遷移をしてページを遷移するというのがベーシックだと思うんですけど、あえて出題した状態というのはSPA遷移じゃなくて普通のページ遷移をするので、ページ遷移をするとページを1から読み直す必要があったりするので、そこの部分というのは結果的にユーザーフローの悪影響となっていたでしょう。
551000	565000	これは去年のウェブスピンハックスなどで出題してもスコアに影響がない場所だったりしたので、そういった新しい問題というのがやっぱりリアクトらしさというところも出しているなと思いますね。
565000	591000	グラフQLを新しく導入したということなんですけれども、ウェブスピンハックスのフロントエンドのパフォーマンスの競技にグラフQLが使われた理由というのがピンとこないんですけれども、どういった理由でグラフQLを導入したんですかね?
591000	617000	実はグラフQLを採用した意図としては、新しいデチューニング案を出したい、それを出題したいという思いが個人的にあって導入したんですけれども、その背景としては意外と僕がデチューニングの試作を考えているときに、この問題がいいなと思ってそれを出題しようとしたときに、実は過去のウェブスピンハックスも既に出題済みだったりするんですよね。
617000	641000	意外とそういう問題の重複というのが何度も何度もあって、いい問題を出すためには採用している技術を何か根本的に変えたほうが出しやすくなるんじゃないかという狙いがあって、過去のウェブスピンハックスの3回は全てREST APIでやってたんですけど、そこを思い切ってグラフQLにすることによって新しい問題を出したいというところにつながったのかなというふうに思いますね。
641000	648000	そういった違う技術の採用を通して出題する問題の幅を広げるみたいな感じですね。
648000	653000	実際グラフQLを導入してみて良かった点とか悪かった点はありますか?
653000	661000	良かった点で言うと、先ほどもちょっと述べたとおり、新しい試作でデチューニングを出すことができたというところは本当に良かったと思っていて、
662000	669000	例えば具体的に出したデチューニングの内容で言うと、一般的なベストプラクティスに修正する方法として、
669000	678000	例えばNプラス1問題を実際に発生させてサーバーにすごい負荷をかけるような感じにしてレスポンスを補足することでデチューニングしたりとか、
678000	694000	あとはクエリをわざと悪く組んで複数のリクエストに意図的に分割したりとか、余分なレスポンスデータを含ませたりとかというところもできたというところは非常にグラフQLを導入して良かったかなと思うところですね。
695000	711000	悪かったところで言うと、いろいろあるんですけれども、具体的には一番印象的だったのは、全てのデチューニング試作を出題することができなかったというのが一番悔しいところですね。
711000	713000	どういったことでしょうか?
713000	720000	なんでそれが出題できなかったかというと、実はメモリ不足というのが一番大きかったんですけど、
720000	731000	今年のウェブスピードハッカソンは、Fly.ioというサイトにアプリケーションをデプロイして、それをデプロイされたサイトに対してスコアを計測するという仕組みを取っていたんですけど、
731000	739000	そのFly.ioのサイトのインスタンスのメモリが256MBという大きさだったんですね。
739000	746000	一般的なアプリケーションであれば256MBで凝ったりするようなメモリのサイズだったんですけれども、
746000	754000	今回GraphQLを使って、意図的にNプラス1問題を発生させた上でデプロイをやっていたんですけど、
754000	760000	そういうところも踏まえて、結構サーバーに負荷がかかるような実装で開発をしていたんですね。
760000	768000	いざFly.ioにデプロイしてみると、メモリが足りなくてノードが落ちてしまうという問題がすごく発生してしまって、
768000	774000	そのメモリ不足によってやりたいGraphQLの試作を入れることができなかったんですね。
774000	784000	なるほど。悪く作ろうとすればするほどメモリを送っていくという、すごい面白いような取り組みで。
784000	790000	具体的にどういったクエリを組んだかというと、特定のページに飛んだときに、
790000	795000	今回作ったのがハイルオーガニックという名前のショッピングサイトを作ったんですけれども、
795000	799000	ショッピングサイトというだけあって、商品のデータがたくさん保存されているんですね。
799000	806000	その商品のデータを特定のページに飛んだときに、全金取得するというクエリを組んでいて、
806000	814000	そのレスポンスが返ってくるまでに大体4分ぐらい、4分必要とするぐらい膨大なクエリを叩いていたりしたんですけど、
814000	821000	それがメモリが落ちてしまって、出題としては出すことができなかったというところで非常に悔しいところで、
821000	827000	デチューニングにも結構加減が必要なんだなというところが非常に勉強になったところですね。
828000	831000	なるほどですね。
831000	835000	今回出題した以上にデチューニングを用意してくださったけども、
835000	843000	そういったメモリの問題などで悲しいことに出題を選ぶような感じになってしまったんですね。
843000	849000	ぜひ今回選ばれなかったやつは次回取り入れてほしいなって感じがしますね。
849000	856000	面白いですね。デチューニングをしたいが、それ以外の要素で絞られてしまうみたいな。
857000	860000	逆に作っている側もいろんな勉強になりますね。
860000	864000	そうなんですよね。やっぱり普段デチューニングってことをしないじゃないですか。
864000	866000	結構特殊な開発だと思うんですよね。
866000	867000	逆ですよね。
867000	868000	逆なんですよ。
868000	874000	普段、いつも業務として開発している上には無意識でパフォーマンスがいいコードを書いたりしているんですけど、
874000	878000	そういったところを頭使いつつ悪いコードを書かなきゃいけないので、
878000	885000	そういったところは今回運営に携わって開発する方も大変なんだなっていうのは身をもって実感したところですね。
885000	889000	やっぱり結構難しかったですか、デチューニングさせるために。
889000	891000	いろんな知識とか必要な感じなんですかね。
891000	895000	そうですね。いろんな知識が必要っていうのもそうなんですけど、
895000	902000	あとはどういう風にソースコードにデチューニングを落とし込むかっていうところが今回勉強になったなと思っていて、
902000	906000	今回自分が運営に携わったのが初めてってこともあって、
906000	911000	デチューニングをどうやってやってるかっていうのは今回初めて知ったんですけれども、
911000	921000	実際に開発に携わって思ったのは、今回実は以前のマティウェブポッドキャストの出演者でもある宮城さんと野口さんと一緒に開発をしたんですけれども、
921000	929000	その方々と一緒に開発していて思ったのは、デチューニングにも流儀があるっていうのもあって、
929000	934000	そのデチューニングを何でもかんでもやればいいってものじゃなくて、
934000	943000	ソースコードに落とし込んで、それをこういう感じでチューニングしてほしいなっていう意図を込められた風に開発をしているんですね。
943000	953000	なので、非常に我々としてはウェブスピードハッカソンとしてイベントの体験を良くするためにチューニングの体験を良くしたいって思いが根本的にあって、
954000	964000	分かりにくいソースコードを提供するんじゃなくて、分かりやすいソースコードかつチューニングの方針もなんとなくつかみ取れるような方針で開発をしていたりするので、
964000	972000	そういったところで流儀があるんだなっていうところは非常にウェブスピードハッカソンの運営に携わって初めて理解できたところでしたね。
972000	980000	むやみやたらに悪くするんじゃなくて、こういう問題を解いて、こういう風に解いてほしいからこういう風に書くみたいな感じだったんですね。
981000	985000	ちなみに今回はどのような思いを込めて作成されましたか?
985000	994000	今回の思いでいうと、分かりやすくチューニングの体験を良くしたいってところは変わらず開発をしていったので、
994000	1006000	例えばすごく難読で難しい試作に関しては、別のファイルに似たようなチューニング、こういう風にチューニングするといいよっていうヒントを別のファイルに散りばめたりして、
1007000	1014000	自分の知識だけじゃなくても他のファイルを見るとヒントを得られるような試作を入れたりしていたので、
1014000	1027000	パフォーマンスをチューニングしている時に分からない情報でも後からいろんなファイルを見たらこういう風に修正すればいいんじゃないかっていうようなチューニング体験は意識して開発したってのもありますね。
1028000	1031000	他のファイルを参照するとヒントがあるっていう。
1031000	1037000	リアルなエンジニアって空気を読むってことをするじゃないですか。
1037000	1048000	あんな感じですよね。他のコードを読んでこういう風に書くんだなみたいな。こういう風に書くといいんだなみたいなところも学べるということで、いろいろ本当に思えば込められてるんですね。
1058000	1069000	今回スコアボードの方も結構力を入れたっていう話を聞いたんですけども、スコアボードについて新しい取り組みとかもあるんですか?
1070000	1088000	今年はスコアボードのサイトを自作したっていうのがありまして、競技として採点したスコアをそのサイトに反映させてリッチにUIを見せたいなと思って、そういうサイトを作りましたっていうのがベースですね。
1088000	1102000	実は去年のウェブスピードハッカーさんの課題の一つでもあったんですけれども、複数の人がGitHub Actionsで採点をしたときに、採点が何個も同時に走ると採点が遅くなってしまうという課題があったりしたので、
1102000	1124000	それを解決するために別でスコアを保持するデータベースを用意して、そこにスコアを上げることによって、並列でGitHub Actionsが走らせたときに採点が遅くなる問題を解決したいという思いもあったりして、別のスコアを保持する場所を作りたいという思いからスコアボードを作ったという背景がありますね。
1124000	1132000	確かに前回のポッドキャストで採点が結構時間かかってしまった。何分くらいでしたっけ?20分くらいかかってしまったんでしたっけ?
1132000	1134000	そうですね。
1134000	1138000	今回は結構それも改善されたということですか?
1138000	1149000	そうですね。今回に関しては実は採点してからそのスコアが反映されるまでだいたい10分とか、長くても15分とかで反映されるようになったんですけれども、
1149000	1160000	ここも実は工夫がいろいろあって、実はいろんな施策を盛り込みすぎた結果、3000体の状態で採点をかけると同じく20分くらいかかっちゃうんですよね。
1160000	1162000	前回と変わらず。
1162000	1175000	20分くらいかかってしまって、それはVRTで見た目の表示作業にエラーがないかというところを見て、いろいろ検証していくと20分くらいかかってしまうというところが課題としてあったので、
1175000	1186000	今年は思い切ってそのVRTというのを撤廃させて、いわゆるチューニング体験を良くするために採点したらすぐその結果が反映されるようにというところを意識して、
1186000	1190000	VRTをなくしたので結果10分で採点ができるなというところですね。
1190000	1192000	なるほどね。
1192000	1197000	使っていたものを撤廃して新しいものを導入して工夫をしていったということで。
1197000	1206000	そうですね。その反面やっぱりレギュレーション違反に停止させてしまう競技者の方がいるんじゃないかという懸念もあったりしたので、
1206000	1222000	競技終了時に運営がレギュレーション違反をしていないかというところをそのアプリケーションを実際に手動でチェックする機会があるんですけれども、
1222000	1237000	その何をどうチェックするかという一部を意図的に皆さんに見えるように公開したので、皆さんの手元の方で確認していただいてレギュレーション違反を防ぐためにそういったものを公開したという感じがありますね。
1237000	1242000	なるほど。手元でこのレギュレーションリストがあってクリアしてください。
1242000	1243000	そうです。
1243000	1246000	それを導入して結構レギュレーション違反は定めましたか?
1246000	1252000	そうですね。ちょっと残念ながらレギュレーション落ちしてしまう方はちょっと多かったのかなという気がしますね。
1252000	1255000	そうなんですね。どんなレギュレーションで落ちてたんでしょう?
1255000	1260000	やっぱり特定のインタラクションをした時に表示が崩れて見えちゃったりとか。
1260000	1266000	ボタンを押して表示されるものがちょっと崩れて表示されるみたいなイメージですかね。
1267000	1272000	あとは大きな差分で言うとログインボタンを押してもログインができないとか。
1272000	1281000	いわゆる機能差分が結構発生してしまってレギュレーション落ちになってしまうという恐怖心の方が結構いらっしゃって。
1281000	1291000	そこはちょっと運営としても事前にもう少しレギュレーション落ちをしていないかというのを検知できるような仕組みを整える必要があるかなと思っていて。
1291000	1302000	まだちょっと確定ではないんですけれども、例えばE2Eのような自動テストを導入してそれに抵触していなければレギュレーション違反じゃないよねっていうのを事前に分かるように。
1302000	1308000	ちょっと次回のウェブスピードハックスになればそういった導入をしてみたいかなというふうに思ってますね。
1308000	1312000	レギュレーション違反の自動化みたいな形ですね。なるほど。
1312000	1323000	結構やっぱり変えるだけでも元々の関数、ファンクションが崩れてしまったりだとか、もう動かなくなってしまったりっていうのが結構あるんですね。そういう話を聞いていると。
1333000	1340000	本当に作成者の意図が読み取れるような、そういうお題だったのかなと思うんですけども。
1340000	1352000	全体を通して何か次回もっと下で良くなるなぁとかありますか?それか個人的にすごい思い出に残る場面とかってありますか?
1352000	1363000	そうですね。それでいうと結構イベント当日とかに関しては、我々ウェブイベントとしては当日発生してしまったミスとかに関しては当日修正していたりしたんですけれども、
1363000	1372000	他のそういった余った時間では結構スコアボードのスコアの繊維を見ていたりとか、あとはそのツイッターとかでエゴサをしていたりしていたんですけれども、
1372000	1373000	どんな感じのエゴサをしていたんですか?
1373000	1383000	そうですね。ハッシュタグウェブスピードハッカさんとかっていうタグがあったりするので、それで見ていたりとか、あとはその文字列に含まれるウェブスピードハッカさんというところで検索をしていたりしたんですけれども、
1383000	1388000	そういった中でやっぱりその競技終了間際のツイートが個人的に印象に残っていて、
1388000	1390000	どんなツイートがあったんですか?
1390000	1399000	一番印象的だったのはその競技終了間際に点数を上げるためにかなり思い切ったチューニングを行った人がいて、
1399000	1406000	その人のチューニングの方法が間違って採点失敗してしまったらリーダーボードの上位から転落してしまう。
1406000	1412000	けどうまくいったらリーダーボードにそのまま食い込めるよねみたいな感じのツイートをしている方がいて、
1412000	1416000	やっぱりそういったウェブスピードハッカさんも一種の競技としてやっているので、
1416000	1422000	そういう時間制限の中でいかに点数を伸ばすことができるかっていうところで、
1422000	1429000	やっぱり今年は学生の方と一般の方を合わせて一緒に同時開催しているという人数が増えているところも相まって、
1429000	1433000	すごい競技性が増しているなっていうのはそういったツイートだったり、
1433000	1440000	あとはその競技終了間際の皆さんの動きとかを見ていると競技性がすごく増しているなっていうのは実感したなと思いますね。
1440000	1445000	面白いですね。結構みんな本当にガチでやってくださっているみたいな感じなんですね。
1445000	1452000	確かに今回一般の方と学生交えているんですけど、一般の方の方がチューニングがうまかったりとか、
1452000	1456000	そういう結構レベルの差分とかは出てきたりとかしなかったんですかね。
1456000	1462000	そうですね。結構リーダーボードの上位に食い込んでいる方に言うとやっぱり一般の方が多かったですね。
1462000	1468000	やっぱその内訳とかを見ていると各ウェブスピードハッカさんで入賞したことがあるとか、
1468000	1471000	以前のウェブスピードハッカさんで入賞したことがある人だったりとか、
1471000	1476000	やっぱりその歴戦の重さみたいなことがリーダーボードの上位に食い込んだりしていたんですけれども、
1476000	1481000	学生の方も本当に劣らずで、いわゆるレギュレーション違反をしてしまったんですけれども、
1481000	1486000	点数的に言えばかなり上位の方の方がたくさんいらっしゃったりしたので、
1486000	1494000	両方ともやっぱりそれぞれの強みというか、それぞれ活躍しているなっていう様子がリーダーボードを見て見受けられましたね。
1494000	1499000	嬉しいですね。県内の学生たちのレベルが本当に年々上がっていく中で、
1499000	1504000	こういうふうに一般の方と戦えるという感度があるということもいいですし。
1504000	1507000	そうですね。今年初めてのチャレンジだったんですけれども、
1507000	1512000	そういったところを見受けることができて本当に同時開催してよかったなと思いますね。
1512000	1514000	そうですね。本当に。
1514000	1519000	ちなみに次回は同じく同時開催で考えている形ですかね。
1519000	1523000	そうですね。まだちょっと何とも決まっていないので何とも言えないんですけど、
1523000	1528000	やっぱり競技性を増すために同時開催するんじゃないかなと個人的には思っていますね。
1528000	1534000	なるほど。ちなみに次回新しく取り入れようとしていることとかってありますか。
1534000	1536000	あれば教えてほしいなと思ったんですけど。
1536000	1540000	まだ開発がそもそもまだ始まっていなくて、
1540000	1545000	自分がウェブスピードハッカソンの今回は運営側として出たので、
1545000	1549000	たぶん次回は問題を解く方に回ると思うので、
1549000	1552000	そういった時にはどうなっているかというのが非常に楽しみですね。
1552000	1553000	なるほど。
1563000	1567000	そろそろ時間も来たということなんですけども、
1567000	1576000	今回改めてポッドキャストで今回のスピードハッカソンを振り返ってみて感想とかってありますか。
1576000	1580000	個人的にはやっぱりそういった運営に携わることによって、
1580000	1583000	ウェブスピードハッカソンの方針だったりとか、
1583000	1587000	例えば開発する上でこういった有意義があることだったりとか、
1587000	1590000	新しい学びが非常にたくさんあったというところで、
1590000	1596000	運営に携わって本当に楽しくイベントの運営ができたかなと思っております。
1596000	1599000	ウェブスピードハッカソンも競技としての側面もある一方、
1599000	1604000	パフォーマンスのチューニングの知識というところを学習する機会でもあると思うので、
1604000	1610000	こういったイベントをより大きくして、将来的にはもっともっとウェブフロントエンドの業界として、
1610000	1615000	パフォーマンス知識を貢献できるようなイベントにしていけたらなと思っているので、
1615000	1619000	今後もこういったイベントに積極的に参加していこうかなと思っております。
1619000	1620000	ありがとうございます。
1620000	1628000	僕も聞いてて本当に裏話、作成者、いろんなことを思いながら作っているといったところと、
1628000	1637000	いろんな方が参加してくださって、また本当に楽しんで参加してくださっているというのが聞いてて分かるなと思いますし、
1637000	1644000	今後のウェブスピードハッカソンもいろんな方が参加してくれたらいいなと思いますし、
1644000	1651000	僕も機会があればぜひウェブフロントエンジニアとして一回参加してほしいなと思いますね。
1652000	1660000	はい、では本日マディウェブポッドキャスト、ウェブスピードハッカソンについていろいろ面白い話があったんじゃないかなと思います。
1660000	1664000	ぜひ聞いている皆さん次回のイベントにも参加してほしいと思います。
1664000	1667000	それでは皆さんありがとうございました。
1667000	1668000	バイバイ。

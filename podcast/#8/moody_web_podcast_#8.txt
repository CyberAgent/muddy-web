マディウェブポッドキャストは、マディの意味が泥であるように ウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、
実際に明日から使えるかもしれないウェブフロントエンド知識や技術を 参加者の皆様と共有し合うことを通して、フロントエンド海外の役に立てるように思いを込めて発信しています。
はい、それではマディウェブポッドキャストを始めていきたいと思います。
ファシリテーターを務めますは株式会社しろく石井です。
本日ゲストでお越しいただいている方が中川海人さんになります。
こんにちは、中川海人さん。
こんにちは、よろしくお願いします。
よろしくお願いします。
すいません、簡単に自己紹介、どこの事業所にいるかと自己紹介の方をよろしくお願いします。
はい、ファンベース事業部に所属しております。
中川海人と申します。
普段はファンベースアリーナというプラットフォームのウェブフロントエンドの事業に従事しております。
今回はウェブスピードハッカーソン2023の開発に携わりましたので、その裏側だったりとかこういうことがありましたよという話をさせていただければいいかなと思っております。
本日はよろしくお願いします。
はい、よろしくお願いします。
今さっき話し終わったんですけど、今日のトピックウェブスピードハッカーソンということで、前回2回目ですかね。
以前に同じような収録をして、その時が2022年の収録だったんですけども、今回2023年に行ったウェブスピードハッカーソンについてお話していけたらなと思います。
ウェブスピードハッカーソン、わからない、ご存知でない方がいらっしゃると思うので、簡単にウェブスピードハッカーソンとは何ぞやということをちょっと紹介していただけますか。
ウェブスピードハッカーソンとは、重たいサイトがイベントとして出題されるので、その重たいサイトっていうのをチューニングをして、使い勝手の良い軽いサイトにしていって、それを競っていただくっていう競技向けのイベントとなっております。
イメージしやすいので言うと、ミスコンのようなパフォーマンスチューニングのイベントがあるかなと思うんですけれども、それのウェブフロントエンド版だと思っていただくとイメージしやすいかなと思っております。
いかにもフロントエンドエンジニアが好きそうなパフォーマンスチューニングみたいな感じのやつのコンテストみたいな感じですよね。
僕まだ実は出てなくて、出ようと思っているんですけど、ちょっと機会がないので、今回2023年の運営を行っていただいたということですかね。
そうですね。
これ前回2022年と2013年の違いとか差分みたいなところって何かあるんですか。
そうですね。一番大きなイベントとしての差分っていうところだと、今年のウェブスピードハッカソンは学生と社内向けのイベントを同時に開催したっていうところが一番大きなところかなと思っています。
前回あれでしたっけ?別々でやったんでしたっけ?
そうですね。実は今までウェブスピードハッカソンは3回開催しているんですけれども、いずれも実はそれぞれのイベントで3回ウェブスピードハッカソンをやっていて、具体的には学生向け、社内向け、一般向けの3回をそれぞれやっていたんですね。
純粋に3回やるっていうところで運営のコストも結構大変だったりするので、そこを1回でまとめてやってみようっていうのが今年の新しい取り組みかなって感じですね。
そうですね。3回やるってなるとなかなか厳しいところを今回は1回でまとめてやったということで。
結構参加人数、そうすると合計すごく多いんじゃないですかね。今回どれくらい参加されたんですか?
そうですね。申し込みだけでも一般の方が70名超えで、学生の方も60名超えっていうところで、だいたい合計130人規模のイベントとなって、歴代で一番盛り上がったらいって感じですね。
すごいですね。今回オンラインとオフライン?
そうですね。オンライン、オフライン両方で開催したっていう感じですね。
オフラインは会場は?
そうですね。アルマタワーのところで。
はい。どれくらいオフラインで参加されました?今回。
そうですね。一応オフラインで参加してくださったのは学生の方だけっていうところで応募をかけたんですけれども、だいたいイベント自体は2日あったんですけど、合計で多分30名くらいの方がオフラインで参加してくださって、残りの方がオフラインっていう感じでしたね。
結構な方がオフラインで、コロナ明けっていうところからやっとオフラインでできたということで、その現場とか見てみたかったですけど、わきあいあいとしてやられた感じですか?
そうですね。もう意外と競技始まってしまえばみなさん自分のパフォーマンスの課題に取り組んじゃうので、もうほんと沈黙したという雰囲気があったりしたんですけれども、ほんとみなさん真剣に取り組んでいただいたって感じですね。
会場シーン、パソコンのタイピングの音だけが鳴り響くみたいな。
一応その人手の方が音楽を流して和わせようという雰囲気とか作っていただいたりしたんですけど、基本的にはみなさん真面目に黙々と取り組んでいたっていうのがオフラインのイメージでしたね。
良さそうですね。
今多分声の音質とか変わってるかと思うんですけど、収録してたところが工事で音が入ってしまってですね、場所を移動しました。
ということでちょっと声の音が変わっちゃってると思うんですけども、続けていきたいと思います。
改めて、前回と今回、技術的なところでの新しい取り組みって何か他にありますか?
新しい取り組みは今年のWebSpeed Hackathonでもたくさん取り入れたんですけれども、大きなところで言うと新しい採点方法を取り入れましたっていうところが一つ。
二つ目が技術的に大きなところで言うと、GraphQLを導入したことっていうのが大きな取り組みかなと思っております。
両方ちょっと面白そうですね。
新しい採点方法、確かに前回採点方法について結構変えていきたいねっていう話をしてたんですよ。
なので今回どういうふうに変わったんですかね?
そうですね。まず大きなところはLighthouseのV10というバージョンのものを導入したので、それに伴ってユーザーフローという機能を使って採点方式を付け加えましたっていうところになります。
ユーザーフローですか?
ユーザーフローというのがページの読み込みだったりとか、そのページのインタラクションとか対話中にもそういったスコアを計算して、それを算出することができるというものでして、
これによって室内者側としては新しい指標が取り入れられたので、新しい問題っていうのを出すことができたっていうところで結構運営側としては非常にありがたい機能だったっていうのがファーストインベッションでしたね。
LighthouseはGoogle Chromeの検証ツールでスコアリングが取れるやつですよね。
その中にユーザーフローという新しい機能が入って、それでスコアリングする項目が増えたっていう認識だったんですかね。
ちなみにどんな新しい項目を採点基準に取り入れましたか?
具体的には特徴的なところで言うと、インタラクショントゥネクストペイントっていう指標などがあったりして、その指標っていうのはいわゆるユーザーフローで測定することができる指標なんですけれども、
今までのウェブスピードハッカソンでは過去3回にわたっていずれも同じ計算方法だったんですけれども、そのページのランディングに伴ってスコアを算出することができていたんですけれども、
今回そのユーザーフローなどを導入したことによって、例えばユーザーがインプット要素にタイピングしている時のスコアのパフォーマンスとかっていうのを計算することができるようになったりとか。
ユーザーのリアクトとかでステートが変わっていった時のパフォーマンスを取るみたいな。
そうです。
そんなのも取れるんですね。
本当にパフォーマンスとして計算できる幅が広がったので、今まではいわゆるページランディング以外のところにデチューニングをしてもスコアにあまり影響がなかったりする場所がたくさんあったんですけれども、
今回のユーザーフローの導入によって、今まででは出題できなかったような問題も取り入れることができたというところで、純粋に新しい問題を出題することができたというところは非常に開発していても面白かったなというのが思いますね。
近年あれですもんね。ほとんどSPAとかサーバーサイトレンダリングで、JavaScriptでフロントを動かすみたいなところが流行っているから、そういうレンダーのパフォーマンスとかもどんどん測っていかないとなかなかいいウェブサイトが作れないよみたいな時代なんですかね。
具体的に言うとリアクトを使って今年もウェブスピンハックスも出題したので、例えば一般的にリアクトを使っていればSPA遷移をしてページを遷移するというのがベーシックだと思うんですけど、あえて出題した状態というのはSPA遷移じゃなくて普通のページ遷移をするので、ページ遷移をするとページを1から読み直す必要があったりするので、そこの部分というのは結果的にユーザーフローの悪影響となっていたでしょう。
これは去年のウェブスピンハックスなどで出題してもスコアに影響がない場所だったりしたので、そういった新しい問題というのがやっぱりリアクトらしさというところも出しているなと思いますね。
グラフQLを新しく導入したということなんですけれども、ウェブスピンハックスのフロントエンドのパフォーマンスの競技にグラフQLが使われた理由というのがピンとこないんですけれども、どういった理由でグラフQLを導入したんですかね?
実はグラフQLを採用した意図としては、新しいデチューニング案を出したい、それを出題したいという思いが個人的にあって導入したんですけれども、その背景としては意外と僕がデチューニングの試作を考えているときに、この問題がいいなと思ってそれを出題しようとしたときに、実は過去のウェブスピンハックスも既に出題済みだったりするんですよね。
意外とそういう問題の重複というのが何度も何度もあって、いい問題を出すためには採用している技術を何か根本的に変えたほうが出しやすくなるんじゃないかという狙いがあって、過去のウェブスピンハックスの3回は全てREST APIでやってたんですけど、そこを思い切ってグラフQLにすることによって新しい問題を出したいというところにつながったのかなというふうに思いますね。
そういった違う技術の採用を通して出題する問題の幅を広げるみたいな感じですね。
実際グラフQLを導入してみて良かった点とか悪かった点はありますか?
良かった点で言うと、先ほどもちょっと述べたとおり、新しい試作でデチューニングを出すことができたというところは本当に良かったと思っていて、
例えば具体的に出したデチューニングの内容で言うと、一般的なベストプラクティスに修正する方法として、
例えばNプラス1問題を実際に発生させてサーバーにすごい負荷をかけるような感じにしてレスポンスを補足することでデチューニングしたりとか、
あとはクエリをわざと悪く組んで複数のリクエストに意図的に分割したりとか、余分なレスポンスデータを含ませたりとかというところもできたというところは非常にグラフQLを導入して良かったかなと思うところですね。
悪かったところで言うと、いろいろあるんですけれども、具体的には一番印象的だったのは、全てのデチューニング試作を出題することができなかったというのが一番悔しいところですね。
どういったことでしょうか?
なんでそれが出題できなかったかというと、実はメモリ不足というのが一番大きかったんですけど、
今年のウェブスピードハッカソンは、Fly.ioというサイトにアプリケーションをデプロイして、それをデプロイされたサイトに対してスコアを計測するという仕組みを取っていたんですけど、
そのFly.ioのサイトのインスタンスのメモリが256MBという大きさだったんですね。
一般的なアプリケーションであれば256MBで凝ったりするようなメモリのサイズだったんですけれども、
今回GraphQLを使って、意図的にNプラス1問題を発生させた上でデプロイをやっていたんですけど、
そういうところも踏まえて、結構サーバーに負荷がかかるような実装で開発をしていたんですね。
いざFly.ioにデプロイしてみると、メモリが足りなくてノードが落ちてしまうという問題がすごく発生してしまって、
そのメモリ不足によってやりたいGraphQLの試作を入れることができなかったんですね。
なるほど。悪く作ろうとすればするほどメモリを送っていくという、すごい面白いような取り組みで。
具体的にどういったクエリを組んだかというと、特定のページに飛んだときに、
今回作ったのがハイルオーガニックという名前のショッピングサイトを作ったんですけれども、
ショッピングサイトというだけあって、商品のデータがたくさん保存されているんですね。
その商品のデータを特定のページに飛んだときに、全金取得するというクエリを組んでいて、
そのレスポンスが返ってくるまでに大体4分ぐらい、4分必要とするぐらい膨大なクエリを叩いていたりしたんですけど、
それがメモリが落ちてしまって、出題としては出すことができなかったというところで非常に悔しいところで、
デチューニングにも結構加減が必要なんだなというところが非常に勉強になったところですね。
なるほどですね。
今回出題した以上にデチューニングを用意してくださったけども、
そういったメモリの問題などで悲しいことに出題を選ぶような感じになってしまったんですね。
ぜひ今回選ばれなかったやつは次回取り入れてほしいなって感じがしますね。
面白いですね。デチューニングをしたいが、それ以外の要素で絞られてしまうみたいな。
逆に作っている側もいろんな勉強になりますね。
そうなんですよね。やっぱり普段デチューニングってことをしないじゃないですか。
結構特殊な開発だと思うんですよね。
逆ですよね。
逆なんですよ。
普段、いつも業務として開発している上には無意識でパフォーマンスがいいコードを書いたりしているんですけど、
そういったところを頭使いつつ悪いコードを書かなきゃいけないので、
そういったところは今回運営に携わって開発する方も大変なんだなっていうのは身をもって実感したところですね。
やっぱり結構難しかったですか、デチューニングさせるために。
いろんな知識とか必要な感じなんですかね。
そうですね。いろんな知識が必要っていうのもそうなんですけど、
あとはどういう風にソースコードにデチューニングを落とし込むかっていうところが今回勉強になったなと思っていて、
今回自分が運営に携わったのが初めてってこともあって、
デチューニングをどうやってやってるかっていうのは今回初めて知ったんですけれども、
実際に開発に携わって思ったのは、今回実は以前のマティウェブポッドキャストの出演者でもある宮城さんと野口さんと一緒に開発をしたんですけれども、
その方々と一緒に開発していて思ったのは、デチューニングにも流儀があるっていうのもあって、
そのデチューニングを何でもかんでもやればいいってものじゃなくて、
ソースコードに落とし込んで、それをこういう感じでチューニングしてほしいなっていう意図を込められた風に開発をしているんですね。
なので、非常に我々としてはウェブスピードハッカソンとしてイベントの体験を良くするためにチューニングの体験を良くしたいって思いが根本的にあって、
分かりにくいソースコードを提供するんじゃなくて、分かりやすいソースコードかつチューニングの方針もなんとなくつかみ取れるような方針で開発をしていたりするので、
そういったところで流儀があるんだなっていうところは非常にウェブスピードハッカソンの運営に携わって初めて理解できたところでしたね。
むやみやたらに悪くするんじゃなくて、こういう問題を解いて、こういう風に解いてほしいからこういう風に書くみたいな感じだったんですね。
ちなみに今回はどのような思いを込めて作成されましたか?
今回の思いでいうと、分かりやすくチューニングの体験を良くしたいってところは変わらず開発をしていったので、
例えばすごく難読で難しい試作に関しては、別のファイルに似たようなチューニング、こういう風にチューニングするといいよっていうヒントを別のファイルに散りばめたりして、
自分の知識だけじゃなくても他のファイルを見るとヒントを得られるような試作を入れたりしていたので、
パフォーマンスをチューニングしている時に分からない情報でも後からいろんなファイルを見たらこういう風に修正すればいいんじゃないかっていうようなチューニング体験は意識して開発したってのもありますね。
他のファイルを参照するとヒントがあるっていう。
リアルなエンジニアって空気を読むってことをするじゃないですか。
あんな感じですよね。他のコードを読んでこういう風に書くんだなみたいな。こういう風に書くといいんだなみたいなところも学べるということで、いろいろ本当に思えば込められてるんですね。
今回スコアボードの方も結構力を入れたっていう話を聞いたんですけども、スコアボードについて新しい取り組みとかもあるんですか?
今年はスコアボードのサイトを自作したっていうのがありまして、競技として採点したスコアをそのサイトに反映させてリッチにUIを見せたいなと思って、そういうサイトを作りましたっていうのがベースですね。
実は去年のウェブスピードハッカーさんの課題の一つでもあったんですけれども、複数の人がGitHub Actionsで採点をしたときに、採点が何個も同時に走ると採点が遅くなってしまうという課題があったりしたので、
それを解決するために別でスコアを保持するデータベースを用意して、そこにスコアを上げることによって、並列でGitHub Actionsが走らせたときに採点が遅くなる問題を解決したいという思いもあったりして、別のスコアを保持する場所を作りたいという思いからスコアボードを作ったという背景がありますね。
確かに前回のポッドキャストで採点が結構時間かかってしまった。何分くらいでしたっけ?20分くらいかかってしまったんでしたっけ?
そうですね。
今回は結構それも改善されたということですか?
そうですね。今回に関しては実は採点してからそのスコアが反映されるまでだいたい10分とか、長くても15分とかで反映されるようになったんですけれども、
ここも実は工夫がいろいろあって、実はいろんな施策を盛り込みすぎた結果、3000体の状態で採点をかけると同じく20分くらいかかっちゃうんですよね。
前回と変わらず。
20分くらいかかってしまって、それはVRTで見た目の表示作業にエラーがないかというところを見て、いろいろ検証していくと20分くらいかかってしまうというところが課題としてあったので、
今年は思い切ってそのVRTというのを撤廃させて、いわゆるチューニング体験を良くするために採点したらすぐその結果が反映されるようにというところを意識して、
VRTをなくしたので結果10分で採点ができるなというところですね。
なるほどね。
使っていたものを撤廃して新しいものを導入して工夫をしていったということで。
そうですね。その反面やっぱりレギュレーション違反に停止させてしまう競技者の方がいるんじゃないかという懸念もあったりしたので、
競技終了時に運営がレギュレーション違反をしていないかというところをそのアプリケーションを実際に手動でチェックする機会があるんですけれども、
その何をどうチェックするかという一部を意図的に皆さんに見えるように公開したので、皆さんの手元の方で確認していただいてレギュレーション違反を防ぐためにそういったものを公開したという感じがありますね。
なるほど。手元でこのレギュレーションリストがあってクリアしてください。
そうです。
それを導入して結構レギュレーション違反は定めましたか?
そうですね。ちょっと残念ながらレギュレーション落ちしてしまう方はちょっと多かったのかなという気がしますね。
そうなんですね。どんなレギュレーションで落ちてたんでしょう?
やっぱり特定のインタラクションをした時に表示が崩れて見えちゃったりとか。
ボタンを押して表示されるものがちょっと崩れて表示されるみたいなイメージですかね。
あとは大きな差分で言うとログインボタンを押してもログインができないとか。
いわゆる機能差分が結構発生してしまってレギュレーション落ちになってしまうという恐怖心の方が結構いらっしゃって。
そこはちょっと運営としても事前にもう少しレギュレーション落ちをしていないかというのを検知できるような仕組みを整える必要があるかなと思っていて。
まだちょっと確定ではないんですけれども、例えばE2Eのような自動テストを導入してそれに抵触していなければレギュレーション違反じゃないよねっていうのを事前に分かるように。
ちょっと次回のウェブスピードハックスになればそういった導入をしてみたいかなというふうに思ってますね。
レギュレーション違反の自動化みたいな形ですね。なるほど。
結構やっぱり変えるだけでも元々の関数、ファンクションが崩れてしまったりだとか、もう動かなくなってしまったりっていうのが結構あるんですね。そういう話を聞いていると。
本当に作成者の意図が読み取れるような、そういうお題だったのかなと思うんですけども。
全体を通して何か次回もっと下で良くなるなぁとかありますか?それか個人的にすごい思い出に残る場面とかってありますか?
そうですね。それでいうと結構イベント当日とかに関しては、我々ウェブイベントとしては当日発生してしまったミスとかに関しては当日修正していたりしたんですけれども、
他のそういった余った時間では結構スコアボードのスコアの繊維を見ていたりとか、あとはそのツイッターとかでエゴサをしていたりしていたんですけれども、
どんな感じのエゴサをしていたんですか?
そうですね。ハッシュタグウェブスピードハッカさんとかっていうタグがあったりするので、それで見ていたりとか、あとはその文字列に含まれるウェブスピードハッカさんというところで検索をしていたりしたんですけれども、
そういった中でやっぱりその競技終了間際のツイートが個人的に印象に残っていて、
どんなツイートがあったんですか?
一番印象的だったのはその競技終了間際に点数を上げるためにかなり思い切ったチューニングを行った人がいて、
その人のチューニングの方法が間違って採点失敗してしまったらリーダーボードの上位から転落してしまう。
けどうまくいったらリーダーボードにそのまま食い込めるよねみたいな感じのツイートをしている方がいて、
やっぱりそういったウェブスピードハッカさんも一種の競技としてやっているので、
そういう時間制限の中でいかに点数を伸ばすことができるかっていうところで、
やっぱり今年は学生の方と一般の方を合わせて一緒に同時開催しているという人数が増えているところも相まって、
すごい競技性が増しているなっていうのはそういったツイートだったり、
あとはその競技終了間際の皆さんの動きとかを見ていると競技性がすごく増しているなっていうのは実感したなと思いますね。
面白いですね。結構みんな本当にガチでやってくださっているみたいな感じなんですね。
確かに今回一般の方と学生交えているんですけど、一般の方の方がチューニングがうまかったりとか、
そういう結構レベルの差分とかは出てきたりとかしなかったんですかね。
そうですね。結構リーダーボードの上位に食い込んでいる方に言うとやっぱり一般の方が多かったですね。
やっぱその内訳とかを見ていると各ウェブスピードハッカさんで入賞したことがあるとか、
以前のウェブスピードハッカさんで入賞したことがある人だったりとか、
やっぱりその歴戦の重さみたいなことがリーダーボードの上位に食い込んだりしていたんですけれども、
学生の方も本当に劣らずで、いわゆるレギュレーション違反をしてしまったんですけれども、
点数的に言えばかなり上位の方の方がたくさんいらっしゃったりしたので、
両方ともやっぱりそれぞれの強みというか、それぞれ活躍しているなっていう様子がリーダーボードを見て見受けられましたね。
嬉しいですね。県内の学生たちのレベルが本当に年々上がっていく中で、
こういうふうに一般の方と戦えるという感度があるということもいいですし。
そうですね。今年初めてのチャレンジだったんですけれども、
そういったところを見受けることができて本当に同時開催してよかったなと思いますね。
そうですね。本当に。
ちなみに次回は同じく同時開催で考えている形ですかね。
そうですね。まだちょっと何とも決まっていないので何とも言えないんですけど、
やっぱり競技性を増すために同時開催するんじゃないかなと個人的には思っていますね。
なるほど。ちなみに次回新しく取り入れようとしていることとかってありますか。
あれば教えてほしいなと思ったんですけど。
まだ開発がそもそもまだ始まっていなくて、
自分がウェブスピードハッカソンの今回は運営側として出たので、
たぶん次回は問題を解く方に回ると思うので、
そういった時にはどうなっているかというのが非常に楽しみですね。
なるほど。
そろそろ時間も来たということなんですけども、
今回改めてポッドキャストで今回のスピードハッカソンを振り返ってみて感想とかってありますか。
個人的にはやっぱりそういった運営に携わることによって、
ウェブスピードハッカソンの方針だったりとか、
例えば開発する上でこういった有意義があることだったりとか、
新しい学びが非常にたくさんあったというところで、
運営に携わって本当に楽しくイベントの運営ができたかなと思っております。
ウェブスピードハッカソンも競技としての側面もある一方、
パフォーマンスのチューニングの知識というところを学習する機会でもあると思うので、
こういったイベントをより大きくして、将来的にはもっともっとウェブフロントエンドの業界として、
パフォーマンス知識を貢献できるようなイベントにしていけたらなと思っているので、
今後もこういったイベントに積極的に参加していこうかなと思っております。
ありがとうございます。
僕も聞いてて本当に裏話、作成者、いろんなことを思いながら作っているといったところと、
いろんな方が参加してくださって、また本当に楽しんで参加してくださっているというのが聞いてて分かるなと思いますし、
今後のウェブスピードハッカソンもいろんな方が参加してくれたらいいなと思いますし、
僕も機会があればぜひウェブフロントエンジニアとして一回参加してほしいなと思いますね。
はい、では本日マディウェブポッドキャスト、ウェブスピードハッカソンについていろいろ面白い話があったんじゃないかなと思います。
ぜひ聞いている皆さん次回のイベントにも参加してほしいと思います。
それでは皆さんありがとうございました。
バイバイ。

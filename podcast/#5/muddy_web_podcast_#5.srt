1
00:00:00,000 --> 00:00:11,000
マディウェブポッドキャストは、マディの意味が泥であるように ウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、

2
00:00:11,000 --> 00:00:25,000
実際に明日から使えるかもしれないウェブフロントエンド知識や技術を 参加者の皆様と共有し合うことを通して、フロントエンド界隈の役に立てるように思いを込めて発信しています。

3
00:00:25,000 --> 00:00:29,000
はい、それではマディウェブポッドキャストを始めていきましょう。

4
00:00:29,000 --> 00:00:42,000
本日のテーマは、プロダクトのリリースについて第2弾ということで、 第1弾が1話目で話したんですけども、それの第2弾ということで違う授業所から話していきたいと思います。

5
00:00:42,000 --> 00:00:47,000
ファシリティータは私、株式会社シロックより石井ゆきがお送りいたします。

6
00:00:47,000 --> 00:00:51,000
本日ゲストでお越しいただいてます2名の方がいらっしゃるんですけども、

7
00:00:51,000 --> 00:00:57,000
CAMより石井ゆきさんとAI事業本部より森田正敏さんがお越しいただいております。

8
00:00:57,000 --> 00:01:01,000
最初軽く自己紹介の方をしていただきたいんですけども、 石井さんからお願いしていいですか?

9
00:01:01,000 --> 00:01:03,000
はい、わかりました。

10
00:01:03,000 --> 00:01:07,000
サイバーエージェントのグループ会社、株式会社CAMでフロントエンドエンジニアをやっています。

11
00:01:07,000 --> 00:01:09,000
石井と申します。

12
00:01:09,000 --> 00:01:15,000
入社しても5年目で、今はCAM内のフロントエンドで新規開発の方を今やっています。

13
00:01:15,000 --> 00:01:17,000
本日はよろしくお願いします。

14
00:01:17,000 --> 00:01:19,000
よろしくお願いします。

15
00:01:19,000 --> 00:01:21,000
次、森田さんお願いします。

16
00:01:21,000 --> 00:01:25,000
サイバーエージェントのAI事業本部アプリエンスセンターで

17
00:01:25,000 --> 00:01:28,000
ウェブフロントエンドエンジニアを担当しております。森田と申します。

18
00:01:28,000 --> 00:01:33,000
AI事業本部はサイバーエージェントの中でインターネット広告事業をやっている部署で、

19
00:01:33,000 --> 00:01:38,000
その中でAI事業で展開している、そのAIを活用したDXを使って、

20
00:01:38,000 --> 00:01:43,000
主に小売企業に提携していろんなものを作っているような部署でございまして、

21
00:01:43,000 --> 00:01:48,000
そこのウェブサービスとかアプリとかをいろいろ作らせていただいているという感じです。

22
00:01:48,000 --> 00:01:50,000
よろしくお願いします。

23
00:01:50,000 --> 00:01:52,000
本日はよろしくお願いします。

24
00:01:52,000 --> 00:01:54,000
よろしくお願いします。

25
00:01:54,000 --> 00:02:01,000
テーマ通りなんですけども、実はこれ裏話で収録2回目で撮り直してるんですけども、

26
00:02:01,000 --> 00:02:06,000
ちょっと盛り上がりすぎて行き過ぎてしまったかなっていうところがあるんですけども、

27
00:02:06,000 --> 00:02:11,000
それと同じようにリリースについて、皆さんどういうふうにリリースしているかというのは

28
00:02:11,000 --> 00:02:15,000
ちょっと深く聞いていきたいなと思っているんですけども、

29
00:02:15,000 --> 00:02:21,000
最初リリースって多分いろんな事業所によって違うやり方をしていると思うんですけども、

30
00:02:21,000 --> 00:02:26,000
そのプロダクトのリリースまでフローとして軽く聞いてみてもいいですかね。

31
00:02:26,000 --> 00:02:29,000
CAMではどうやってますか?

32
00:02:29,000 --> 00:02:33,000
そうですね、基本的にはソースコードのリリースだと、

33
00:02:33,000 --> 00:02:38,000
ソースコードをマークするときにメインブランチのGitHub上でマージして、

34
00:02:38,000 --> 00:02:45,000
CICDでデプロイをして反映されるっていうのが基本的なリリースになりますね。

35
00:02:45,000 --> 00:02:50,000
基本そんな感じなんですけど、AIの方はどんな感じなんですか?

36
00:02:50,000 --> 00:02:57,000
概ねAIの方もソースコードの方をビルドされたものをプロダクションの方にビルドするというのは変わらないんですけども、

37
00:02:57,000 --> 00:03:04,000
こちらもCICDを含んでリリースのフローを整備してリリースするようにしています。

38
00:03:04,000 --> 00:03:08,000
一部特徴的なところとしては、

39
00:03:08,000 --> 00:03:14,000
CDを使っているシステムとして、サイバーアイテムとか開発しているタイプCDというCDを使って、

40
00:03:14,000 --> 00:03:21,000
バックエンドとかフロントエンドも含めて一元で管理できるように動いているというところが一つ特徴的なのかなというところと、

41
00:03:21,000 --> 00:03:28,000
あとは、デブ環境、ステージング環境、プロダクション環境というふうに環境を分けて管理をしているんですけども、

42
00:03:28,000 --> 00:03:32,000
環境に応じてリリースのフローを変えているというのが一つ特徴かなと思っていて、

43
00:03:32,000 --> 00:03:38,000
デブ環境の方にデプロイする際はプロデュクエストがマージされたタイミングで、

44
00:03:38,000 --> 00:03:41,000
タグを切らなくても自動的にタグにハッシュがついて、

45
00:03:41,000 --> 00:03:45,000
それで自動的にデプロイされるような仕組みを作っていたりとかというところで、

46
00:03:45,000 --> 00:03:51,000
開発の効率化というところを図るようなところが特徴的かなと思います。

47
00:03:51,000 --> 00:04:00,000
CIとか結構しっかり固めて環境を分けてやっていく中で、デブの環境を用意しているということらしいんですけども、

48
00:04:00,000 --> 00:04:08,000
デブの環境を使うとリリース前にいろんなバグの発見だとかあると思うんですけど、

49
00:04:08,000 --> 00:04:11,000
結構やってみていいですかね。

50
00:04:12,000 --> 00:04:16,000
デブの環境まで自動にデプロイされるようにすることによって、

51
00:04:16,000 --> 00:04:23,000
フロントエンドだとローカルで開発をして開発の機能をどんどん進めていくということがあると思うんですけども、

52
00:04:23,000 --> 00:04:30,000
一部サーバー上に置いて実際に動作確認をしたいというニーズがある程度あると思っていて、

53
00:04:30,000 --> 00:04:35,000
そういうときにやっぱり気軽にデプロイできる環境を用意できているというのは、

54
00:04:35,000 --> 00:04:38,000
開発の効率化に大きくつながっているなと思っています。

55
00:04:38,000 --> 00:04:42,000
だからといって何でもかんでも試してみればいいというわけではないんですけども、

56
00:04:42,000 --> 00:04:51,000
ある程度デブ環境に関してはそういった開発する上でちょっとチャレンジングなこととかも試せるような環境を整備して、

57
00:04:51,000 --> 00:04:56,000
エンジニアとしてのモチベーションみたいなところも保ちながら開発ができているかなと思っています。

58
00:04:56,000 --> 00:05:03,000
確かに、実際リリースというか本番の携帯とか特にフロントなんかそうなんですけど、

59
00:05:03,000 --> 00:05:08,000
モバイルとか実機で見ると意外と開発ってブラウザー上が多いかなと思っているんですけど、

60
00:05:08,000 --> 00:05:12,000
実機で見ると意外と動作が違う風に動いたりとかすることがありますもんね。

61
00:05:12,000 --> 00:05:16,000
そうしたときにやっぱりデブ環境ってすごく便利だなと思ったりしますね。

62
00:05:16,000 --> 00:05:23,000
そうですね。むしろデブ環境がないっていうのはもはやあんまり聞かないというか、

63
00:05:23,000 --> 00:05:31,000
そんないきなり本番に出すみたいなことはやらない世界線になっているのかなっていうのはあったりとかしますけど、

64
00:05:31,000 --> 00:05:38,000
ちょっとAIとCAMは違って環境は分かれてるんですけど、開発ブランチも分かれてるんで、

65
00:05:38,000 --> 00:05:43,000
デブブランチがあってステージングブランチがあって本番用のメインブランチがあるみたいな感じなので、

66
00:05:43,000 --> 00:05:46,000
ちょっとデプロイの仕方はやっぱ違うんですけど、

67
00:05:46,000 --> 00:05:53,000
CAMは普通にデブにマージしたらデブ用の環境のデプロイが走るみたいな形になっているので、

68
00:05:53,000 --> 00:06:00,000
CICDはそんなにフロントエンドの開発者が意識せずに普通にマージしたらデプロイされるみたいなのを採用しています。

69
00:06:00,000 --> 00:06:06,000
もちろんリーダー陣とかはデプロイのCICDを組んだりとかはもちろんしているので、

70
00:06:06,000 --> 00:06:08,000
作業者はあんまり気にする必要はないという。

71
00:06:08,000 --> 00:06:14,000
これはこのブランチにマージするだけでデプロイされるというのが結構利点かなというふうに思っていますね。

72
00:06:14,000 --> 00:06:15,000
なるほど。

73
00:06:15,000 --> 00:06:24,000
じゃあそのブランチでマージして、本当に開発者が意識しなくても確認できるようなリリースフローが整っているんですね。

74
00:06:24,000 --> 00:06:27,000
そうですね。整っているという感じですね。

75
00:06:27,000 --> 00:06:28,000
なるほど。

76
00:06:31,000 --> 00:06:37,000
リリースのCIの中でいろんなステップがあると思うんですけれども、

77
00:06:37,000 --> 00:06:41,000
自動テストとかってこの中でもやっぱり入れてますか?

78
00:06:41,000 --> 00:06:43,000
CIのその…

79
00:06:43,000 --> 00:06:44,000
E2Eテストみたいな。

80
00:06:44,000 --> 00:06:46,000
E2Eテストとかもそうですよね。

81
00:06:46,000 --> 00:06:49,000
ユニットテストとかも結構入れているところも多いのかなと思っていて。

82
00:06:49,000 --> 00:06:52,000
そういったところをやっぱりツールとか使ってやっている感じですかね?

83
00:06:52,000 --> 00:06:54,000
そうですね。

84
00:06:54,000 --> 00:07:00,000
まずAI事業本部のほうではユニットテストのほうは基本的には書くようにはしているので、

85
00:07:00,000 --> 00:07:03,000
そこのテストっていうのはCIで回すようにはしています。

86
00:07:03,000 --> 00:07:07,000
実際にそのいわゆる結合テストであったりとか動作確認みたいなところ。

87
00:07:07,000 --> 00:07:11,000
そこに関してはちょっとE2Eテストも導入予定ではあるんですけれども、

88
00:07:11,000 --> 00:07:15,000
ちょっとなかなか動けていないというところがちょっと現状ではございまして、

89
00:07:15,000 --> 00:07:17,000
その代わりといってはなんですけど、

90
00:07:17,000 --> 00:07:20,000
テスト広告書みたいなものがあるんですけれども、

91
00:07:20,000 --> 00:07:24,000
例えばエンジニアじゃなくても動作確認とかって結構できるので、

92
00:07:24,000 --> 00:07:27,000
例えばチームの中でデザイナーであったりとか、

93
00:07:27,000 --> 00:07:31,000
他の例えばセールスチームだったりとかプロジェクトマネージャーだったりとかっていうところに

94
00:07:31,000 --> 00:07:33,000
動作確認をいろいろしてもらって、

95
00:07:33,000 --> 00:07:38,000
ある意味で言うと壊す前提でちょっと動いてもらうみたいな形でいろいろテストをしてもらって、

96
00:07:38,000 --> 00:07:41,000
そこでエンジニアのほうで実は気づけなかったバグとか、

97
00:07:41,000 --> 00:07:45,000
そういうところとかも出してもらえるような形で動いていたり。

98
00:07:45,000 --> 00:07:49,000
結構テストとかでもやっぱり触ってみるといいですね。

99
00:07:49,000 --> 00:07:54,000
いろんな項目が用意されていて、これで実際動かしてみる。

100
00:07:54,000 --> 00:08:04,000
何かの本でエンジニアがテストするときとテスターがテストするときのテスト項目の書き方がすごい違うっていう記事をこの前見て、

101
00:08:04,000 --> 00:08:06,000
すごい面白いなと思ったんですけど、

102
00:08:06,000 --> 00:08:10,000
内容を忘れちゃったんですけども、何かそんな話を思い出して。

103
00:08:10,000 --> 00:08:16,000
CAMのほうでは結構静的コードの解析とかも入れたりとかします?

104
00:08:16,000 --> 00:08:22,000
いわゆるテストコードを書いてCICDで回してみたいなところはちょっと出遅れているところがあって、

105
00:08:22,000 --> 00:08:24,000
あまり整備しきれてないんですけど、

106
00:08:24,000 --> 00:08:27,000
もちろん取り入れができるようなところはありますけど、

107
00:08:27,000 --> 00:08:39,000
アーキテクチャーとかを取り入れてコード分離したりとかして、将来的にテストが書きやすいような構成に新規ではしていたりとか。

108
00:08:39,000 --> 00:08:42,000
そういったものを取り入れていこうという風に考えていて、

109
00:08:42,000 --> 00:08:45,000
今のところはテストコードを書いて、

110
00:08:45,000 --> 00:08:48,400
そうですね テストコードまでは まだあんまり書けてないですけど

111
00:08:48,400 --> 00:08:51,680
アーキテクチャーとかを取り入れて もうコード分離したりとかして

112
00:08:51,680 --> 00:08:57,640
将来的にテストが書きやすいような 構成に新規ではしていたりとか

113
00:08:57,640 --> 00:09:01,520
もちろんHypeScriptとか静的解析系 とかカタチェックとかはもちろん

114
00:09:01,520 --> 00:09:06,920
やっていて 外部の通常でSonaCloud とか使って 人間が気づきにくい

115
00:09:06,920 --> 00:09:10,640
なんか使ってない変数ですよみたいな そういう静的解析ももちろん始まって

116
00:09:10,640 --> 00:09:15,080
感じですね さっきの結合テストみたいな話

117
00:09:15,080 --> 00:09:18,560
やったと思うんですけど CAMでも社内でそういうのはもちろん

118
00:09:18,560 --> 00:09:22,480
やっていて プロデューサーだったりとか エンジニアでテスト項目考えて

119
00:09:22,480 --> 00:09:27,080
作って デバッグ期間みたいなのも受けて もちろんチーム内で動かしたり

120
00:09:27,080 --> 00:09:32,080
とか あと社内で結構新規サービス 作ってるんで 新規サービスを盛り上げて

121
00:09:32,080 --> 00:09:37,080
こうっていう文脈で リリース前に 社内おさわり会みたいな感じで

122
00:09:37,120 --> 00:09:41,920
デブとか解放して 社内の人が不特定 多数で触ってもらって いろいろ

123
00:09:41,920 --> 00:09:45,280
書いてもらったりとか意見言って もらったりとかして 実際に反映

124
00:09:45,280 --> 00:09:49,360
したりとか直したりとかっていう のはやっていたりとかしますね

125
00:09:49,360 --> 00:09:54,240
結構新規作るにあたって特殊な テストみたいな感じかもしれない

126
00:09:54,240 --> 00:09:57,080
けど そういうのがありますね

127
00:09:57,080 --> 00:10:02,760
面白いですね 実際にいろんな関わ ってる人関わってない人に実機

128
00:10:02,760 --> 00:10:05,960
を触っていただいてレビューを もらってそれを改善していくって

129
00:10:05,960 --> 00:10:06,960
形なんですか

130
00:10:06,960 --> 00:10:10,560
はい 毎回新規前はやってますね

131
00:10:10,560 --> 00:10:14,040
結構アジャイル的な感じの動き なんですかね

132
00:10:14,040 --> 00:10:17,440
そうですね 確かに言われてみれば そういう感じはしますね

133
00:10:17,440 --> 00:10:22,840
面白いですね 話の中でソナークラウド とかツールを使うような話ありました

134
00:10:22,840 --> 00:10:28,680
けど やっぱり最近ってCIにどんどん ツールを導入する流れが多いん

135
00:10:28,680 --> 00:10:29,680
ですかね

136
00:10:29,680 --> 00:10:34,920
そうですね いっぱいあるので必要 に応じてみたいな ちゃんと趣旨

137
00:10:34,920 --> 00:10:39,240
が選択はもちろん必要だと思う ので 必要なものだと思ったら

138
00:10:39,240 --> 00:10:42,760
入れるっていうのもありますし あと導入コストはあんまりない

139
00:10:42,760 --> 00:10:47,400
ので 入れてみて合わなかったら やめるとかは全然ありますね

140
00:10:47,400 --> 00:10:52,200
そうですね AIでも割と試行錯誤 して ギターワークションズだと

141
00:10:52,200 --> 00:10:56,720
本当にいろんなものが結構入れられる ので それこそ入れすぎちゃうと

142
00:10:56,720 --> 00:11:00,240
あとでギターワークションズが 開いたしすぎて誰も触れないみたいな

143
00:11:00,240 --> 00:11:03,960
ちょっと困惑点とかなので そこは 入れるものっていうのはプロジェクト

144
00:11:03,960 --> 00:11:09,680
に合わせてニーズを絞って入れる ようにはしています 開発の初期

145
00:11:09,680 --> 00:11:14,560
段階とかだと本当にそれこそ例えば レビュードックとかあとデベンダ

146
00:11:14,560 --> 00:11:19,360
ポップとかそういったものくらい を初回は入れて あとはリリース

147
00:11:19,360 --> 00:11:24,280
のニーズに合わせてスクリプト 経費 例えばリリースノートを自動

148
00:11:24,280 --> 00:11:28,320
生成するツールだったりとか そうい ったものを必要に応じて入れて

149
00:11:28,320 --> 00:11:36,120
いくという感じです 結構事業のレベル 成長に合わせて変えていくみたいな

150
00:11:36,120 --> 00:11:40,680
感じなんですね そうですね まずリリースまでのフロー

151
00:11:40,680 --> 00:11:44,520
っていうのは先に作るようには してるんですけど そこの環境の

152
00:11:44,520 --> 00:11:48,640
整備というか その後プロダクション としてリリースできるようなプロダクト

153
00:11:48,640 --> 00:11:53,000
としての品質の向上っていうところ は開発をしながら徐々に品質を

154
00:11:53,000 --> 00:12:04,400
向上させていくという形で進めて います

155
00:12:04,400 --> 00:12:07,800
実際にいろんなツール触ってき てると思うんですけど入れてみて

156
00:12:07,800 --> 00:12:10,760
これよかったなみたいなツール ってありますか おすすめしたい

157
00:12:10,760 --> 00:12:15,600
ツール賛成みたいな感じで なんすかね

158
00:12:15,600 --> 00:12:20,920
さっき話してたソナークラウド とかって実際使ってみて結構改善

159
00:12:20,920 --> 00:12:27,480
されましたか そうですね 結構改善されてますね

160
00:12:27,480 --> 00:12:31,980
指名的なものっていうよりかは どちらかというとちょっと抜け

161
00:12:31,980 --> 00:12:35,800
ちゃったよねみたいなとか気づ けながらちょっとした変数使って

162
00:12:35,800 --> 00:12:39,960
ないよねとかこういう書き方危ない よねとかこういう書き方意味なく

163
00:12:39,960 --> 00:12:47,320
ないみたいなのを技術者という か技術者の知識に関係なく指摘

164
00:12:47,320 --> 00:12:50,840
してくるのでいろんな書き方を 指摘してくると思うんですけど

165
00:12:50,840 --> 00:12:54,360
この書き方は良くないよねみたいな こういう理由だからみたいな感じ

166
00:12:54,360 --> 00:13:00,680
で指摘してくれるので結構チーム の書き方の統制というのは結構

167
00:13:00,680 --> 00:13:03,480
生きてるのかなっていう感じが しますね

168
00:13:03,480 --> 00:13:08,240
ソナクラウドってスタイルガイド みたいなに反するところに似た

169
00:13:08,240 --> 00:13:13,000
みたいな感じですよね 結構あれってカスタマイズとか

170
00:13:13,000 --> 00:13:15,760
できるんですか できますねできます

171
00:13:15,760 --> 00:13:19,840
結構やっぱりチームでいろんな 最近思ってるんですけどいろんな

172
00:13:19,840 --> 00:13:25,160
人が入ってくるといろんな書き方 があるなって思って確かにプロジェクト

173
00:13:25,160 --> 00:13:29,480
がだんだん長くなってくると過去 の履歴とかを見ているとその辺

174
00:13:29,480 --> 00:13:34,240
が整ってないともう書き方めちゃ くちゃな話とかも結構あるかな

175
00:13:34,240 --> 00:13:41,320
と思ってていったところだとやっぱり 一貫性を保つにはそういうスタイル

176
00:13:41,320 --> 00:13:43,640
ガイドのリンターみたいなの入れる のってすごくいいですよね

177
00:13:43,640 --> 00:13:52,080
AIではCIツールとかで導入してみて よかったやつはありますか

178
00:13:52,080 --> 00:13:57,840
まず導入してよかったなと思った のはChromaticですねストーリーブック

179
00:13:57,840 --> 00:14:02,560
みたいな形でコンポーネントとか のリフをいわゆるVRTみたいな形

180
00:14:02,560 --> 00:14:06,600
で表示してくれるようなものなんです けど結構VRTって導入するの割と

181
00:14:06,600 --> 00:14:11,160
めんどくさかったと思うんですけど Chromaticは本当にChromaticのユーザー

182
00:14:11,160 --> 00:14:15,840
を追加してあとはCIでちょちょっと 書いてあげれば勝手に免許して

183
00:14:15,840 --> 00:14:21,440
くれるんでVRTっていう面ではスタイル の違いとか見た目の違いとかっていう

184
00:14:21,440 --> 00:14:25,720
のがすごくキャッチしやすくなった なっていうのが一つあるんでこれは

185
00:14:25,720 --> 00:14:29,240
今後も導入していきたいなとは 思ってます

186
00:14:29,240 --> 00:14:33,520
ちょっとまだ導入できてないんですけど 1個気になっているものがあって

187
00:14:33,680 --> 00:14:39,120
What the diffって言われるやつで AIでプルリクエストのサマリとか

188
00:14:39,120 --> 00:14:43,560
を出してくれるやつ例えばクリエイト リアクトアップとかでタイプスクリプト

189
00:14:43,560 --> 00:14:46,720
のプレートリアクトアップのテンプレート を入れてそれでプルリクエスト

190
00:14:46,720 --> 00:14:50,360
出すとそれをコードを勝手に読んで 推論してくれてプルリクエスト

191
00:14:50,360 --> 00:14:54,680
のサマリを作ってくれるんですよ ねこれはリアクトJSというJavaScript

192
00:14:54,680 --> 00:14:58,000
のフレームワークを使ってタイプ スクリプトで構成されたものです

193
00:14:58,000 --> 00:15:01,200
みたいなところとかパッケージ として何点何バージョンのもの

194
00:15:01,200 --> 00:15:04,640
入れてますみたいなこういうテンプレート を使ってますみたいなものをリスト

195
00:15:04,640 --> 00:15:08,280
でプルリクエストのサマリを勝手 に作ってくれてそれだけじゃなくて

196
00:15:08,280 --> 00:15:10,920
レビューもしてくれるんですよ レビューもしてくれる

197
00:15:10,920 --> 00:15:13,960
レビューをしてもらうには多少 細かい指摘がしてきている指定

198
00:15:13,960 --> 00:15:18,200
が必要なんですが例えばアローファンクション じゃないものを指摘してください

199
00:15:18,200 --> 00:15:22,680
とかこのリントの設定にのっと ったレビューをしてくださいみたいな

200
00:15:22,680 --> 00:15:26,720
形でちょっと原始的なところは あるんですけど結構AIが自動で

201
00:15:26,720 --> 00:15:30,400
レビューしてくれるので人間の レビューの精度がより上がるという

202
00:15:30,400 --> 00:15:33,720
かそういったところを見なくて すむのでこれはちょっと導入して

203
00:15:33,720 --> 00:15:39,680
みたいなと思っているのとあと ギッターブの公式のほうでもAI

204
00:15:39,680 --> 00:15:42,520
を使ったプルリクエストの生成 みたいなところを今ギッターブ

205
00:15:42,520 --> 00:15:46,560
のリストで考えているみたいで それは非常に期待しているという

206
00:15:46,560 --> 00:15:50,640
感じです もうAIがレビューも考えてしまう

207
00:15:50,640 --> 00:15:53,800
時代になってきましたね そうですね AI事業本部なんでそれ

208
00:15:53,800 --> 00:15:59,760
を活用していきたいところではあります 確かにPRのレビューとかってすごい

209
00:15:59,760 --> 00:16:04,920
なんだかんだ構成がかかるんですよ ねといったところでおそらく最終

210
00:16:04,920 --> 00:16:10,000
的には人間の目でまだ見る段階 なのかなと思うんですけどその

211
00:16:10,000 --> 00:16:14,840
ここまでの先ほど話したみたいな リンターに違反しているような

212
00:16:14,840 --> 00:16:18,640
とかそういったところの機械が やってくれると本当にすごく開発

213
00:16:18,640 --> 00:16:22,640
スピードとかも高まっていいかな ってすごく期待大ですね

214
00:16:23,520 --> 00:16:25,520
そうです確かに

215
00:16:25,520 --> 00:16:35,520
CIの中でさっき話出ていたChromatic あれって確かPRもステイトで見て

216
00:16:35,520 --> 00:16:39,920
てPRでアプローブされないとリリース できませんみたいなことも確か

217
00:16:39,920 --> 00:16:41,800
にできましてね そういったことも可能なのでより

218
00:16:41,800 --> 00:16:47,600
厳密な形で踏み込むことも可能 ですね今の段階では結構そこまでは

219
00:16:47,600 --> 00:16:50,480
厳密にはしていないんですけど しっかりその辺のルールを整備

220
00:16:50,480 --> 00:16:54,440
して例えばそこのレビューが通 らないとダメっていうふうにして

221
00:16:54,440 --> 00:16:57,200
かつそのレビューを例えばデザイナー にやってもらうとかっていうふう

222
00:16:57,200 --> 00:17:01,560
にするとデザイナーもコードレビュー じゃないですけどそのレビュー

223
00:17:01,560 --> 00:17:05,480
にしっかり参加できるみたいな それがしっかり可視化されるみたいな

224
00:17:05,480 --> 00:17:08,640
ところもフローとして確立できる ので非常に良いんじゃないかな

225
00:17:08,640 --> 00:17:11,160
とは思ってます

226
00:17:11,160 --> 00:17:14,520
デザイナーにレビューしてもらう っていうの新しいあれですよね

227
00:17:14,520 --> 00:17:18,920
しかもあれ僕も触ったことあるん ですけどディファレンスとの違い

228
00:17:18,920 --> 00:17:23,600
が緑色にハイライトされて結構 1ピクセル単位でも出てきます

229
00:17:23,600 --> 00:17:24,600
よね

230
00:17:24,600 --> 00:17:28,440
そうですねそこは結構VRTあるある ではあるんですけども例えば結構

231
00:17:28,440 --> 00:17:31,600
よくあるのがフォントをカスタム フォントレブフォントを入れている

232
00:17:31,600 --> 00:17:35,400
ときにフォントの読み込みが先に マウント前にスクリーンショット

233
00:17:35,400 --> 00:17:39,080
取られちゃってそこでディフ出る みたいなのが結構あったりもするん

234
00:17:39,080 --> 00:17:43,480
ですけどその辺りの細かい際とか はちょっとキャッチアップして

235
00:17:43,480 --> 00:17:46,160
あげる必要があるんですけど結構 グロマティックも細かく設定が

236
00:17:46,160 --> 00:17:51,320
できて例えばこの画面は対象外 にするとかこのファイルはイグノア

237
00:17:51,320 --> 00:17:55,720
するみたいな設定もできるんで その辺りは結構細かくカスタマイズ

238
00:17:55,720 --> 00:17:58,280
してプロジェクトに合わせてニーズ に合わせてやっていけばいいの

239
00:17:58,280 --> 00:18:02,640
かなっていうところとあと1ピクセル 単位でもズレが本当にズレてる

240
00:18:02,640 --> 00:18:06,880
のかスクリーンショットでも細かい 際レンダリングのタイミングとか

241
00:18:06,880 --> 00:18:11,840
の問題なのかっていうところは 結構難しくてその辺りは結構割

242
00:18:11,840 --> 00:18:15,440
とフロントエンドエンジニアの 知識の業務によるのかなという

243
00:18:15,440 --> 00:18:19,600
ところがあってレビューで指摘 されてもこれは実はレンダリング

244
00:18:19,600 --> 00:18:22,880
の問題でこういうことなので対応 しなくてもいいですっていうふう

245
00:18:22,880 --> 00:18:27,400
にするのかそれとも実際マジで ズレてるのかっていうのは結構

246
00:18:27,400 --> 00:18:31,360
レビュー受けた人のちゃんと技術 量によると思うんでそこはもう

247
00:18:31,360 --> 00:18:34,560
みんなでレベルを上げていくしかない なと思ってます

248
00:18:34,560 --> 00:18:38,560
そうなんですねでもなかなかまだ 便利だけども辛みがあるところ

249
00:18:39,120 --> 00:18:43,280
そこはそうですねガチっと例えば スクリーンショットを撮るタイミング

250
00:18:43,280 --> 00:18:48,160
とかがちゃんとディレイしてくれて ガチっとレンダリングしっかり

251
00:18:48,160 --> 00:18:52,320
行ったタイミングでスクリーンショット 撮ってくれるとかってなったら

252
00:18:52,320 --> 00:18:56,640
すごくいいんでしょうけど結構それも 難しいんだろうなと思います

253
00:18:56,640 --> 00:19:01,520
確かにスピレーとかだとレンダー の前とかの状態が変化する前の

254
00:19:01,520 --> 00:19:03,920
やつをスクリーンショット撮ったり とかする場所もね

255
00:19:03,920 --> 00:19:04,920
そうですそうです

256
00:19:04,920 --> 00:19:10,920
難しいところだCAMではこれから 導入したいツールみたいなのって

257
00:19:10,920 --> 00:19:12,200
あったりします

258
00:19:12,200 --> 00:19:19,240
そうですねVRTとかはあんまり話 とかは出ていかなくてそもそも

259
00:19:19,240 --> 00:19:24,840
API通信とかのほうのユニットテスト とかのほうを今注力してやってる

260
00:19:24,840 --> 00:19:27,640
ってところでさっきちょっと言 ったんですけどコード分割して

261
00:19:27,640 --> 00:19:32,040
アーキテクチャ取り入れてテスト しやすい感じにしていて今はちょ

262
00:19:32,040 --> 00:19:35,400
こちょこテストコードを書いて みてみんなでああだこうだ言ってる

263
00:19:35,400 --> 00:19:39,320
っていうこんな書き方でいいのか みたいな感じでいろいろ検証して

264
00:19:39,320 --> 00:19:42,960
いるという段階ではありますね なのでその辺のユニットテスト

265
00:19:42,960 --> 00:19:48,440
系の知見とかがけっこうCAMでは 欲してる感じではありますね

266
00:19:48,440 --> 00:19:53,960
ユニットテストで言うとフロント で有名なのはやっぱジェストとか

267
00:19:53,960 --> 00:19:59,240
そうですねジェストとかですね 結構やっぱりジェストが多いですよね

268
00:19:59,960 --> 00:20:04,280
あとは例えばリアクトを使ってるん だったらリアクトテスティング

269
00:20:04,280 --> 00:20:07,800
ライブラリーがありますねもう あれですかねもうエンザインとか

270
00:20:07,800 --> 00:20:09,800
シノンは使わないんですかね

271
00:20:09,800 --> 00:20:13,880
でもMacとかでシノンとかは使いますよ ね

272
00:20:13,880 --> 00:20:18,320
使ったりとかはしてますね特に API通信とかの系のテストとか書く

273
00:20:18,320 --> 00:20:19,800
ときは多分結構使ったりとかしてます ね

274
00:20:19,800 --> 00:20:24,680
いわゆるスパイツールみたいな ツールがありますね結構テスト

275
00:20:24,680 --> 00:20:28,680
のところのツールを今入れてる というか

276
00:20:28,680 --> 00:20:33,600
そうですね今取り組んでいるという 形ですね

277
00:20:33,600 --> 00:20:36,560
面白そうですねワクワクしそうな 話すごい

278
00:20:36,560 --> 00:20:49,120
そうですねツールとかいろいろ 入れてると思うんですけどそういう

279
00:20:49,120 --> 00:20:54,360
CIとか通ってやっとリリースされて いく感じですよね

280
00:20:54,360 --> 00:20:59,120
そうですねマップしてると思うん ですねあとCAMとかだとコード

281
00:20:59,120 --> 00:21:03,560
とか新機能とかリリースコード 上のGitHubでメインにマージして

282
00:21:03,560 --> 00:21:06,800
リリースみたいなのもあると思 うんですけどCAMだと他にもコンテンツ

283
00:21:06,800 --> 00:21:11,320
のリリースみたいなのがあって コードは変わんないんですけど

284
00:21:11,320 --> 00:21:15,480
編集者というか運用者がコンテンツ を投稿してそれがサイトに反映

285
00:21:15,480 --> 00:21:18,980
されるみたいなリリースも結構 CAMでは多いんですけどそういった

286
00:21:18,980 --> 00:21:23,360
ところにも結構CAMは力入れてまして 今CAMってアーティストファンサイト

287
00:21:23,360 --> 00:21:27,800
とかあとは占いサイトとかも運用 してるんですけどそういうのって

288
00:21:27,800 --> 00:21:33,200
結構サイトの見た目は変わんない けど新しい記事を投稿するとか

289
00:21:33,200 --> 00:21:37,120
新しいリリース情報のニュース をリリースするとかそういうの

290
00:21:37,120 --> 00:21:40,520
は結構多いんですけどそういった ところでそういうアーティスト

291
00:21:40,520 --> 00:21:44,320
ファンサイトのアーティストの ほうのパートナー企業さんと連携

292
00:21:44,320 --> 00:21:50,920
したりとかして公開情報とか例えば リリース情報だったりとかそう

293
00:21:50,920 --> 00:21:55,600
いったところもちゃんとパートナー 企業と協力してメディア連携で

294
00:21:55,600 --> 00:21:59,920
公開情報の日時とかちゃんとずれない ようにコンテンツが投稿できる

295
00:21:59,920 --> 00:22:04,680
みたいなところをちゃんと担保 したりとかそういったところの

296
00:22:04,680 --> 00:22:10,520
ビジネスサイトとの運用者の信頼 できるようなシステムを今作って

297
00:22:10,520 --> 00:22:15,200
いてコンテンツのリリースも安心 して運用者ができるっていうもの

298
00:22:15,200 --> 00:22:20,080
を開発したりとかはしてますね 予約投稿だったりとか時間にセンシティブ

299
00:22:20,080 --> 00:22:23,560
なんで予約投稿とかできるように したりとかそういうのをやって

300
00:22:23,560 --> 00:22:28,240
ますね そういうところって予約 投稿とかお客様のロイヤリティ

301
00:22:28,240 --> 00:22:31,680
に関わってくるようなところって やっぱり技術力が高くあるべき

302
00:22:31,680 --> 00:22:36,120
であってなかなか難しいところ かと思うんですけど

303
00:22:36,120 --> 00:22:40,480
そこの難しさっていうところに 注力してるっていうのがCAMの特徴

304
00:22:40,480 --> 00:22:44,400
では一つあるかなっていうふう に思ってますね

305
00:22:44,400 --> 00:22:48,080
CAMのレベルがあるからこそできる ようなものですね

306
00:22:48,080 --> 00:22:54,160
そうですね 運用者が触るって ことで管理画面とかも大体作る

307
00:22:54,160 --> 00:22:59,120
と思うんですけど CAMで今OSSで出 してるバイロンっていうツール

308
00:22:59,120 --> 00:23:03,960
があるんですけど それってフロントエンド ほとんどローコードで管理画面

309
00:23:03,960 --> 00:23:07,560
が簡単に作れるみたいなのを売り にしているOSSでもしよかったら

310
00:23:07,560 --> 00:23:11,200
検索してみてほしいんですけど それ結構どのサービスでも使って

311
00:23:11,200 --> 00:23:15,720
て運用者がそのバイロンで作った 管理画面を使っていろいろコンテンツ

312
00:23:15,720 --> 00:23:19,600
を導入したりとか投稿したり とかもできるっていう形になって

313
00:23:19,600 --> 00:23:20,600
ます

314
00:23:20,600 --> 00:23:23,120
なるほど 今度検索してみてください

315
00:23:23,120 --> 00:23:24,120
バイロン

316
00:23:24,120 --> 00:23:28,520
そうです AIのほうでもバイロン 調べさせていただいたんですけど

317
00:23:28,520 --> 00:23:33,840
非常に完成度が高いですよね 横展開で導入してみようかなっていう

318
00:23:33,840 --> 00:23:37,000
話がちょっと出てるぐらい非常 に素晴らしいツールでした

319
00:23:37,000 --> 00:23:38,000
そんなに

320
00:23:38,000 --> 00:23:43,000
もう帰ったら早速検索してみます 次お願いします

321
00:23:43,000 --> 00:23:44,000
なるほど

322
00:23:44,000 --> 00:23:57,920
リリースとかいろいろある中で 結構リリース特にお客様に対して

323
00:23:57,920 --> 00:24:03,880
出してるものとかって品質担保 って大切かなと思っててそれを

324
00:24:03,880 --> 00:24:07,880
担保するために要は間違ったもの を出してしまうとインシデント

325
00:24:07,880 --> 00:24:12,960
になってしまうじゃないですか それを未然に防ぐためにちょっと

326
00:24:12,960 --> 00:24:15,840
注力してる仕組みとかってあります か

327
00:24:15,840 --> 00:24:22,880
そうですね そもそも事故とかって あんま起こしちゃいけないこと

328
00:24:22,880 --> 00:24:26,720
なんでまずそれを起こさないように するっていうのも一つでそれために

329
00:24:26,720 --> 00:24:31,040
もちろんCIとかCDとかでちゃんと リリースをやっているっていう

330
00:24:31,040 --> 00:24:36,000
ところは一つちゃんとあります 例えば気づかずにそういうことが

331
00:24:36,000 --> 00:24:39,520
起こってしまった時に大きな事故 にならないように未然に防ぐっていう

332
00:24:39,520 --> 00:24:44,360
方法としては検知に力を入れてる っていうところでステータス

333
00:24:44,360 --> 00:24:47,800
ケークとかでサイトが落ちてない かとか確認したりとかデータドック

334
00:24:47,800 --> 00:24:52,280
とかで監視してリソースとかも 監視して通信とかも監視して異常

335
00:24:52,280 --> 00:24:55,800
がないかっていうのは常に見ている って感じで何か異常があったら

336
00:24:55,800 --> 00:24:58,920
スラッグが飛んできたりとか関係者 に連絡が行ったりとかっていう

337
00:24:58,920 --> 00:25:03,400
のもやってますね フロントエンド の話でいうとTypeScriptとか使って

338
00:25:03,400 --> 00:25:07,920
てもJSに置き換えたときに気づかない ようなバグみたいなのはバグスナック

339
00:25:07,920 --> 00:25:12,640
とか入れて事前にデブ環境やステージ の環境で気づけるようにとかそう

340
00:25:12,640 --> 00:25:17,320
いったところツールもうまく使って 未然に防ぐっていうのは取り組んでいる

341
00:25:17,320 --> 00:25:20,800
ことではありますね 結構ツールとか入れて未然に

342
00:25:20,800 --> 00:25:25,800
防ぐようなことを力入れてる感じ なんですね AI事業本部ではどの

343
00:25:25,800 --> 00:25:31,640
ようなことをやってることありますか AI事業本部のほうでもデータドック

344
00:25:31,640 --> 00:25:36,040
によるログの監視っていうのは 常々行っていてそれこそエンドユーザー

345
00:25:36,040 --> 00:25:41,400
のほうにリリースしているシステム が落ちてしまうっていうのは本当に

346
00:25:41,400 --> 00:25:45,080
インシデントになってしまうので そこの敷地をかなり高くしている

347
00:25:45,080 --> 00:25:49,760
というかリソースに関しても50% 以上使ってるようだったらすぐ

348
00:25:49,760 --> 00:25:54,280
にアラートを飛ばすようにする とかそういった厳重な体制で監視

349
00:25:54,280 --> 00:25:58,280
をしているようにはしているっていう のとあとは一番やっちゃいけない

350
00:25:58,280 --> 00:26:01,400
のがエンドユーザー側にご迷惑 をおかけすることだと思っている

351
00:26:01,400 --> 00:26:05,000
のでメンテナンスモードとかそう いったところにすぐ切り替えられる

352
00:26:05,000 --> 00:26:09,200
ような設計にしている例えばフラグ を一つ切り替えたらすぐにメンテナンス

353
00:26:09,200 --> 00:26:13,360
モードになるようなデプロイを しなくてもメンテナンスモード

354
00:26:13,360 --> 00:26:16,440
をすぐにフラグを切り替えれば すぐに切り替えられるような状態

355
00:26:16,440 --> 00:26:21,200
にしてあったりとかあとはそれでも どうしても万が一っていうこと

356
00:26:21,200 --> 00:26:25,000
はあるかもしれないんですけども そういったときのためにちゃんと

357
00:26:25,000 --> 00:26:28,760
体制を敷くようにはしていてそこ にもツールを導入しています今

358
00:26:28,760 --> 00:26:34,000
導入したいのがGraphana On Callっていう ものを導入していてもし万が一

359
00:26:34,000 --> 00:26:37,440
何か起きた際はすぐにチーム メンバーに連打が来るような厳重

360
00:26:37,440 --> 00:26:42,200
な監視体制を敷いているという 形で2030にしっかり対策を取って

361
00:26:42,200 --> 00:26:46,480
いるという感じです なるほど何か起きたときにでも

362
00:26:46,480 --> 00:26:51,240
すぐ反応してアクションを取って いけるような仕組みを取っている

363
00:26:51,240 --> 00:26:53,920
感じなんですね もちろんまず大前提として起こ

364
00:26:53,920 --> 00:26:59,160
さないことっていうのを意識を していてそれでも世の中に100%

365
00:26:59,160 --> 00:27:02,720
っていうのはないので万が一起き てしまったときっていうのを対策

366
00:27:02,720 --> 00:27:06,840
するのがエンジニアの仕事だと思 っているのでそこに対してもしっかり

367
00:27:06,840 --> 00:27:11,640
対策を入れているという感じです 確かに起きないことが一番です

368
00:27:11,640 --> 00:27:12,640
面白いです

369
00:27:22,640 --> 00:27:29,400
今日いろいろリリースについて お話聞いて本当にいろんなリリース

370
00:27:29,400 --> 00:27:34,320
までにステップ踏んでツールとか で改善したりとか品質を担保する

371
00:27:34,320 --> 00:27:38,920
とかそういうようなステップを 踏んでようやくプロダクトが世の中

372
00:27:38,920 --> 00:27:42,680
にリリースされているしかもその ステップによってクオリティも

373
00:27:42,680 --> 00:27:48,280
ちゃんと担保されているっていう なかなか深い泥臭い話が聞いたん

374
00:27:48,280 --> 00:27:52,160
じゃないかなと思っていて本当に 僕自身も楽しかったですね

375
00:27:52,160 --> 00:27:55,800
お二人もちょっと感想を聞きたい なと思うんですけども今日本日

376
00:27:55,800 --> 00:27:59,920
改めて自分の事業部をやっている ことを話してみてどういう感想

377
00:27:59,920 --> 00:28:03,200
をお持ちになったりとかします か

378
00:28:03,200 --> 00:28:08,480
エア事業本部はCAMと近い感じかな とは思っていて大きなサービス

379
00:28:08,480 --> 00:28:12,120
を一つ運用しているというのではなく いろんなサービスがあってそれを

380
00:28:12,120 --> 00:28:15,560
作ったりとかシリーズを作ったり とかしていると思うので結構共有

381
00:28:15,560 --> 00:28:20,200
としては似ているなというところ があってそういったところで今後

382
00:28:20,200 --> 00:28:25,080
しっかり共有とかもできてきたら いいなとか思ったりとかツール

383
00:28:25,080 --> 00:28:28,040
の話とかも結構出てきたんですけど 僕もまだまだ知らないのが結構

384
00:28:28,040 --> 00:28:33,520
あったんでそういったのをキャッチ アップしてみて実際に導入して

385
00:28:33,520 --> 00:28:36,640
みたりとかそういったのもやって いきたいなと思ったのですごい

386
00:28:36,640 --> 00:28:43,680
参考になったなというのが一つ 感想としてはありましたね

387
00:28:43,680 --> 00:28:49,280
僕もCAMのほうでやっている技術 のフローだったりとか特にコンテンツ

388
00:28:49,280 --> 00:28:53,600
の技術についての力の入れ具合 とかっていうのがあっていろんな

389
00:28:53,600 --> 00:28:57,320
事業部でいろんな考え方があるん だなっていうのがまず一つ知れた

390
00:28:57,320 --> 00:29:00,440
のがすごいよかったなっていう のとやっぱり先ほどお申し上げ

391
00:29:00,440 --> 00:29:04,040
られてましたけどいろんなサービス をリリースしているからこその

392
00:29:04,040 --> 00:29:09,160
気をつけ方みたいなのがそこの 共通認識があってやっぱりみんな

393
00:29:09,160 --> 00:29:13,600
同じくらいしっかり気をつけて るんだなっていうのがあってそこ

394
00:29:13,600 --> 00:29:17,480
はチームサイバーエージェント というかしっかり品質に対して

395
00:29:17,480 --> 00:29:21,120
の考え方っていうのはどこもサイバー エージェントの一律で変わってない

396
00:29:21,120 --> 00:29:25,320
んだなっていうのがすごい安心 感がありましたこれからもスピード

397
00:29:25,320 --> 00:29:28,960
感を持った開発っていうのは当然 続けていくんですけど同時に同じ

398
00:29:28,960 --> 00:29:32,320
くらい品質っていうのも大事に しながら開発を続けていこうかな

399
00:29:32,320 --> 00:29:35,800
と思いました 確かに確かにサイバーエージェント

400
00:29:35,800 --> 00:29:39,000
のエンジニアとして品質スピード すべてを担保しながら

401
00:29:39,000 --> 00:29:41,080
そうですね 今回の話もいろんなツールの

402
00:29:41,080 --> 00:29:44,920
名前とか出てきたと思うんですけど 僕も知らないのいっぱいありました

403
00:29:44,920 --> 00:29:49,000
し自分のところでもどんどん入れ ていきたいなと思いますね

404
00:29:49,000 --> 00:29:52,760
はいでは本日いろんな話できて 本当に楽しかったですなので今日は

405
00:29:52,760 --> 00:29:57,720
これで終わりにしたいと思います 本日はお越しいただいてありがとうございました

406
00:29:57,720 --> 00:30:02,360
聞いている皆さんもまた次回よろしくお願いします それではバイバイ

407
00:30:02,360 --> 00:30:04,360
バイバイ


WEBVTT

00:00.000 --> 00:11.000
マディウェブポッドキャストは、マディの意味が泥であるように ウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、

00:11.000 --> 00:25.000
実際に明日から使えるかもしれないウェブフロントエンド知識や技術を 参加者の皆様と共有し合うことを通して、フロントエンド界隈の役に立てるように思いを込めて発信しています。

00:25.000 --> 00:29.000
はい、それではマディウェブポッドキャストを始めていきましょう。

00:29.000 --> 00:42.000
本日のテーマは、プロダクトのリリースについて第2弾ということで、 第1弾が1話目で話したんですけども、それの第2弾ということで違う授業所から話していきたいと思います。

00:42.000 --> 00:47.000
ファシリティータは私、株式会社シロックより石井ゆきがお送りいたします。

00:47.000 --> 00:51.000
本日ゲストでお越しいただいてます2名の方がいらっしゃるんですけども、

00:51.000 --> 00:57.000
CAMより石井ゆきさんとAI事業本部より森田正敏さんがお越しいただいております。

00:57.000 --> 01:01.000
最初軽く自己紹介の方をしていただきたいんですけども、 石井さんからお願いしていいですか?

01:01.000 --> 01:03.000
はい、わかりました。

01:03.000 --> 01:07.000
サイバーエージェントのグループ会社、株式会社CAMでフロントエンドエンジニアをやっています。

01:07.000 --> 01:09.000
石井と申します。

01:09.000 --> 01:15.000
入社しても5年目で、今はCAM内のフロントエンドで新規開発の方を今やっています。

01:15.000 --> 01:17.000
本日はよろしくお願いします。

01:17.000 --> 01:19.000
よろしくお願いします。

01:19.000 --> 01:21.000
次、森田さんお願いします。

01:21.000 --> 01:25.000
サイバーエージェントのAI事業本部アプリエンスセンターで

01:25.000 --> 01:28.000
ウェブフロントエンドエンジニアを担当しております。森田と申します。

01:28.000 --> 01:33.000
AI事業本部はサイバーエージェントの中でインターネット広告事業をやっている部署で、

01:33.000 --> 01:38.000
その中でAI事業で展開している、そのAIを活用したDXを使って、

01:38.000 --> 01:43.000
主に小売企業に提携していろんなものを作っているような部署でございまして、

01:43.000 --> 01:48.000
そこのウェブサービスとかアプリとかをいろいろ作らせていただいているという感じです。

01:48.000 --> 01:50.000
よろしくお願いします。

01:50.000 --> 01:52.000
本日はよろしくお願いします。

01:52.000 --> 01:54.000
よろしくお願いします。

01:54.000 --> 02:01.000
テーマ通りなんですけども、実はこれ裏話で収録2回目で撮り直してるんですけども、

02:01.000 --> 02:06.000
ちょっと盛り上がりすぎて行き過ぎてしまったかなっていうところがあるんですけども、

02:06.000 --> 02:11.000
それと同じようにリリースについて、皆さんどういうふうにリリースしているかというのは

02:11.000 --> 02:15.000
ちょっと深く聞いていきたいなと思っているんですけども、

02:15.000 --> 02:21.000
最初リリースって多分いろんな事業所によって違うやり方をしていると思うんですけども、

02:21.000 --> 02:26.000
そのプロダクトのリリースまでフローとして軽く聞いてみてもいいですかね。

02:26.000 --> 02:29.000
CAMではどうやってますか?

02:29.000 --> 02:33.000
そうですね、基本的にはソースコードのリリースだと、

02:33.000 --> 02:38.000
ソースコードをマークするときにメインブランチのGitHub上でマージして、

02:38.000 --> 02:45.000
CICDでデプロイをして反映されるっていうのが基本的なリリースになりますね。

02:45.000 --> 02:50.000
基本そんな感じなんですけど、AIの方はどんな感じなんですか?

02:50.000 --> 02:57.000
概ねAIの方もソースコードの方をビルドされたものをプロダクションの方にビルドするというのは変わらないんですけども、

02:57.000 --> 03:04.000
こちらもCICDを含んでリリースのフローを整備してリリースするようにしています。

03:04.000 --> 03:08.000
一部特徴的なところとしては、

03:08.000 --> 03:14.000
CDを使っているシステムとして、サイバーアイテムとか開発しているタイプCDというCDを使って、

03:14.000 --> 03:21.000
バックエンドとかフロントエンドも含めて一元で管理できるように動いているというところが一つ特徴的なのかなというところと、

03:21.000 --> 03:28.000
あとは、デブ環境、ステージング環境、プロダクション環境というふうに環境を分けて管理をしているんですけども、

03:28.000 --> 03:32.000
環境に応じてリリースのフローを変えているというのが一つ特徴かなと思っていて、

03:32.000 --> 03:38.000
デブ環境の方にデプロイする際はプロデュクエストがマージされたタイミングで、

03:38.000 --> 03:41.000
タグを切らなくても自動的にタグにハッシュがついて、

03:41.000 --> 03:45.000
それで自動的にデプロイされるような仕組みを作っていたりとかというところで、

03:45.000 --> 03:51.000
開発の効率化というところを図るようなところが特徴的かなと思います。

03:51.000 --> 04:00.000
CIとか結構しっかり固めて環境を分けてやっていく中で、デブの環境を用意しているということらしいんですけども、

04:00.000 --> 04:08.000
デブの環境を使うとリリース前にいろんなバグの発見だとかあると思うんですけど、

04:08.000 --> 04:11.000
結構やってみていいですかね。

04:12.000 --> 04:16.000
デブの環境まで自動にデプロイされるようにすることによって、

04:16.000 --> 04:23.000
フロントエンドだとローカルで開発をして開発の機能をどんどん進めていくということがあると思うんですけども、

04:23.000 --> 04:30.000
一部サーバー上に置いて実際に動作確認をしたいというニーズがある程度あると思っていて、

04:30.000 --> 04:35.000
そういうときにやっぱり気軽にデプロイできる環境を用意できているというのは、

04:35.000 --> 04:38.000
開発の効率化に大きくつながっているなと思っています。

04:38.000 --> 04:42.000
だからといって何でもかんでも試してみればいいというわけではないんですけども、

04:42.000 --> 04:51.000
ある程度デブ環境に関してはそういった開発する上でちょっとチャレンジングなこととかも試せるような環境を整備して、

04:51.000 --> 04:56.000
エンジニアとしてのモチベーションみたいなところも保ちながら開発ができているかなと思っています。

04:56.000 --> 05:03.000
確かに、実際リリースというか本番の携帯とか特にフロントなんかそうなんですけど、

05:03.000 --> 05:08.000
モバイルとか実機で見ると意外と開発ってブラウザー上が多いかなと思っているんですけど、

05:08.000 --> 05:12.000
実機で見ると意外と動作が違う風に動いたりとかすることがありますもんね。

05:12.000 --> 05:16.000
そうしたときにやっぱりデブ環境ってすごく便利だなと思ったりしますね。

05:16.000 --> 05:23.000
そうですね。むしろデブ環境がないっていうのはもはやあんまり聞かないというか、

05:23.000 --> 05:31.000
そんないきなり本番に出すみたいなことはやらない世界線になっているのかなっていうのはあったりとかしますけど、

05:31.000 --> 05:38.000
ちょっとAIとCAMは違って環境は分かれてるんですけど、開発ブランチも分かれてるんで、

05:38.000 --> 05:43.000
デブブランチがあってステージングブランチがあって本番用のメインブランチがあるみたいな感じなので、

05:43.000 --> 05:46.000
ちょっとデプロイの仕方はやっぱ違うんですけど、

05:46.000 --> 05:53.000
CAMは普通にデブにマージしたらデブ用の環境のデプロイが走るみたいな形になっているので、

05:53.000 --> 06:00.000
CICDはそんなにフロントエンドの開発者が意識せずに普通にマージしたらデプロイされるみたいなのを採用しています。

06:00.000 --> 06:06.000
もちろんリーダー陣とかはデプロイのCICDを組んだりとかはもちろんしているので、

06:06.000 --> 06:08.000
作業者はあんまり気にする必要はないという。

06:08.000 --> 06:14.000
これはこのブランチにマージするだけでデプロイされるというのが結構利点かなというふうに思っていますね。

06:14.000 --> 06:15.000
なるほど。

06:15.000 --> 06:24.000
じゃあそのブランチでマージして、本当に開発者が意識しなくても確認できるようなリリースフローが整っているんですね。

06:24.000 --> 06:27.000
そうですね。整っているという感じですね。

06:27.000 --> 06:28.000
なるほど。

06:31.000 --> 06:37.000
リリースのCIの中でいろんなステップがあると思うんですけれども、

06:37.000 --> 06:41.000
自動テストとかってこの中でもやっぱり入れてますか?

06:41.000 --> 06:43.000
CIのその…

06:43.000 --> 06:44.000
E2Eテストみたいな。

06:44.000 --> 06:46.000
E2Eテストとかもそうですよね。

06:46.000 --> 06:49.000
ユニットテストとかも結構入れているところも多いのかなと思っていて。

06:49.000 --> 06:52.000
そういったところをやっぱりツールとか使ってやっている感じですかね?

06:52.000 --> 06:54.000
そうですね。

06:54.000 --> 07:00.000
まずAI事業本部のほうではユニットテストのほうは基本的には書くようにはしているので、

07:00.000 --> 07:03.000
そこのテストっていうのはCIで回すようにはしています。

07:03.000 --> 07:07.000
実際にそのいわゆる結合テストであったりとか動作確認みたいなところ。

07:07.000 --> 07:11.000
そこに関してはちょっとE2Eテストも導入予定ではあるんですけれども、

07:11.000 --> 07:15.000
ちょっとなかなか動けていないというところがちょっと現状ではございまして、

07:15.000 --> 07:17.000
その代わりといってはなんですけど、

07:17.000 --> 07:20.000
テスト広告書みたいなものがあるんですけれども、

07:20.000 --> 07:24.000
例えばエンジニアじゃなくても動作確認とかって結構できるので、

07:24.000 --> 07:27.000
例えばチームの中でデザイナーであったりとか、

07:27.000 --> 07:31.000
他の例えばセールスチームだったりとかプロジェクトマネージャーだったりとかっていうところに

07:31.000 --> 07:33.000
動作確認をいろいろしてもらって、

07:33.000 --> 07:38.000
ある意味で言うと壊す前提でちょっと動いてもらうみたいな形でいろいろテストをしてもらって、

07:38.000 --> 07:41.000
そこでエンジニアのほうで実は気づけなかったバグとか、

07:41.000 --> 07:45.000
そういうところとかも出してもらえるような形で動いていたり。

07:45.000 --> 07:49.000
結構テストとかでもやっぱり触ってみるといいですね。

07:49.000 --> 07:54.000
いろんな項目が用意されていて、これで実際動かしてみる。

07:54.000 --> 08:04.000
何かの本でエンジニアがテストするときとテスターがテストするときのテスト項目の書き方がすごい違うっていう記事をこの前見て、

08:04.000 --> 08:06.000
すごい面白いなと思ったんですけど、

08:06.000 --> 08:10.000
内容を忘れちゃったんですけども、何かそんな話を思い出して。

08:10.000 --> 08:16.000
CAMのほうでは結構静的コードの解析とかも入れたりとかします?

08:16.000 --> 08:22.000
いわゆるテストコードを書いてCICDで回してみたいなところはちょっと出遅れているところがあって、

08:22.000 --> 08:24.000
あまり整備しきれてないんですけど、

08:24.000 --> 08:27.000
もちろん取り入れができるようなところはありますけど、

08:27.000 --> 08:39.000
アーキテクチャーとかを取り入れてコード分離したりとかして、将来的にテストが書きやすいような構成に新規ではしていたりとか。

08:39.000 --> 08:42.000
そういったものを取り入れていこうという風に考えていて、

08:42.000 --> 08:45.000
今のところはテストコードを書いて、

08:45.000 --> 08:48.400
そうですね テストコードまでは まだあんまり書けてないですけど

08:48.400 --> 08:51.680
アーキテクチャーとかを取り入れて もうコード分離したりとかして

08:51.680 --> 08:57.640
将来的にテストが書きやすいような 構成に新規ではしていたりとか

08:57.640 --> 09:01.520
もちろんHypeScriptとか静的解析系 とかカタチェックとかはもちろん

09:01.520 --> 09:06.920
やっていて 外部の通常でSonaCloud とか使って 人間が気づきにくい

09:06.920 --> 09:10.640
なんか使ってない変数ですよみたいな そういう静的解析ももちろん始まって

09:10.640 --> 09:15.080
感じですね さっきの結合テストみたいな話

09:15.080 --> 09:18.560
やったと思うんですけど CAMでも社内でそういうのはもちろん

09:18.560 --> 09:22.480
やっていて プロデューサーだったりとか エンジニアでテスト項目考えて

09:22.480 --> 09:27.080
作って デバッグ期間みたいなのも受けて もちろんチーム内で動かしたり

09:27.080 --> 09:32.080
とか あと社内で結構新規サービス 作ってるんで 新規サービスを盛り上げて

09:32.080 --> 09:37.080
こうっていう文脈で リリース前に 社内おさわり会みたいな感じで

09:37.120 --> 09:41.920
デブとか解放して 社内の人が不特定 多数で触ってもらって いろいろ

09:41.920 --> 09:45.280
書いてもらったりとか意見言って もらったりとかして 実際に反映

09:45.280 --> 09:49.360
したりとか直したりとかっていう のはやっていたりとかしますね

09:49.360 --> 09:54.240
結構新規作るにあたって特殊な テストみたいな感じかもしれない

09:54.240 --> 09:57.080
けど そういうのがありますね

09:57.080 --> 10:02.760
面白いですね 実際にいろんな関わ ってる人関わってない人に実機

10:02.760 --> 10:05.960
を触っていただいてレビューを もらってそれを改善していくって

10:05.960 --> 10:06.960
形なんですか

10:06.960 --> 10:10.560
はい 毎回新規前はやってますね

10:10.560 --> 10:14.040
結構アジャイル的な感じの動き なんですかね

10:14.040 --> 10:17.440
そうですね 確かに言われてみれば そういう感じはしますね

10:17.440 --> 10:22.840
面白いですね 話の中でソナークラウド とかツールを使うような話ありました

10:22.840 --> 10:28.680
けど やっぱり最近ってCIにどんどん ツールを導入する流れが多いん

10:28.680 --> 10:29.680
ですかね

10:29.680 --> 10:34.920
そうですね いっぱいあるので必要 に応じてみたいな ちゃんと趣旨

10:34.920 --> 10:39.240
が選択はもちろん必要だと思う ので 必要なものだと思ったら

10:39.240 --> 10:42.760
入れるっていうのもありますし あと導入コストはあんまりない

10:42.760 --> 10:47.400
ので 入れてみて合わなかったら やめるとかは全然ありますね

10:47.400 --> 10:52.200
そうですね AIでも割と試行錯誤 して ギターワークションズだと

10:52.200 --> 10:56.720
本当にいろんなものが結構入れられる ので それこそ入れすぎちゃうと

10:56.720 --> 11:00.240
あとでギターワークションズが 開いたしすぎて誰も触れないみたいな

11:00.240 --> 11:03.960
ちょっと困惑点とかなので そこは 入れるものっていうのはプロジェクト

11:03.960 --> 11:09.680
に合わせてニーズを絞って入れる ようにはしています 開発の初期

11:09.680 --> 11:14.560
段階とかだと本当にそれこそ例えば レビュードックとかあとデベンダ

11:14.560 --> 11:19.360
ポップとかそういったものくらい を初回は入れて あとはリリース

11:19.360 --> 11:24.280
のニーズに合わせてスクリプト 経費 例えばリリースノートを自動

11:24.280 --> 11:28.320
生成するツールだったりとか そうい ったものを必要に応じて入れて

11:28.320 --> 11:36.120
いくという感じです 結構事業のレベル 成長に合わせて変えていくみたいな

11:36.120 --> 11:40.680
感じなんですね そうですね まずリリースまでのフロー

11:40.680 --> 11:44.520
っていうのは先に作るようには してるんですけど そこの環境の

11:44.520 --> 11:48.640
整備というか その後プロダクション としてリリースできるようなプロダクト

11:48.640 --> 11:53.000
としての品質の向上っていうところ は開発をしながら徐々に品質を

11:53.000 --> 12:04.400
向上させていくという形で進めて います

12:04.400 --> 12:07.800
実際にいろんなツール触ってき てると思うんですけど入れてみて

12:07.800 --> 12:10.760
これよかったなみたいなツール ってありますか おすすめしたい

12:10.760 --> 12:15.600
ツール賛成みたいな感じで なんすかね

12:15.600 --> 12:20.920
さっき話してたソナークラウド とかって実際使ってみて結構改善

12:20.920 --> 12:27.480
されましたか そうですね 結構改善されてますね

12:27.480 --> 12:31.980
指名的なものっていうよりかは どちらかというとちょっと抜け

12:31.980 --> 12:35.800
ちゃったよねみたいなとか気づ けながらちょっとした変数使って

12:35.800 --> 12:39.960
ないよねとかこういう書き方危ない よねとかこういう書き方意味なく

12:39.960 --> 12:47.320
ないみたいなのを技術者という か技術者の知識に関係なく指摘

12:47.320 --> 12:50.840
してくるのでいろんな書き方を 指摘してくると思うんですけど

12:50.840 --> 12:54.360
この書き方は良くないよねみたいな こういう理由だからみたいな感じ

12:54.360 --> 13:00.680
で指摘してくれるので結構チーム の書き方の統制というのは結構

13:00.680 --> 13:03.480
生きてるのかなっていう感じが しますね

13:03.480 --> 13:08.240
ソナクラウドってスタイルガイド みたいなに反するところに似た

13:08.240 --> 13:13.000
みたいな感じですよね 結構あれってカスタマイズとか

13:13.000 --> 13:15.760
できるんですか できますねできます

13:15.760 --> 13:19.840
結構やっぱりチームでいろんな 最近思ってるんですけどいろんな

13:19.840 --> 13:25.160
人が入ってくるといろんな書き方 があるなって思って確かにプロジェクト

13:25.160 --> 13:29.480
がだんだん長くなってくると過去 の履歴とかを見ているとその辺

13:29.480 --> 13:34.240
が整ってないともう書き方めちゃ くちゃな話とかも結構あるかな

13:34.240 --> 13:41.320
と思ってていったところだとやっぱり 一貫性を保つにはそういうスタイル

13:41.320 --> 13:43.640
ガイドのリンターみたいなの入れる のってすごくいいですよね

13:43.640 --> 13:52.080
AIではCIツールとかで導入してみて よかったやつはありますか

13:52.080 --> 13:57.840
まず導入してよかったなと思った のはChromaticですねストーリーブック

13:57.840 --> 14:02.560
みたいな形でコンポーネントとか のリフをいわゆるVRTみたいな形

14:02.560 --> 14:06.600
で表示してくれるようなものなんです けど結構VRTって導入するの割と

14:06.600 --> 14:11.160
めんどくさかったと思うんですけど Chromaticは本当にChromaticのユーザー

14:11.160 --> 14:15.840
を追加してあとはCIでちょちょっと 書いてあげれば勝手に免許して

14:15.840 --> 14:21.440
くれるんでVRTっていう面ではスタイル の違いとか見た目の違いとかっていう

14:21.440 --> 14:25.720
のがすごくキャッチしやすくなった なっていうのが一つあるんでこれは

14:25.720 --> 14:29.240
今後も導入していきたいなとは 思ってます

14:29.240 --> 14:33.520
ちょっとまだ導入できてないんですけど 1個気になっているものがあって

14:33.680 --> 14:39.120
What the diffって言われるやつで AIでプルリクエストのサマリとか

14:39.120 --> 14:43.560
を出してくれるやつ例えばクリエイト リアクトアップとかでタイプスクリプト

14:43.560 --> 14:46.720
のプレートリアクトアップのテンプレート を入れてそれでプルリクエスト

14:46.720 --> 14:50.360
出すとそれをコードを勝手に読んで 推論してくれてプルリクエスト

14:50.360 --> 14:54.680
のサマリを作ってくれるんですよ ねこれはリアクトJSというJavaScript

14:54.680 --> 14:58.000
のフレームワークを使ってタイプ スクリプトで構成されたものです

14:58.000 --> 15:01.200
みたいなところとかパッケージ として何点何バージョンのもの

15:01.200 --> 15:04.640
入れてますみたいなこういうテンプレート を使ってますみたいなものをリスト

15:04.640 --> 15:08.280
でプルリクエストのサマリを勝手 に作ってくれてそれだけじゃなくて

15:08.280 --> 15:10.920
レビューもしてくれるんですよ レビューもしてくれる

15:10.920 --> 15:13.960
レビューをしてもらうには多少 細かい指摘がしてきている指定

15:13.960 --> 15:18.200
が必要なんですが例えばアローファンクション じゃないものを指摘してください

15:18.200 --> 15:22.680
とかこのリントの設定にのっと ったレビューをしてくださいみたいな

15:22.680 --> 15:26.720
形でちょっと原始的なところは あるんですけど結構AIが自動で

15:26.720 --> 15:30.400
レビューしてくれるので人間の レビューの精度がより上がるという

15:30.400 --> 15:33.720
かそういったところを見なくて すむのでこれはちょっと導入して

15:33.720 --> 15:39.680
みたいなと思っているのとあと ギッターブの公式のほうでもAI

15:39.680 --> 15:42.520
を使ったプルリクエストの生成 みたいなところを今ギッターブ

15:42.520 --> 15:46.560
のリストで考えているみたいで それは非常に期待しているという

15:46.560 --> 15:50.640
感じです もうAIがレビューも考えてしまう

15:50.640 --> 15:53.800
時代になってきましたね そうですね AI事業本部なんでそれ

15:53.800 --> 15:59.760
を活用していきたいところではあります 確かにPRのレビューとかってすごい

15:59.760 --> 16:04.920
なんだかんだ構成がかかるんですよ ねといったところでおそらく最終

16:04.920 --> 16:10.000
的には人間の目でまだ見る段階 なのかなと思うんですけどその

16:10.000 --> 16:14.840
ここまでの先ほど話したみたいな リンターに違反しているような

16:14.840 --> 16:18.640
とかそういったところの機械が やってくれると本当にすごく開発

16:18.640 --> 16:22.640
スピードとかも高まっていいかな ってすごく期待大ですね

16:23.520 --> 16:25.520
そうです確かに

16:25.520 --> 16:35.520
CIの中でさっき話出ていたChromatic あれって確かPRもステイトで見て

16:35.520 --> 16:39.920
てPRでアプローブされないとリリース できませんみたいなことも確か

16:39.920 --> 16:41.800
にできましてね そういったことも可能なのでより

16:41.800 --> 16:47.600
厳密な形で踏み込むことも可能 ですね今の段階では結構そこまでは

16:47.600 --> 16:50.480
厳密にはしていないんですけど しっかりその辺のルールを整備

16:50.480 --> 16:54.440
して例えばそこのレビューが通 らないとダメっていうふうにして

16:54.440 --> 16:57.200
かつそのレビューを例えばデザイナー にやってもらうとかっていうふう

16:57.200 --> 17:01.560
にするとデザイナーもコードレビュー じゃないですけどそのレビュー

17:01.560 --> 17:05.480
にしっかり参加できるみたいな それがしっかり可視化されるみたいな

17:05.480 --> 17:08.640
ところもフローとして確立できる ので非常に良いんじゃないかな

17:08.640 --> 17:11.160
とは思ってます

17:11.160 --> 17:14.520
デザイナーにレビューしてもらう っていうの新しいあれですよね

17:14.520 --> 17:18.920
しかもあれ僕も触ったことあるん ですけどディファレンスとの違い

17:18.920 --> 17:23.600
が緑色にハイライトされて結構 1ピクセル単位でも出てきます

17:23.600 --> 17:24.600
よね

17:24.600 --> 17:28.440
そうですねそこは結構VRTあるある ではあるんですけども例えば結構

17:28.440 --> 17:31.600
よくあるのがフォントをカスタム フォントレブフォントを入れている

17:31.600 --> 17:35.400
ときにフォントの読み込みが先に マウント前にスクリーンショット

17:35.400 --> 17:39.080
取られちゃってそこでディフ出る みたいなのが結構あったりもするん

17:39.080 --> 17:43.480
ですけどその辺りの細かい際とか はちょっとキャッチアップして

17:43.480 --> 17:46.160
あげる必要があるんですけど結構 グロマティックも細かく設定が

17:46.160 --> 17:51.320
できて例えばこの画面は対象外 にするとかこのファイルはイグノア

17:51.320 --> 17:55.720
するみたいな設定もできるんで その辺りは結構細かくカスタマイズ

17:55.720 --> 17:58.280
してプロジェクトに合わせてニーズ に合わせてやっていけばいいの

17:58.280 --> 18:02.640
かなっていうところとあと1ピクセル 単位でもズレが本当にズレてる

18:02.640 --> 18:06.880
のかスクリーンショットでも細かい 際レンダリングのタイミングとか

18:06.880 --> 18:11.840
の問題なのかっていうところは 結構難しくてその辺りは結構割

18:11.840 --> 18:15.440
とフロントエンドエンジニアの 知識の業務によるのかなという

18:15.440 --> 18:19.600
ところがあってレビューで指摘 されてもこれは実はレンダリング

18:19.600 --> 18:22.880
の問題でこういうことなので対応 しなくてもいいですっていうふう

18:22.880 --> 18:27.400
にするのかそれとも実際マジで ズレてるのかっていうのは結構

18:27.400 --> 18:31.360
レビュー受けた人のちゃんと技術 量によると思うんでそこはもう

18:31.360 --> 18:34.560
みんなでレベルを上げていくしかない なと思ってます

18:34.560 --> 18:38.560
そうなんですねでもなかなかまだ 便利だけども辛みがあるところ

18:39.120 --> 18:43.280
そこはそうですねガチっと例えば スクリーンショットを撮るタイミング

18:43.280 --> 18:48.160
とかがちゃんとディレイしてくれて ガチっとレンダリングしっかり

18:48.160 --> 18:52.320
行ったタイミングでスクリーンショット 撮ってくれるとかってなったら

18:52.320 --> 18:56.640
すごくいいんでしょうけど結構それも 難しいんだろうなと思います

18:56.640 --> 19:01.520
確かにスピレーとかだとレンダー の前とかの状態が変化する前の

19:01.520 --> 19:03.920
やつをスクリーンショット撮ったり とかする場所もね

19:03.920 --> 19:04.920
そうですそうです

19:04.920 --> 19:10.920
難しいところだCAMではこれから 導入したいツールみたいなのって

19:10.920 --> 19:12.200
あったりします

19:12.200 --> 19:19.240
そうですねVRTとかはあんまり話 とかは出ていかなくてそもそも

19:19.240 --> 19:24.840
API通信とかのほうのユニットテスト とかのほうを今注力してやってる

19:24.840 --> 19:27.640
ってところでさっきちょっと言 ったんですけどコード分割して

19:27.640 --> 19:32.040
アーキテクチャ取り入れてテスト しやすい感じにしていて今はちょ

19:32.040 --> 19:35.400
こちょこテストコードを書いて みてみんなでああだこうだ言ってる

19:35.400 --> 19:39.320
っていうこんな書き方でいいのか みたいな感じでいろいろ検証して

19:39.320 --> 19:42.960
いるという段階ではありますね なのでその辺のユニットテスト

19:42.960 --> 19:48.440
系の知見とかがけっこうCAMでは 欲してる感じではありますね

19:48.440 --> 19:53.960
ユニットテストで言うとフロント で有名なのはやっぱジェストとか

19:53.960 --> 19:59.240
そうですねジェストとかですね 結構やっぱりジェストが多いですよね

19:59.960 --> 20:04.280
あとは例えばリアクトを使ってるん だったらリアクトテスティング

20:04.280 --> 20:07.800
ライブラリーがありますねもう あれですかねもうエンザインとか

20:07.800 --> 20:09.800
シノンは使わないんですかね

20:09.800 --> 20:13.880
でもMacとかでシノンとかは使いますよ ね

20:13.880 --> 20:18.320
使ったりとかはしてますね特に API通信とかの系のテストとか書く

20:18.320 --> 20:19.800
ときは多分結構使ったりとかしてます ね

20:19.800 --> 20:24.680
いわゆるスパイツールみたいな ツールがありますね結構テスト

20:24.680 --> 20:28.680
のところのツールを今入れてる というか

20:28.680 --> 20:33.600
そうですね今取り組んでいるという 形ですね

20:33.600 --> 20:36.560
面白そうですねワクワクしそうな 話すごい

20:36.560 --> 20:49.120
そうですねツールとかいろいろ 入れてると思うんですけどそういう

20:49.120 --> 20:54.360
CIとか通ってやっとリリースされて いく感じですよね

20:54.360 --> 20:59.120
そうですねマップしてると思うん ですねあとCAMとかだとコード

20:59.120 --> 21:03.560
とか新機能とかリリースコード 上のGitHubでメインにマージして

21:03.560 --> 21:06.800
リリースみたいなのもあると思 うんですけどCAMだと他にもコンテンツ

21:06.800 --> 21:11.320
のリリースみたいなのがあって コードは変わんないんですけど

21:11.320 --> 21:15.480
編集者というか運用者がコンテンツ を投稿してそれがサイトに反映

21:15.480 --> 21:18.980
されるみたいなリリースも結構 CAMでは多いんですけどそういった

21:18.980 --> 21:23.360
ところにも結構CAMは力入れてまして 今CAMってアーティストファンサイト

21:23.360 --> 21:27.800
とかあとは占いサイトとかも運用 してるんですけどそういうのって

21:27.800 --> 21:33.200
結構サイトの見た目は変わんない けど新しい記事を投稿するとか

21:33.200 --> 21:37.120
新しいリリース情報のニュース をリリースするとかそういうの

21:37.120 --> 21:40.520
は結構多いんですけどそういった ところでそういうアーティスト

21:40.520 --> 21:44.320
ファンサイトのアーティストの ほうのパートナー企業さんと連携

21:44.320 --> 21:50.920
したりとかして公開情報とか例えば リリース情報だったりとかそう

21:50.920 --> 21:55.600
いったところもちゃんとパートナー 企業と協力してメディア連携で

21:55.600 --> 21:59.920
公開情報の日時とかちゃんとずれない ようにコンテンツが投稿できる

21:59.920 --> 22:04.680
みたいなところをちゃんと担保 したりとかそういったところの

22:04.680 --> 22:10.520
ビジネスサイトとの運用者の信頼 できるようなシステムを今作って

22:10.520 --> 22:15.200
いてコンテンツのリリースも安心 して運用者ができるっていうもの

22:15.200 --> 22:20.080
を開発したりとかはしてますね 予約投稿だったりとか時間にセンシティブ

22:20.080 --> 22:23.560
なんで予約投稿とかできるように したりとかそういうのをやって

22:23.560 --> 22:28.240
ますね そういうところって予約 投稿とかお客様のロイヤリティ

22:28.240 --> 22:31.680
に関わってくるようなところって やっぱり技術力が高くあるべき

22:31.680 --> 22:36.120
であってなかなか難しいところ かと思うんですけど

22:36.120 --> 22:40.480
そこの難しさっていうところに 注力してるっていうのがCAMの特徴

22:40.480 --> 22:44.400
では一つあるかなっていうふう に思ってますね

22:44.400 --> 22:48.080
CAMのレベルがあるからこそできる ようなものですね

22:48.080 --> 22:54.160
そうですね 運用者が触るって ことで管理画面とかも大体作る

22:54.160 --> 22:59.120
と思うんですけど CAMで今OSSで出 してるバイロンっていうツール

22:59.120 --> 23:03.960
があるんですけど それってフロントエンド ほとんどローコードで管理画面

23:03.960 --> 23:07.560
が簡単に作れるみたいなのを売り にしているOSSでもしよかったら

23:07.560 --> 23:11.200
検索してみてほしいんですけど それ結構どのサービスでも使って

23:11.200 --> 23:15.720
て運用者がそのバイロンで作った 管理画面を使っていろいろコンテンツ

23:15.720 --> 23:19.600
を導入したりとか投稿したり とかもできるっていう形になって

23:19.600 --> 23:20.600
ます

23:20.600 --> 23:23.120
なるほど 今度検索してみてください

23:23.120 --> 23:24.120
バイロン

23:24.120 --> 23:28.520
そうです AIのほうでもバイロン 調べさせていただいたんですけど

23:28.520 --> 23:33.840
非常に完成度が高いですよね 横展開で導入してみようかなっていう

23:33.840 --> 23:37.000
話がちょっと出てるぐらい非常 に素晴らしいツールでした

23:37.000 --> 23:38.000
そんなに

23:38.000 --> 23:43.000
もう帰ったら早速検索してみます 次お願いします

23:43.000 --> 23:44.000
なるほど

23:44.000 --> 23:57.920
リリースとかいろいろある中で 結構リリース特にお客様に対して

23:57.920 --> 24:03.880
出してるものとかって品質担保 って大切かなと思っててそれを

24:03.880 --> 24:07.880
担保するために要は間違ったもの を出してしまうとインシデント

24:07.880 --> 24:12.960
になってしまうじゃないですか それを未然に防ぐためにちょっと

24:12.960 --> 24:15.840
注力してる仕組みとかってあります か

24:15.840 --> 24:22.880
そうですね そもそも事故とかって あんま起こしちゃいけないこと

24:22.880 --> 24:26.720
なんでまずそれを起こさないように するっていうのも一つでそれために

24:26.720 --> 24:31.040
もちろんCIとかCDとかでちゃんと リリースをやっているっていう

24:31.040 --> 24:36.000
ところは一つちゃんとあります 例えば気づかずにそういうことが

24:36.000 --> 24:39.520
起こってしまった時に大きな事故 にならないように未然に防ぐっていう

24:39.520 --> 24:44.360
方法としては検知に力を入れてる っていうところでステータス

24:44.360 --> 24:47.800
ケークとかでサイトが落ちてない かとか確認したりとかデータドック

24:47.800 --> 24:52.280
とかで監視してリソースとかも 監視して通信とかも監視して異常

24:52.280 --> 24:55.800
がないかっていうのは常に見ている って感じで何か異常があったら

24:55.800 --> 24:58.920
スラッグが飛んできたりとか関係者 に連絡が行ったりとかっていう

24:58.920 --> 25:03.400
のもやってますね フロントエンド の話でいうとTypeScriptとか使って

25:03.400 --> 25:07.920
てもJSに置き換えたときに気づかない ようなバグみたいなのはバグスナック

25:07.920 --> 25:12.640
とか入れて事前にデブ環境やステージ の環境で気づけるようにとかそう

25:12.640 --> 25:17.320
いったところツールもうまく使って 未然に防ぐっていうのは取り組んでいる

25:17.320 --> 25:20.800
ことではありますね 結構ツールとか入れて未然に

25:20.800 --> 25:25.800
防ぐようなことを力入れてる感じ なんですね AI事業本部ではどの

25:25.800 --> 25:31.640
ようなことをやってることありますか AI事業本部のほうでもデータドック

25:31.640 --> 25:36.040
によるログの監視っていうのは 常々行っていてそれこそエンドユーザー

25:36.040 --> 25:41.400
のほうにリリースしているシステム が落ちてしまうっていうのは本当に

25:41.400 --> 25:45.080
インシデントになってしまうので そこの敷地をかなり高くしている

25:45.080 --> 25:49.760
というかリソースに関しても50% 以上使ってるようだったらすぐ

25:49.760 --> 25:54.280
にアラートを飛ばすようにする とかそういった厳重な体制で監視

25:54.280 --> 25:58.280
をしているようにはしているっていう のとあとは一番やっちゃいけない

25:58.280 --> 26:01.400
のがエンドユーザー側にご迷惑 をおかけすることだと思っている

26:01.400 --> 26:05.000
のでメンテナンスモードとかそう いったところにすぐ切り替えられる

26:05.000 --> 26:09.200
ような設計にしている例えばフラグ を一つ切り替えたらすぐにメンテナンス

26:09.200 --> 26:13.360
モードになるようなデプロイを しなくてもメンテナンスモード

26:13.360 --> 26:16.440
をすぐにフラグを切り替えれば すぐに切り替えられるような状態

26:16.440 --> 26:21.200
にしてあったりとかあとはそれでも どうしても万が一っていうこと

26:21.200 --> 26:25.000
はあるかもしれないんですけども そういったときのためにちゃんと

26:25.000 --> 26:28.760
体制を敷くようにはしていてそこ にもツールを導入しています今

26:28.760 --> 26:34.000
導入したいのがGraphana On Callっていう ものを導入していてもし万が一

26:34.000 --> 26:37.440
何か起きた際はすぐにチーム メンバーに連打が来るような厳重

26:37.440 --> 26:42.200
な監視体制を敷いているという 形で2030にしっかり対策を取って

26:42.200 --> 26:46.480
いるという感じです なるほど何か起きたときにでも

26:46.480 --> 26:51.240
すぐ反応してアクションを取って いけるような仕組みを取っている

26:51.240 --> 26:53.920
感じなんですね もちろんまず大前提として起こ

26:53.920 --> 26:59.160
さないことっていうのを意識を していてそれでも世の中に100%

26:59.160 --> 27:02.720
っていうのはないので万が一起き てしまったときっていうのを対策

27:02.720 --> 27:06.840
するのがエンジニアの仕事だと思 っているのでそこに対してもしっかり

27:06.840 --> 27:11.640
対策を入れているという感じです 確かに起きないことが一番です

27:11.640 --> 27:12.640
面白いです

27:22.640 --> 27:29.400
今日いろいろリリースについて お話聞いて本当にいろんなリリース

27:29.400 --> 27:34.320
までにステップ踏んでツールとか で改善したりとか品質を担保する

27:34.320 --> 27:38.920
とかそういうようなステップを 踏んでようやくプロダクトが世の中

27:38.920 --> 27:42.680
にリリースされているしかもその ステップによってクオリティも

27:42.680 --> 27:48.280
ちゃんと担保されているっていう なかなか深い泥臭い話が聞いたん

27:48.280 --> 27:52.160
じゃないかなと思っていて本当に 僕自身も楽しかったですね

27:52.160 --> 27:55.800
お二人もちょっと感想を聞きたい なと思うんですけども今日本日

27:55.800 --> 27:59.920
改めて自分の事業部をやっている ことを話してみてどういう感想

27:59.920 --> 28:03.200
をお持ちになったりとかします か

28:03.200 --> 28:08.480
エア事業本部はCAMと近い感じかな とは思っていて大きなサービス

28:08.480 --> 28:12.120
を一つ運用しているというのではなく いろんなサービスがあってそれを

28:12.120 --> 28:15.560
作ったりとかシリーズを作ったり とかしていると思うので結構共有

28:15.560 --> 28:20.200
としては似ているなというところ があってそういったところで今後

28:20.200 --> 28:25.080
しっかり共有とかもできてきたら いいなとか思ったりとかツール

28:25.080 --> 28:28.040
の話とかも結構出てきたんですけど 僕もまだまだ知らないのが結構

28:28.040 --> 28:33.520
あったんでそういったのをキャッチ アップしてみて実際に導入して

28:33.520 --> 28:36.640
みたりとかそういったのもやって いきたいなと思ったのですごい

28:36.640 --> 28:43.680
参考になったなというのが一つ 感想としてはありましたね

28:43.680 --> 28:49.280
僕もCAMのほうでやっている技術 のフローだったりとか特にコンテンツ

28:49.280 --> 28:53.600
の技術についての力の入れ具合 とかっていうのがあっていろんな

28:53.600 --> 28:57.320
事業部でいろんな考え方があるん だなっていうのがまず一つ知れた

28:57.320 --> 29:00.440
のがすごいよかったなっていう のとやっぱり先ほどお申し上げ

29:00.440 --> 29:04.040
られてましたけどいろんなサービス をリリースしているからこその

29:04.040 --> 29:09.160
気をつけ方みたいなのがそこの 共通認識があってやっぱりみんな

29:09.160 --> 29:13.600
同じくらいしっかり気をつけて るんだなっていうのがあってそこ

29:13.600 --> 29:17.480
はチームサイバーエージェント というかしっかり品質に対して

29:17.480 --> 29:21.120
の考え方っていうのはどこもサイバー エージェントの一律で変わってない

29:21.120 --> 29:25.320
んだなっていうのがすごい安心 感がありましたこれからもスピード

29:25.320 --> 29:28.960
感を持った開発っていうのは当然 続けていくんですけど同時に同じ

29:28.960 --> 29:32.320
くらい品質っていうのも大事に しながら開発を続けていこうかな

29:32.320 --> 29:35.800
と思いました 確かに確かにサイバーエージェント

29:35.800 --> 29:39.000
のエンジニアとして品質スピード すべてを担保しながら

29:39.000 --> 29:41.080
そうですね 今回の話もいろんなツールの

29:41.080 --> 29:44.920
名前とか出てきたと思うんですけど 僕も知らないのいっぱいありました

29:44.920 --> 29:49.000
し自分のところでもどんどん入れ ていきたいなと思いますね

29:49.000 --> 29:52.760
はいでは本日いろんな話できて 本当に楽しかったですなので今日は

29:52.760 --> 29:57.720
これで終わりにしたいと思います 本日はお越しいただいてありがとうございました

29:57.720 --> 30:02.360
聞いている皆さんもまた次回よろしくお願いします それではバイバイ

30:02.360 --> 30:04.360
バイバイ


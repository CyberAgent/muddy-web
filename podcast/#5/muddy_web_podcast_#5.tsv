start	end	text
0	11000	マディウェブポッドキャストは、マディの意味が泥であるように ウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、
11000	25000	実際に明日から使えるかもしれないウェブフロントエンド知識や技術を 参加者の皆様と共有し合うことを通して、フロントエンド界隈の役に立てるように思いを込めて発信しています。
25000	29000	はい、それではマディウェブポッドキャストを始めていきましょう。
29000	42000	本日のテーマは、プロダクトのリリースについて第2弾ということで、 第1弾が1話目で話したんですけども、それの第2弾ということで違う授業所から話していきたいと思います。
42000	47000	ファシリティータは私、株式会社シロックより石井ゆきがお送りいたします。
47000	51000	本日ゲストでお越しいただいてます2名の方がいらっしゃるんですけども、
51000	57000	CAMより石井ゆきさんとAI事業本部より森田正敏さんがお越しいただいております。
57000	61000	最初軽く自己紹介の方をしていただきたいんですけども、 石井さんからお願いしていいですか?
61000	63000	はい、わかりました。
63000	67000	サイバーエージェントのグループ会社、株式会社CAMでフロントエンドエンジニアをやっています。
67000	69000	石井と申します。
69000	75000	入社しても5年目で、今はCAM内のフロントエンドで新規開発の方を今やっています。
75000	77000	本日はよろしくお願いします。
77000	79000	よろしくお願いします。
79000	81000	次、森田さんお願いします。
81000	85000	サイバーエージェントのAI事業本部アプリエンスセンターで
85000	88000	ウェブフロントエンドエンジニアを担当しております。森田と申します。
88000	93000	AI事業本部はサイバーエージェントの中でインターネット広告事業をやっている部署で、
93000	98000	その中でAI事業で展開している、そのAIを活用したDXを使って、
98000	103000	主に小売企業に提携していろんなものを作っているような部署でございまして、
103000	108000	そこのウェブサービスとかアプリとかをいろいろ作らせていただいているという感じです。
108000	110000	よろしくお願いします。
110000	112000	本日はよろしくお願いします。
112000	114000	よろしくお願いします。
114000	121000	テーマ通りなんですけども、実はこれ裏話で収録2回目で撮り直してるんですけども、
121000	126000	ちょっと盛り上がりすぎて行き過ぎてしまったかなっていうところがあるんですけども、
126000	131000	それと同じようにリリースについて、皆さんどういうふうにリリースしているかというのは
131000	135000	ちょっと深く聞いていきたいなと思っているんですけども、
135000	141000	最初リリースって多分いろんな事業所によって違うやり方をしていると思うんですけども、
141000	146000	そのプロダクトのリリースまでフローとして軽く聞いてみてもいいですかね。
146000	149000	CAMではどうやってますか?
149000	153000	そうですね、基本的にはソースコードのリリースだと、
153000	158000	ソースコードをマークするときにメインブランチのGitHub上でマージして、
158000	165000	CICDでデプロイをして反映されるっていうのが基本的なリリースになりますね。
165000	170000	基本そんな感じなんですけど、AIの方はどんな感じなんですか?
170000	177000	概ねAIの方もソースコードの方をビルドされたものをプロダクションの方にビルドするというのは変わらないんですけども、
177000	184000	こちらもCICDを含んでリリースのフローを整備してリリースするようにしています。
184000	188000	一部特徴的なところとしては、
188000	194000	CDを使っているシステムとして、サイバーアイテムとか開発しているタイプCDというCDを使って、
194000	201000	バックエンドとかフロントエンドも含めて一元で管理できるように動いているというところが一つ特徴的なのかなというところと、
201000	208000	あとは、デブ環境、ステージング環境、プロダクション環境というふうに環境を分けて管理をしているんですけども、
208000	212000	環境に応じてリリースのフローを変えているというのが一つ特徴かなと思っていて、
212000	218000	デブ環境の方にデプロイする際はプロデュクエストがマージされたタイミングで、
218000	221000	タグを切らなくても自動的にタグにハッシュがついて、
221000	225000	それで自動的にデプロイされるような仕組みを作っていたりとかというところで、
225000	231000	開発の効率化というところを図るようなところが特徴的かなと思います。
231000	240000	CIとか結構しっかり固めて環境を分けてやっていく中で、デブの環境を用意しているということらしいんですけども、
240000	248000	デブの環境を使うとリリース前にいろんなバグの発見だとかあると思うんですけど、
248000	251000	結構やってみていいですかね。
252000	256000	デブの環境まで自動にデプロイされるようにすることによって、
256000	263000	フロントエンドだとローカルで開発をして開発の機能をどんどん進めていくということがあると思うんですけども、
263000	270000	一部サーバー上に置いて実際に動作確認をしたいというニーズがある程度あると思っていて、
270000	275000	そういうときにやっぱり気軽にデプロイできる環境を用意できているというのは、
275000	278000	開発の効率化に大きくつながっているなと思っています。
278000	282000	だからといって何でもかんでも試してみればいいというわけではないんですけども、
282000	291000	ある程度デブ環境に関してはそういった開発する上でちょっとチャレンジングなこととかも試せるような環境を整備して、
291000	296000	エンジニアとしてのモチベーションみたいなところも保ちながら開発ができているかなと思っています。
296000	303000	確かに、実際リリースというか本番の携帯とか特にフロントなんかそうなんですけど、
303000	308000	モバイルとか実機で見ると意外と開発ってブラウザー上が多いかなと思っているんですけど、
308000	312000	実機で見ると意外と動作が違う風に動いたりとかすることがありますもんね。
312000	316000	そうしたときにやっぱりデブ環境ってすごく便利だなと思ったりしますね。
316000	323000	そうですね。むしろデブ環境がないっていうのはもはやあんまり聞かないというか、
323000	331000	そんないきなり本番に出すみたいなことはやらない世界線になっているのかなっていうのはあったりとかしますけど、
331000	338000	ちょっとAIとCAMは違って環境は分かれてるんですけど、開発ブランチも分かれてるんで、
338000	343000	デブブランチがあってステージングブランチがあって本番用のメインブランチがあるみたいな感じなので、
343000	346000	ちょっとデプロイの仕方はやっぱ違うんですけど、
346000	353000	CAMは普通にデブにマージしたらデブ用の環境のデプロイが走るみたいな形になっているので、
353000	360000	CICDはそんなにフロントエンドの開発者が意識せずに普通にマージしたらデプロイされるみたいなのを採用しています。
360000	366000	もちろんリーダー陣とかはデプロイのCICDを組んだりとかはもちろんしているので、
366000	368000	作業者はあんまり気にする必要はないという。
368000	374000	これはこのブランチにマージするだけでデプロイされるというのが結構利点かなというふうに思っていますね。
374000	375000	なるほど。
375000	384000	じゃあそのブランチでマージして、本当に開発者が意識しなくても確認できるようなリリースフローが整っているんですね。
384000	387000	そうですね。整っているという感じですね。
387000	388000	なるほど。
391000	397000	リリースのCIの中でいろんなステップがあると思うんですけれども、
397000	401000	自動テストとかってこの中でもやっぱり入れてますか?
401000	403000	CIのその…
403000	404000	E2Eテストみたいな。
404000	406000	E2Eテストとかもそうですよね。
406000	409000	ユニットテストとかも結構入れているところも多いのかなと思っていて。
409000	412000	そういったところをやっぱりツールとか使ってやっている感じですかね?
412000	414000	そうですね。
414000	420000	まずAI事業本部のほうではユニットテストのほうは基本的には書くようにはしているので、
420000	423000	そこのテストっていうのはCIで回すようにはしています。
423000	427000	実際にそのいわゆる結合テストであったりとか動作確認みたいなところ。
427000	431000	そこに関してはちょっとE2Eテストも導入予定ではあるんですけれども、
431000	435000	ちょっとなかなか動けていないというところがちょっと現状ではございまして、
435000	437000	その代わりといってはなんですけど、
437000	440000	テスト広告書みたいなものがあるんですけれども、
440000	444000	例えばエンジニアじゃなくても動作確認とかって結構できるので、
444000	447000	例えばチームの中でデザイナーであったりとか、
447000	451000	他の例えばセールスチームだったりとかプロジェクトマネージャーだったりとかっていうところに
451000	453000	動作確認をいろいろしてもらって、
453000	458000	ある意味で言うと壊す前提でちょっと動いてもらうみたいな形でいろいろテストをしてもらって、
458000	461000	そこでエンジニアのほうで実は気づけなかったバグとか、
461000	465000	そういうところとかも出してもらえるような形で動いていたり。
465000	469000	結構テストとかでもやっぱり触ってみるといいですね。
469000	474000	いろんな項目が用意されていて、これで実際動かしてみる。
474000	484000	何かの本でエンジニアがテストするときとテスターがテストするときのテスト項目の書き方がすごい違うっていう記事をこの前見て、
484000	486000	すごい面白いなと思ったんですけど、
486000	490000	内容を忘れちゃったんですけども、何かそんな話を思い出して。
490000	496000	CAMのほうでは結構静的コードの解析とかも入れたりとかします?
496000	502000	いわゆるテストコードを書いてCICDで回してみたいなところはちょっと出遅れているところがあって、
502000	504000	あまり整備しきれてないんですけど、
504000	507000	もちろん取り入れができるようなところはありますけど、
507000	519000	アーキテクチャーとかを取り入れてコード分離したりとかして、将来的にテストが書きやすいような構成に新規ではしていたりとか。
519000	522000	そういったものを取り入れていこうという風に考えていて、
522000	525000	今のところはテストコードを書いて、
525000	528400	そうですね テストコードまでは まだあんまり書けてないですけど
528400	531680	アーキテクチャーとかを取り入れて もうコード分離したりとかして
531680	537640	将来的にテストが書きやすいような 構成に新規ではしていたりとか
537640	541520	もちろんHypeScriptとか静的解析系 とかカタチェックとかはもちろん
541520	546920	やっていて 外部の通常でSonaCloud とか使って 人間が気づきにくい
546920	550640	なんか使ってない変数ですよみたいな そういう静的解析ももちろん始まって
550640	555080	感じですね さっきの結合テストみたいな話
555080	558560	やったと思うんですけど CAMでも社内でそういうのはもちろん
558560	562480	やっていて プロデューサーだったりとか エンジニアでテスト項目考えて
562480	567080	作って デバッグ期間みたいなのも受けて もちろんチーム内で動かしたり
567080	572080	とか あと社内で結構新規サービス 作ってるんで 新規サービスを盛り上げて
572080	577080	こうっていう文脈で リリース前に 社内おさわり会みたいな感じで
577120	581920	デブとか解放して 社内の人が不特定 多数で触ってもらって いろいろ
581920	585280	書いてもらったりとか意見言って もらったりとかして 実際に反映
585280	589360	したりとか直したりとかっていう のはやっていたりとかしますね
589360	594240	結構新規作るにあたって特殊な テストみたいな感じかもしれない
594240	597080	けど そういうのがありますね
597080	602760	面白いですね 実際にいろんな関わ ってる人関わってない人に実機
602760	605960	を触っていただいてレビューを もらってそれを改善していくって
605960	606960	形なんですか
606960	610560	はい 毎回新規前はやってますね
610560	614040	結構アジャイル的な感じの動き なんですかね
614040	617440	そうですね 確かに言われてみれば そういう感じはしますね
617440	622840	面白いですね 話の中でソナークラウド とかツールを使うような話ありました
622840	628680	けど やっぱり最近ってCIにどんどん ツールを導入する流れが多いん
628680	629680	ですかね
629680	634920	そうですね いっぱいあるので必要 に応じてみたいな ちゃんと趣旨
634920	639240	が選択はもちろん必要だと思う ので 必要なものだと思ったら
639240	642760	入れるっていうのもありますし あと導入コストはあんまりない
642760	647400	ので 入れてみて合わなかったら やめるとかは全然ありますね
647400	652200	そうですね AIでも割と試行錯誤 して ギターワークションズだと
652200	656720	本当にいろんなものが結構入れられる ので それこそ入れすぎちゃうと
656720	660240	あとでギターワークションズが 開いたしすぎて誰も触れないみたいな
660240	663960	ちょっと困惑点とかなので そこは 入れるものっていうのはプロジェクト
663960	669680	に合わせてニーズを絞って入れる ようにはしています 開発の初期
669680	674560	段階とかだと本当にそれこそ例えば レビュードックとかあとデベンダ
674560	679360	ポップとかそういったものくらい を初回は入れて あとはリリース
679360	684280	のニーズに合わせてスクリプト 経費 例えばリリースノートを自動
684280	688320	生成するツールだったりとか そうい ったものを必要に応じて入れて
688320	696120	いくという感じです 結構事業のレベル 成長に合わせて変えていくみたいな
696120	700680	感じなんですね そうですね まずリリースまでのフロー
700680	704520	っていうのは先に作るようには してるんですけど そこの環境の
704520	708640	整備というか その後プロダクション としてリリースできるようなプロダクト
708640	713000	としての品質の向上っていうところ は開発をしながら徐々に品質を
713000	724400	向上させていくという形で進めて います
724400	727800	実際にいろんなツール触ってき てると思うんですけど入れてみて
727800	730760	これよかったなみたいなツール ってありますか おすすめしたい
730760	735600	ツール賛成みたいな感じで なんすかね
735600	740920	さっき話してたソナークラウド とかって実際使ってみて結構改善
740920	747480	されましたか そうですね 結構改善されてますね
747480	751980	指名的なものっていうよりかは どちらかというとちょっと抜け
751980	755800	ちゃったよねみたいなとか気づ けながらちょっとした変数使って
755800	759960	ないよねとかこういう書き方危ない よねとかこういう書き方意味なく
759960	767320	ないみたいなのを技術者という か技術者の知識に関係なく指摘
767320	770840	してくるのでいろんな書き方を 指摘してくると思うんですけど
770840	774360	この書き方は良くないよねみたいな こういう理由だからみたいな感じ
774360	780680	で指摘してくれるので結構チーム の書き方の統制というのは結構
780680	783480	生きてるのかなっていう感じが しますね
783480	788240	ソナクラウドってスタイルガイド みたいなに反するところに似た
788240	793000	みたいな感じですよね 結構あれってカスタマイズとか
793000	795760	できるんですか できますねできます
795760	799840	結構やっぱりチームでいろんな 最近思ってるんですけどいろんな
799840	805160	人が入ってくるといろんな書き方 があるなって思って確かにプロジェクト
805160	809480	がだんだん長くなってくると過去 の履歴とかを見ているとその辺
809480	814240	が整ってないともう書き方めちゃ くちゃな話とかも結構あるかな
814240	821320	と思ってていったところだとやっぱり 一貫性を保つにはそういうスタイル
821320	823640	ガイドのリンターみたいなの入れる のってすごくいいですよね
823640	832080	AIではCIツールとかで導入してみて よかったやつはありますか
832080	837840	まず導入してよかったなと思った のはChromaticですねストーリーブック
837840	842560	みたいな形でコンポーネントとか のリフをいわゆるVRTみたいな形
842560	846600	で表示してくれるようなものなんです けど結構VRTって導入するの割と
846600	851160	めんどくさかったと思うんですけど Chromaticは本当にChromaticのユーザー
851160	855840	を追加してあとはCIでちょちょっと 書いてあげれば勝手に免許して
855840	861440	くれるんでVRTっていう面ではスタイル の違いとか見た目の違いとかっていう
861440	865720	のがすごくキャッチしやすくなった なっていうのが一つあるんでこれは
865720	869240	今後も導入していきたいなとは 思ってます
869240	873520	ちょっとまだ導入できてないんですけど 1個気になっているものがあって
873680	879120	What the diffって言われるやつで AIでプルリクエストのサマリとか
879120	883560	を出してくれるやつ例えばクリエイト リアクトアップとかでタイプスクリプト
883560	886720	のプレートリアクトアップのテンプレート を入れてそれでプルリクエスト
886720	890360	出すとそれをコードを勝手に読んで 推論してくれてプルリクエスト
890360	894680	のサマリを作ってくれるんですよ ねこれはリアクトJSというJavaScript
894680	898000	のフレームワークを使ってタイプ スクリプトで構成されたものです
898000	901200	みたいなところとかパッケージ として何点何バージョンのもの
901200	904640	入れてますみたいなこういうテンプレート を使ってますみたいなものをリスト
904640	908280	でプルリクエストのサマリを勝手 に作ってくれてそれだけじゃなくて
908280	910920	レビューもしてくれるんですよ レビューもしてくれる
910920	913960	レビューをしてもらうには多少 細かい指摘がしてきている指定
913960	918200	が必要なんですが例えばアローファンクション じゃないものを指摘してください
918200	922680	とかこのリントの設定にのっと ったレビューをしてくださいみたいな
922680	926720	形でちょっと原始的なところは あるんですけど結構AIが自動で
926720	930400	レビューしてくれるので人間の レビューの精度がより上がるという
930400	933720	かそういったところを見なくて すむのでこれはちょっと導入して
933720	939680	みたいなと思っているのとあと ギッターブの公式のほうでもAI
939680	942520	を使ったプルリクエストの生成 みたいなところを今ギッターブ
942520	946560	のリストで考えているみたいで それは非常に期待しているという
946560	950640	感じです もうAIがレビューも考えてしまう
950640	953800	時代になってきましたね そうですね AI事業本部なんでそれ
953800	959760	を活用していきたいところではあります 確かにPRのレビューとかってすごい
959760	964920	なんだかんだ構成がかかるんですよ ねといったところでおそらく最終
964920	970000	的には人間の目でまだ見る段階 なのかなと思うんですけどその
970000	974840	ここまでの先ほど話したみたいな リンターに違反しているような
974840	978640	とかそういったところの機械が やってくれると本当にすごく開発
978640	982640	スピードとかも高まっていいかな ってすごく期待大ですね
983520	985520	そうです確かに
985520	995520	CIの中でさっき話出ていたChromatic あれって確かPRもステイトで見て
995520	999920	てPRでアプローブされないとリリース できませんみたいなことも確か
999920	1001800	にできましてね そういったことも可能なのでより
1001800	1007600	厳密な形で踏み込むことも可能 ですね今の段階では結構そこまでは
1007600	1010480	厳密にはしていないんですけど しっかりその辺のルールを整備
1010480	1014440	して例えばそこのレビューが通 らないとダメっていうふうにして
1014440	1017200	かつそのレビューを例えばデザイナー にやってもらうとかっていうふう
1017200	1021560	にするとデザイナーもコードレビュー じゃないですけどそのレビュー
1021560	1025480	にしっかり参加できるみたいな それがしっかり可視化されるみたいな
1025480	1028640	ところもフローとして確立できる ので非常に良いんじゃないかな
1028640	1031160	とは思ってます
1031160	1034520	デザイナーにレビューしてもらう っていうの新しいあれですよね
1034520	1038920	しかもあれ僕も触ったことあるん ですけどディファレンスとの違い
1038920	1043600	が緑色にハイライトされて結構 1ピクセル単位でも出てきます
1043600	1044600	よね
1044600	1048440	そうですねそこは結構VRTあるある ではあるんですけども例えば結構
1048440	1051600	よくあるのがフォントをカスタム フォントレブフォントを入れている
1051600	1055400	ときにフォントの読み込みが先に マウント前にスクリーンショット
1055400	1059080	取られちゃってそこでディフ出る みたいなのが結構あったりもするん
1059080	1063480	ですけどその辺りの細かい際とか はちょっとキャッチアップして
1063480	1066160	あげる必要があるんですけど結構 グロマティックも細かく設定が
1066160	1071320	できて例えばこの画面は対象外 にするとかこのファイルはイグノア
1071320	1075720	するみたいな設定もできるんで その辺りは結構細かくカスタマイズ
1075720	1078280	してプロジェクトに合わせてニーズ に合わせてやっていけばいいの
1078280	1082640	かなっていうところとあと1ピクセル 単位でもズレが本当にズレてる
1082640	1086880	のかスクリーンショットでも細かい 際レンダリングのタイミングとか
1086880	1091840	の問題なのかっていうところは 結構難しくてその辺りは結構割
1091840	1095440	とフロントエンドエンジニアの 知識の業務によるのかなという
1095440	1099600	ところがあってレビューで指摘 されてもこれは実はレンダリング
1099600	1102880	の問題でこういうことなので対応 しなくてもいいですっていうふう
1102880	1107400	にするのかそれとも実際マジで ズレてるのかっていうのは結構
1107400	1111360	レビュー受けた人のちゃんと技術 量によると思うんでそこはもう
1111360	1114560	みんなでレベルを上げていくしかない なと思ってます
1114560	1118560	そうなんですねでもなかなかまだ 便利だけども辛みがあるところ
1119120	1123280	そこはそうですねガチっと例えば スクリーンショットを撮るタイミング
1123280	1128160	とかがちゃんとディレイしてくれて ガチっとレンダリングしっかり
1128160	1132320	行ったタイミングでスクリーンショット 撮ってくれるとかってなったら
1132320	1136640	すごくいいんでしょうけど結構それも 難しいんだろうなと思います
1136640	1141520	確かにスピレーとかだとレンダー の前とかの状態が変化する前の
1141520	1143920	やつをスクリーンショット撮ったり とかする場所もね
1143920	1144920	そうですそうです
1144920	1150920	難しいところだCAMではこれから 導入したいツールみたいなのって
1150920	1152200	あったりします
1152200	1159240	そうですねVRTとかはあんまり話 とかは出ていかなくてそもそも
1159240	1164840	API通信とかのほうのユニットテスト とかのほうを今注力してやってる
1164840	1167640	ってところでさっきちょっと言 ったんですけどコード分割して
1167640	1172040	アーキテクチャ取り入れてテスト しやすい感じにしていて今はちょ
1172040	1175400	こちょこテストコードを書いて みてみんなでああだこうだ言ってる
1175400	1179320	っていうこんな書き方でいいのか みたいな感じでいろいろ検証して
1179320	1182960	いるという段階ではありますね なのでその辺のユニットテスト
1182960	1188440	系の知見とかがけっこうCAMでは 欲してる感じではありますね
1188440	1193960	ユニットテストで言うとフロント で有名なのはやっぱジェストとか
1193960	1199240	そうですねジェストとかですね 結構やっぱりジェストが多いですよね
1199960	1204280	あとは例えばリアクトを使ってるん だったらリアクトテスティング
1204280	1207800	ライブラリーがありますねもう あれですかねもうエンザインとか
1207800	1209800	シノンは使わないんですかね
1209800	1213880	でもMacとかでシノンとかは使いますよ ね
1213880	1218320	使ったりとかはしてますね特に API通信とかの系のテストとか書く
1218320	1219800	ときは多分結構使ったりとかしてます ね
1219800	1224680	いわゆるスパイツールみたいな ツールがありますね結構テスト
1224680	1228680	のところのツールを今入れてる というか
1228680	1233600	そうですね今取り組んでいるという 形ですね
1233600	1236560	面白そうですねワクワクしそうな 話すごい
1236560	1249120	そうですねツールとかいろいろ 入れてると思うんですけどそういう
1249120	1254360	CIとか通ってやっとリリースされて いく感じですよね
1254360	1259120	そうですねマップしてると思うん ですねあとCAMとかだとコード
1259120	1263560	とか新機能とかリリースコード 上のGitHubでメインにマージして
1263560	1266800	リリースみたいなのもあると思 うんですけどCAMだと他にもコンテンツ
1266800	1271320	のリリースみたいなのがあって コードは変わんないんですけど
1271320	1275480	編集者というか運用者がコンテンツ を投稿してそれがサイトに反映
1275480	1278980	されるみたいなリリースも結構 CAMでは多いんですけどそういった
1278980	1283360	ところにも結構CAMは力入れてまして 今CAMってアーティストファンサイト
1283360	1287800	とかあとは占いサイトとかも運用 してるんですけどそういうのって
1287800	1293200	結構サイトの見た目は変わんない けど新しい記事を投稿するとか
1293200	1297120	新しいリリース情報のニュース をリリースするとかそういうの
1297120	1300520	は結構多いんですけどそういった ところでそういうアーティスト
1300520	1304320	ファンサイトのアーティストの ほうのパートナー企業さんと連携
1304320	1310920	したりとかして公開情報とか例えば リリース情報だったりとかそう
1310920	1315600	いったところもちゃんとパートナー 企業と協力してメディア連携で
1315600	1319920	公開情報の日時とかちゃんとずれない ようにコンテンツが投稿できる
1319920	1324680	みたいなところをちゃんと担保 したりとかそういったところの
1324680	1330520	ビジネスサイトとの運用者の信頼 できるようなシステムを今作って
1330520	1335200	いてコンテンツのリリースも安心 して運用者ができるっていうもの
1335200	1340080	を開発したりとかはしてますね 予約投稿だったりとか時間にセンシティブ
1340080	1343560	なんで予約投稿とかできるように したりとかそういうのをやって
1343560	1348240	ますね そういうところって予約 投稿とかお客様のロイヤリティ
1348240	1351680	に関わってくるようなところって やっぱり技術力が高くあるべき
1351680	1356120	であってなかなか難しいところ かと思うんですけど
1356120	1360480	そこの難しさっていうところに 注力してるっていうのがCAMの特徴
1360480	1364400	では一つあるかなっていうふう に思ってますね
1364400	1368080	CAMのレベルがあるからこそできる ようなものですね
1368080	1374160	そうですね 運用者が触るって ことで管理画面とかも大体作る
1374160	1379120	と思うんですけど CAMで今OSSで出 してるバイロンっていうツール
1379120	1383960	があるんですけど それってフロントエンド ほとんどローコードで管理画面
1383960	1387560	が簡単に作れるみたいなのを売り にしているOSSでもしよかったら
1387560	1391200	検索してみてほしいんですけど それ結構どのサービスでも使って
1391200	1395720	て運用者がそのバイロンで作った 管理画面を使っていろいろコンテンツ
1395720	1399600	を導入したりとか投稿したり とかもできるっていう形になって
1399600	1400600	ます
1400600	1403120	なるほど 今度検索してみてください
1403120	1404120	バイロン
1404120	1408520	そうです AIのほうでもバイロン 調べさせていただいたんですけど
1408520	1413840	非常に完成度が高いですよね 横展開で導入してみようかなっていう
1413840	1417000	話がちょっと出てるぐらい非常 に素晴らしいツールでした
1417000	1418000	そんなに
1418000	1423000	もう帰ったら早速検索してみます 次お願いします
1423000	1424000	なるほど
1424000	1437920	リリースとかいろいろある中で 結構リリース特にお客様に対して
1437920	1443880	出してるものとかって品質担保 って大切かなと思っててそれを
1443880	1447880	担保するために要は間違ったもの を出してしまうとインシデント
1447880	1452960	になってしまうじゃないですか それを未然に防ぐためにちょっと
1452960	1455840	注力してる仕組みとかってあります か
1455840	1462880	そうですね そもそも事故とかって あんま起こしちゃいけないこと
1462880	1466720	なんでまずそれを起こさないように するっていうのも一つでそれために
1466720	1471040	もちろんCIとかCDとかでちゃんと リリースをやっているっていう
1471040	1476000	ところは一つちゃんとあります 例えば気づかずにそういうことが
1476000	1479520	起こってしまった時に大きな事故 にならないように未然に防ぐっていう
1479520	1484360	方法としては検知に力を入れてる っていうところでステータス
1484360	1487800	ケークとかでサイトが落ちてない かとか確認したりとかデータドック
1487800	1492280	とかで監視してリソースとかも 監視して通信とかも監視して異常
1492280	1495800	がないかっていうのは常に見ている って感じで何か異常があったら
1495800	1498920	スラッグが飛んできたりとか関係者 に連絡が行ったりとかっていう
1498920	1503400	のもやってますね フロントエンド の話でいうとTypeScriptとか使って
1503400	1507920	てもJSに置き換えたときに気づかない ようなバグみたいなのはバグスナック
1507920	1512640	とか入れて事前にデブ環境やステージ の環境で気づけるようにとかそう
1512640	1517320	いったところツールもうまく使って 未然に防ぐっていうのは取り組んでいる
1517320	1520800	ことではありますね 結構ツールとか入れて未然に
1520800	1525800	防ぐようなことを力入れてる感じ なんですね AI事業本部ではどの
1525800	1531640	ようなことをやってることありますか AI事業本部のほうでもデータドック
1531640	1536040	によるログの監視っていうのは 常々行っていてそれこそエンドユーザー
1536040	1541400	のほうにリリースしているシステム が落ちてしまうっていうのは本当に
1541400	1545080	インシデントになってしまうので そこの敷地をかなり高くしている
1545080	1549760	というかリソースに関しても50% 以上使ってるようだったらすぐ
1549760	1554280	にアラートを飛ばすようにする とかそういった厳重な体制で監視
1554280	1558280	をしているようにはしているっていう のとあとは一番やっちゃいけない
1558280	1561400	のがエンドユーザー側にご迷惑 をおかけすることだと思っている
1561400	1565000	のでメンテナンスモードとかそう いったところにすぐ切り替えられる
1565000	1569200	ような設計にしている例えばフラグ を一つ切り替えたらすぐにメンテナンス
1569200	1573360	モードになるようなデプロイを しなくてもメンテナンスモード
1573360	1576440	をすぐにフラグを切り替えれば すぐに切り替えられるような状態
1576440	1581200	にしてあったりとかあとはそれでも どうしても万が一っていうこと
1581200	1585000	はあるかもしれないんですけども そういったときのためにちゃんと
1585000	1588760	体制を敷くようにはしていてそこ にもツールを導入しています今
1588760	1594000	導入したいのがGraphana On Callっていう ものを導入していてもし万が一
1594000	1597440	何か起きた際はすぐにチーム メンバーに連打が来るような厳重
1597440	1602200	な監視体制を敷いているという 形で2030にしっかり対策を取って
1602200	1606480	いるという感じです なるほど何か起きたときにでも
1606480	1611240	すぐ反応してアクションを取って いけるような仕組みを取っている
1611240	1613920	感じなんですね もちろんまず大前提として起こ
1613920	1619160	さないことっていうのを意識を していてそれでも世の中に100%
1619160	1622720	っていうのはないので万が一起き てしまったときっていうのを対策
1622720	1626840	するのがエンジニアの仕事だと思 っているのでそこに対してもしっかり
1626840	1631640	対策を入れているという感じです 確かに起きないことが一番です
1631640	1632640	面白いです
1642640	1649400	今日いろいろリリースについて お話聞いて本当にいろんなリリース
1649400	1654320	までにステップ踏んでツールとか で改善したりとか品質を担保する
1654320	1658920	とかそういうようなステップを 踏んでようやくプロダクトが世の中
1658920	1662680	にリリースされているしかもその ステップによってクオリティも
1662680	1668280	ちゃんと担保されているっていう なかなか深い泥臭い話が聞いたん
1668280	1672160	じゃないかなと思っていて本当に 僕自身も楽しかったですね
1672160	1675800	お二人もちょっと感想を聞きたい なと思うんですけども今日本日
1675800	1679920	改めて自分の事業部をやっている ことを話してみてどういう感想
1679920	1683200	をお持ちになったりとかします か
1683200	1688480	エア事業本部はCAMと近い感じかな とは思っていて大きなサービス
1688480	1692120	を一つ運用しているというのではなく いろんなサービスがあってそれを
1692120	1695560	作ったりとかシリーズを作ったり とかしていると思うので結構共有
1695560	1700200	としては似ているなというところ があってそういったところで今後
1700200	1705080	しっかり共有とかもできてきたら いいなとか思ったりとかツール
1705080	1708040	の話とかも結構出てきたんですけど 僕もまだまだ知らないのが結構
1708040	1713520	あったんでそういったのをキャッチ アップしてみて実際に導入して
1713520	1716640	みたりとかそういったのもやって いきたいなと思ったのですごい
1716640	1723680	参考になったなというのが一つ 感想としてはありましたね
1723680	1729280	僕もCAMのほうでやっている技術 のフローだったりとか特にコンテンツ
1729280	1733600	の技術についての力の入れ具合 とかっていうのがあっていろんな
1733600	1737320	事業部でいろんな考え方があるん だなっていうのがまず一つ知れた
1737320	1740440	のがすごいよかったなっていう のとやっぱり先ほどお申し上げ
1740440	1744040	られてましたけどいろんなサービス をリリースしているからこその
1744040	1749160	気をつけ方みたいなのがそこの 共通認識があってやっぱりみんな
1749160	1753600	同じくらいしっかり気をつけて るんだなっていうのがあってそこ
1753600	1757480	はチームサイバーエージェント というかしっかり品質に対して
1757480	1761120	の考え方っていうのはどこもサイバー エージェントの一律で変わってない
1761120	1765320	んだなっていうのがすごい安心 感がありましたこれからもスピード
1765320	1768960	感を持った開発っていうのは当然 続けていくんですけど同時に同じ
1768960	1772320	くらい品質っていうのも大事に しながら開発を続けていこうかな
1772320	1775800	と思いました 確かに確かにサイバーエージェント
1775800	1779000	のエンジニアとして品質スピード すべてを担保しながら
1779000	1781080	そうですね 今回の話もいろんなツールの
1781080	1784920	名前とか出てきたと思うんですけど 僕も知らないのいっぱいありました
1784920	1789000	し自分のところでもどんどん入れ ていきたいなと思いますね
1789000	1792760	はいでは本日いろんな話できて 本当に楽しかったですなので今日は
1792760	1797720	これで終わりにしたいと思います 本日はお越しいただいてありがとうございました
1797720	1802360	聞いている皆さんもまた次回よろしくお願いします それではバイバイ
1802360	1804360	バイバイ

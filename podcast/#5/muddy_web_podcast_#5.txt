マディウェブポッドキャストは、マディの意味が泥であるように ウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、
実際に明日から使えるかもしれないウェブフロントエンド知識や技術を 参加者の皆様と共有し合うことを通して、フロントエンド界隈の役に立てるように思いを込めて発信しています。
はい、それではマディウェブポッドキャストを始めていきましょう。
本日のテーマは、プロダクトのリリースについて第2弾ということで、 第1弾が1話目で話したんですけども、それの第2弾ということで違う授業所から話していきたいと思います。
ファシリティータは私、株式会社シロックより石井ゆきがお送りいたします。
本日ゲストでお越しいただいてます2名の方がいらっしゃるんですけども、
CAMより石井ゆきさんとAI事業本部より森田正敏さんがお越しいただいております。
最初軽く自己紹介の方をしていただきたいんですけども、 石井さんからお願いしていいですか?
はい、わかりました。
サイバーエージェントのグループ会社、株式会社CAMでフロントエンドエンジニアをやっています。
石井と申します。
入社しても5年目で、今はCAM内のフロントエンドで新規開発の方を今やっています。
本日はよろしくお願いします。
よろしくお願いします。
次、森田さんお願いします。
サイバーエージェントのAI事業本部アプリエンスセンターで
ウェブフロントエンドエンジニアを担当しております。森田と申します。
AI事業本部はサイバーエージェントの中でインターネット広告事業をやっている部署で、
その中でAI事業で展開している、そのAIを活用したDXを使って、
主に小売企業に提携していろんなものを作っているような部署でございまして、
そこのウェブサービスとかアプリとかをいろいろ作らせていただいているという感じです。
よろしくお願いします。
本日はよろしくお願いします。
よろしくお願いします。
テーマ通りなんですけども、実はこれ裏話で収録2回目で撮り直してるんですけども、
ちょっと盛り上がりすぎて行き過ぎてしまったかなっていうところがあるんですけども、
それと同じようにリリースについて、皆さんどういうふうにリリースしているかというのは
ちょっと深く聞いていきたいなと思っているんですけども、
最初リリースって多分いろんな事業所によって違うやり方をしていると思うんですけども、
そのプロダクトのリリースまでフローとして軽く聞いてみてもいいですかね。
CAMではどうやってますか?
そうですね、基本的にはソースコードのリリースだと、
ソースコードをマークするときにメインブランチのGitHub上でマージして、
CICDでデプロイをして反映されるっていうのが基本的なリリースになりますね。
基本そんな感じなんですけど、AIの方はどんな感じなんですか?
概ねAIの方もソースコードの方をビルドされたものをプロダクションの方にビルドするというのは変わらないんですけども、
こちらもCICDを含んでリリースのフローを整備してリリースするようにしています。
一部特徴的なところとしては、
CDを使っているシステムとして、サイバーアイテムとか開発しているタイプCDというCDを使って、
バックエンドとかフロントエンドも含めて一元で管理できるように動いているというところが一つ特徴的なのかなというところと、
あとは、デブ環境、ステージング環境、プロダクション環境というふうに環境を分けて管理をしているんですけども、
環境に応じてリリースのフローを変えているというのが一つ特徴かなと思っていて、
デブ環境の方にデプロイする際はプロデュクエストがマージされたタイミングで、
タグを切らなくても自動的にタグにハッシュがついて、
それで自動的にデプロイされるような仕組みを作っていたりとかというところで、
開発の効率化というところを図るようなところが特徴的かなと思います。
CIとか結構しっかり固めて環境を分けてやっていく中で、デブの環境を用意しているということらしいんですけども、
デブの環境を使うとリリース前にいろんなバグの発見だとかあると思うんですけど、
結構やってみていいですかね。
デブの環境まで自動にデプロイされるようにすることによって、
フロントエンドだとローカルで開発をして開発の機能をどんどん進めていくということがあると思うんですけども、
一部サーバー上に置いて実際に動作確認をしたいというニーズがある程度あると思っていて、
そういうときにやっぱり気軽にデプロイできる環境を用意できているというのは、
開発の効率化に大きくつながっているなと思っています。
だからといって何でもかんでも試してみればいいというわけではないんですけども、
ある程度デブ環境に関してはそういった開発する上でちょっとチャレンジングなこととかも試せるような環境を整備して、
エンジニアとしてのモチベーションみたいなところも保ちながら開発ができているかなと思っています。
確かに、実際リリースというか本番の携帯とか特にフロントなんかそうなんですけど、
モバイルとか実機で見ると意外と開発ってブラウザー上が多いかなと思っているんですけど、
実機で見ると意外と動作が違う風に動いたりとかすることがありますもんね。
そうしたときにやっぱりデブ環境ってすごく便利だなと思ったりしますね。
そうですね。むしろデブ環境がないっていうのはもはやあんまり聞かないというか、
そんないきなり本番に出すみたいなことはやらない世界線になっているのかなっていうのはあったりとかしますけど、
ちょっとAIとCAMは違って環境は分かれてるんですけど、開発ブランチも分かれてるんで、
デブブランチがあってステージングブランチがあって本番用のメインブランチがあるみたいな感じなので、
ちょっとデプロイの仕方はやっぱ違うんですけど、
CAMは普通にデブにマージしたらデブ用の環境のデプロイが走るみたいな形になっているので、
CICDはそんなにフロントエンドの開発者が意識せずに普通にマージしたらデプロイされるみたいなのを採用しています。
もちろんリーダー陣とかはデプロイのCICDを組んだりとかはもちろんしているので、
作業者はあんまり気にする必要はないという。
これはこのブランチにマージするだけでデプロイされるというのが結構利点かなというふうに思っていますね。
なるほど。
じゃあそのブランチでマージして、本当に開発者が意識しなくても確認できるようなリリースフローが整っているんですね。
そうですね。整っているという感じですね。
なるほど。
リリースのCIの中でいろんなステップがあると思うんですけれども、
自動テストとかってこの中でもやっぱり入れてますか?
CIのその…
E2Eテストみたいな。
E2Eテストとかもそうですよね。
ユニットテストとかも結構入れているところも多いのかなと思っていて。
そういったところをやっぱりツールとか使ってやっている感じですかね?
そうですね。
まずAI事業本部のほうではユニットテストのほうは基本的には書くようにはしているので、
そこのテストっていうのはCIで回すようにはしています。
実際にそのいわゆる結合テストであったりとか動作確認みたいなところ。
そこに関してはちょっとE2Eテストも導入予定ではあるんですけれども、
ちょっとなかなか動けていないというところがちょっと現状ではございまして、
その代わりといってはなんですけど、
テスト広告書みたいなものがあるんですけれども、
例えばエンジニアじゃなくても動作確認とかって結構できるので、
例えばチームの中でデザイナーであったりとか、
他の例えばセールスチームだったりとかプロジェクトマネージャーだったりとかっていうところに
動作確認をいろいろしてもらって、
ある意味で言うと壊す前提でちょっと動いてもらうみたいな形でいろいろテストをしてもらって、
そこでエンジニアのほうで実は気づけなかったバグとか、
そういうところとかも出してもらえるような形で動いていたり。
結構テストとかでもやっぱり触ってみるといいですね。
いろんな項目が用意されていて、これで実際動かしてみる。
何かの本でエンジニアがテストするときとテスターがテストするときのテスト項目の書き方がすごい違うっていう記事をこの前見て、
すごい面白いなと思ったんですけど、
内容を忘れちゃったんですけども、何かそんな話を思い出して。
CAMのほうでは結構静的コードの解析とかも入れたりとかします?
いわゆるテストコードを書いてCICDで回してみたいなところはちょっと出遅れているところがあって、
あまり整備しきれてないんですけど、
もちろん取り入れができるようなところはありますけど、
アーキテクチャーとかを取り入れてコード分離したりとかして、将来的にテストが書きやすいような構成に新規ではしていたりとか。
そういったものを取り入れていこうという風に考えていて、
今のところはテストコードを書いて、
そうですね テストコードまでは まだあんまり書けてないですけど
アーキテクチャーとかを取り入れて もうコード分離したりとかして
将来的にテストが書きやすいような 構成に新規ではしていたりとか
もちろんHypeScriptとか静的解析系 とかカタチェックとかはもちろん
やっていて 外部の通常でSonaCloud とか使って 人間が気づきにくい
なんか使ってない変数ですよみたいな そういう静的解析ももちろん始まって
感じですね さっきの結合テストみたいな話
やったと思うんですけど CAMでも社内でそういうのはもちろん
やっていて プロデューサーだったりとか エンジニアでテスト項目考えて
作って デバッグ期間みたいなのも受けて もちろんチーム内で動かしたり
とか あと社内で結構新規サービス 作ってるんで 新規サービスを盛り上げて
こうっていう文脈で リリース前に 社内おさわり会みたいな感じで
デブとか解放して 社内の人が不特定 多数で触ってもらって いろいろ
書いてもらったりとか意見言って もらったりとかして 実際に反映
したりとか直したりとかっていう のはやっていたりとかしますね
結構新規作るにあたって特殊な テストみたいな感じかもしれない
けど そういうのがありますね
面白いですね 実際にいろんな関わ ってる人関わってない人に実機
を触っていただいてレビューを もらってそれを改善していくって
形なんですか
はい 毎回新規前はやってますね
結構アジャイル的な感じの動き なんですかね
そうですね 確かに言われてみれば そういう感じはしますね
面白いですね 話の中でソナークラウド とかツールを使うような話ありました
けど やっぱり最近ってCIにどんどん ツールを導入する流れが多いん
ですかね
そうですね いっぱいあるので必要 に応じてみたいな ちゃんと趣旨
が選択はもちろん必要だと思う ので 必要なものだと思ったら
入れるっていうのもありますし あと導入コストはあんまりない
ので 入れてみて合わなかったら やめるとかは全然ありますね
そうですね AIでも割と試行錯誤 して ギターワークションズだと
本当にいろんなものが結構入れられる ので それこそ入れすぎちゃうと
あとでギターワークションズが 開いたしすぎて誰も触れないみたいな
ちょっと困惑点とかなので そこは 入れるものっていうのはプロジェクト
に合わせてニーズを絞って入れる ようにはしています 開発の初期
段階とかだと本当にそれこそ例えば レビュードックとかあとデベンダ
ポップとかそういったものくらい を初回は入れて あとはリリース
のニーズに合わせてスクリプト 経費 例えばリリースノートを自動
生成するツールだったりとか そうい ったものを必要に応じて入れて
いくという感じです 結構事業のレベル 成長に合わせて変えていくみたいな
感じなんですね そうですね まずリリースまでのフロー
っていうのは先に作るようには してるんですけど そこの環境の
整備というか その後プロダクション としてリリースできるようなプロダクト
としての品質の向上っていうところ は開発をしながら徐々に品質を
向上させていくという形で進めて います
実際にいろんなツール触ってき てると思うんですけど入れてみて
これよかったなみたいなツール ってありますか おすすめしたい
ツール賛成みたいな感じで なんすかね
さっき話してたソナークラウド とかって実際使ってみて結構改善
されましたか そうですね 結構改善されてますね
指名的なものっていうよりかは どちらかというとちょっと抜け
ちゃったよねみたいなとか気づ けながらちょっとした変数使って
ないよねとかこういう書き方危ない よねとかこういう書き方意味なく
ないみたいなのを技術者という か技術者の知識に関係なく指摘
してくるのでいろんな書き方を 指摘してくると思うんですけど
この書き方は良くないよねみたいな こういう理由だからみたいな感じ
で指摘してくれるので結構チーム の書き方の統制というのは結構
生きてるのかなっていう感じが しますね
ソナクラウドってスタイルガイド みたいなに反するところに似た
みたいな感じですよね 結構あれってカスタマイズとか
できるんですか できますねできます
結構やっぱりチームでいろんな 最近思ってるんですけどいろんな
人が入ってくるといろんな書き方 があるなって思って確かにプロジェクト
がだんだん長くなってくると過去 の履歴とかを見ているとその辺
が整ってないともう書き方めちゃ くちゃな話とかも結構あるかな
と思ってていったところだとやっぱり 一貫性を保つにはそういうスタイル
ガイドのリンターみたいなの入れる のってすごくいいですよね
AIではCIツールとかで導入してみて よかったやつはありますか
まず導入してよかったなと思った のはChromaticですねストーリーブック
みたいな形でコンポーネントとか のリフをいわゆるVRTみたいな形
で表示してくれるようなものなんです けど結構VRTって導入するの割と
めんどくさかったと思うんですけど Chromaticは本当にChromaticのユーザー
を追加してあとはCIでちょちょっと 書いてあげれば勝手に免許して
くれるんでVRTっていう面ではスタイル の違いとか見た目の違いとかっていう
のがすごくキャッチしやすくなった なっていうのが一つあるんでこれは
今後も導入していきたいなとは 思ってます
ちょっとまだ導入できてないんですけど 1個気になっているものがあって
What the diffって言われるやつで AIでプルリクエストのサマリとか
を出してくれるやつ例えばクリエイト リアクトアップとかでタイプスクリプト
のプレートリアクトアップのテンプレート を入れてそれでプルリクエスト
出すとそれをコードを勝手に読んで 推論してくれてプルリクエスト
のサマリを作ってくれるんですよ ねこれはリアクトJSというJavaScript
のフレームワークを使ってタイプ スクリプトで構成されたものです
みたいなところとかパッケージ として何点何バージョンのもの
入れてますみたいなこういうテンプレート を使ってますみたいなものをリスト
でプルリクエストのサマリを勝手 に作ってくれてそれだけじゃなくて
レビューもしてくれるんですよ レビューもしてくれる
レビューをしてもらうには多少 細かい指摘がしてきている指定
が必要なんですが例えばアローファンクション じゃないものを指摘してください
とかこのリントの設定にのっと ったレビューをしてくださいみたいな
形でちょっと原始的なところは あるんですけど結構AIが自動で
レビューしてくれるので人間の レビューの精度がより上がるという
かそういったところを見なくて すむのでこれはちょっと導入して
みたいなと思っているのとあと ギッターブの公式のほうでもAI
を使ったプルリクエストの生成 みたいなところを今ギッターブ
のリストで考えているみたいで それは非常に期待しているという
感じです もうAIがレビューも考えてしまう
時代になってきましたね そうですね AI事業本部なんでそれ
を活用していきたいところではあります 確かにPRのレビューとかってすごい
なんだかんだ構成がかかるんですよ ねといったところでおそらく最終
的には人間の目でまだ見る段階 なのかなと思うんですけどその
ここまでの先ほど話したみたいな リンターに違反しているような
とかそういったところの機械が やってくれると本当にすごく開発
スピードとかも高まっていいかな ってすごく期待大ですね
そうです確かに
CIの中でさっき話出ていたChromatic あれって確かPRもステイトで見て
てPRでアプローブされないとリリース できませんみたいなことも確か
にできましてね そういったことも可能なのでより
厳密な形で踏み込むことも可能 ですね今の段階では結構そこまでは
厳密にはしていないんですけど しっかりその辺のルールを整備
して例えばそこのレビューが通 らないとダメっていうふうにして
かつそのレビューを例えばデザイナー にやってもらうとかっていうふう
にするとデザイナーもコードレビュー じゃないですけどそのレビュー
にしっかり参加できるみたいな それがしっかり可視化されるみたいな
ところもフローとして確立できる ので非常に良いんじゃないかな
とは思ってます
デザイナーにレビューしてもらう っていうの新しいあれですよね
しかもあれ僕も触ったことあるん ですけどディファレンスとの違い
が緑色にハイライトされて結構 1ピクセル単位でも出てきます
よね
そうですねそこは結構VRTあるある ではあるんですけども例えば結構
よくあるのがフォントをカスタム フォントレブフォントを入れている
ときにフォントの読み込みが先に マウント前にスクリーンショット
取られちゃってそこでディフ出る みたいなのが結構あったりもするん
ですけどその辺りの細かい際とか はちょっとキャッチアップして
あげる必要があるんですけど結構 グロマティックも細かく設定が
できて例えばこの画面は対象外 にするとかこのファイルはイグノア
するみたいな設定もできるんで その辺りは結構細かくカスタマイズ
してプロジェクトに合わせてニーズ に合わせてやっていけばいいの
かなっていうところとあと1ピクセル 単位でもズレが本当にズレてる
のかスクリーンショットでも細かい 際レンダリングのタイミングとか
の問題なのかっていうところは 結構難しくてその辺りは結構割
とフロントエンドエンジニアの 知識の業務によるのかなという
ところがあってレビューで指摘 されてもこれは実はレンダリング
の問題でこういうことなので対応 しなくてもいいですっていうふう
にするのかそれとも実際マジで ズレてるのかっていうのは結構
レビュー受けた人のちゃんと技術 量によると思うんでそこはもう
みんなでレベルを上げていくしかない なと思ってます
そうなんですねでもなかなかまだ 便利だけども辛みがあるところ
そこはそうですねガチっと例えば スクリーンショットを撮るタイミング
とかがちゃんとディレイしてくれて ガチっとレンダリングしっかり
行ったタイミングでスクリーンショット 撮ってくれるとかってなったら
すごくいいんでしょうけど結構それも 難しいんだろうなと思います
確かにスピレーとかだとレンダー の前とかの状態が変化する前の
やつをスクリーンショット撮ったり とかする場所もね
そうですそうです
難しいところだCAMではこれから 導入したいツールみたいなのって
あったりします
そうですねVRTとかはあんまり話 とかは出ていかなくてそもそも
API通信とかのほうのユニットテスト とかのほうを今注力してやってる
ってところでさっきちょっと言 ったんですけどコード分割して
アーキテクチャ取り入れてテスト しやすい感じにしていて今はちょ
こちょこテストコードを書いて みてみんなでああだこうだ言ってる
っていうこんな書き方でいいのか みたいな感じでいろいろ検証して
いるという段階ではありますね なのでその辺のユニットテスト
系の知見とかがけっこうCAMでは 欲してる感じではありますね
ユニットテストで言うとフロント で有名なのはやっぱジェストとか
そうですねジェストとかですね 結構やっぱりジェストが多いですよね
あとは例えばリアクトを使ってるん だったらリアクトテスティング
ライブラリーがありますねもう あれですかねもうエンザインとか
シノンは使わないんですかね
でもMacとかでシノンとかは使いますよ ね
使ったりとかはしてますね特に API通信とかの系のテストとか書く
ときは多分結構使ったりとかしてます ね
いわゆるスパイツールみたいな ツールがありますね結構テスト
のところのツールを今入れてる というか
そうですね今取り組んでいるという 形ですね
面白そうですねワクワクしそうな 話すごい
そうですねツールとかいろいろ 入れてると思うんですけどそういう
CIとか通ってやっとリリースされて いく感じですよね
そうですねマップしてると思うん ですねあとCAMとかだとコード
とか新機能とかリリースコード 上のGitHubでメインにマージして
リリースみたいなのもあると思 うんですけどCAMだと他にもコンテンツ
のリリースみたいなのがあって コードは変わんないんですけど
編集者というか運用者がコンテンツ を投稿してそれがサイトに反映
されるみたいなリリースも結構 CAMでは多いんですけどそういった
ところにも結構CAMは力入れてまして 今CAMってアーティストファンサイト
とかあとは占いサイトとかも運用 してるんですけどそういうのって
結構サイトの見た目は変わんない けど新しい記事を投稿するとか
新しいリリース情報のニュース をリリースするとかそういうの
は結構多いんですけどそういった ところでそういうアーティスト
ファンサイトのアーティストの ほうのパートナー企業さんと連携
したりとかして公開情報とか例えば リリース情報だったりとかそう
いったところもちゃんとパートナー 企業と協力してメディア連携で
公開情報の日時とかちゃんとずれない ようにコンテンツが投稿できる
みたいなところをちゃんと担保 したりとかそういったところの
ビジネスサイトとの運用者の信頼 できるようなシステムを今作って
いてコンテンツのリリースも安心 して運用者ができるっていうもの
を開発したりとかはしてますね 予約投稿だったりとか時間にセンシティブ
なんで予約投稿とかできるように したりとかそういうのをやって
ますね そういうところって予約 投稿とかお客様のロイヤリティ
に関わってくるようなところって やっぱり技術力が高くあるべき
であってなかなか難しいところ かと思うんですけど
そこの難しさっていうところに 注力してるっていうのがCAMの特徴
では一つあるかなっていうふう に思ってますね
CAMのレベルがあるからこそできる ようなものですね
そうですね 運用者が触るって ことで管理画面とかも大体作る
と思うんですけど CAMで今OSSで出 してるバイロンっていうツール
があるんですけど それってフロントエンド ほとんどローコードで管理画面
が簡単に作れるみたいなのを売り にしているOSSでもしよかったら
検索してみてほしいんですけど それ結構どのサービスでも使って
て運用者がそのバイロンで作った 管理画面を使っていろいろコンテンツ
を導入したりとか投稿したり とかもできるっていう形になって
ます
なるほど 今度検索してみてください
バイロン
そうです AIのほうでもバイロン 調べさせていただいたんですけど
非常に完成度が高いですよね 横展開で導入してみようかなっていう
話がちょっと出てるぐらい非常 に素晴らしいツールでした
そんなに
もう帰ったら早速検索してみます 次お願いします
なるほど
リリースとかいろいろある中で 結構リリース特にお客様に対して
出してるものとかって品質担保 って大切かなと思っててそれを
担保するために要は間違ったもの を出してしまうとインシデント
になってしまうじゃないですか それを未然に防ぐためにちょっと
注力してる仕組みとかってあります か
そうですね そもそも事故とかって あんま起こしちゃいけないこと
なんでまずそれを起こさないように するっていうのも一つでそれために
もちろんCIとかCDとかでちゃんと リリースをやっているっていう
ところは一つちゃんとあります 例えば気づかずにそういうことが
起こってしまった時に大きな事故 にならないように未然に防ぐっていう
方法としては検知に力を入れてる っていうところでステータス
ケークとかでサイトが落ちてない かとか確認したりとかデータドック
とかで監視してリソースとかも 監視して通信とかも監視して異常
がないかっていうのは常に見ている って感じで何か異常があったら
スラッグが飛んできたりとか関係者 に連絡が行ったりとかっていう
のもやってますね フロントエンド の話でいうとTypeScriptとか使って
てもJSに置き換えたときに気づかない ようなバグみたいなのはバグスナック
とか入れて事前にデブ環境やステージ の環境で気づけるようにとかそう
いったところツールもうまく使って 未然に防ぐっていうのは取り組んでいる
ことではありますね 結構ツールとか入れて未然に
防ぐようなことを力入れてる感じ なんですね AI事業本部ではどの
ようなことをやってることありますか AI事業本部のほうでもデータドック
によるログの監視っていうのは 常々行っていてそれこそエンドユーザー
のほうにリリースしているシステム が落ちてしまうっていうのは本当に
インシデントになってしまうので そこの敷地をかなり高くしている
というかリソースに関しても50% 以上使ってるようだったらすぐ
にアラートを飛ばすようにする とかそういった厳重な体制で監視
をしているようにはしているっていう のとあとは一番やっちゃいけない
のがエンドユーザー側にご迷惑 をおかけすることだと思っている
のでメンテナンスモードとかそう いったところにすぐ切り替えられる
ような設計にしている例えばフラグ を一つ切り替えたらすぐにメンテナンス
モードになるようなデプロイを しなくてもメンテナンスモード
をすぐにフラグを切り替えれば すぐに切り替えられるような状態
にしてあったりとかあとはそれでも どうしても万が一っていうこと
はあるかもしれないんですけども そういったときのためにちゃんと
体制を敷くようにはしていてそこ にもツールを導入しています今
導入したいのがGraphana On Callっていう ものを導入していてもし万が一
何か起きた際はすぐにチーム メンバーに連打が来るような厳重
な監視体制を敷いているという 形で2030にしっかり対策を取って
いるという感じです なるほど何か起きたときにでも
すぐ反応してアクションを取って いけるような仕組みを取っている
感じなんですね もちろんまず大前提として起こ
さないことっていうのを意識を していてそれでも世の中に100%
っていうのはないので万が一起き てしまったときっていうのを対策
するのがエンジニアの仕事だと思 っているのでそこに対してもしっかり
対策を入れているという感じです 確かに起きないことが一番です
面白いです
今日いろいろリリースについて お話聞いて本当にいろんなリリース
までにステップ踏んでツールとか で改善したりとか品質を担保する
とかそういうようなステップを 踏んでようやくプロダクトが世の中
にリリースされているしかもその ステップによってクオリティも
ちゃんと担保されているっていう なかなか深い泥臭い話が聞いたん
じゃないかなと思っていて本当に 僕自身も楽しかったですね
お二人もちょっと感想を聞きたい なと思うんですけども今日本日
改めて自分の事業部をやっている ことを話してみてどういう感想
をお持ちになったりとかします か
エア事業本部はCAMと近い感じかな とは思っていて大きなサービス
を一つ運用しているというのではなく いろんなサービスがあってそれを
作ったりとかシリーズを作ったり とかしていると思うので結構共有
としては似ているなというところ があってそういったところで今後
しっかり共有とかもできてきたら いいなとか思ったりとかツール
の話とかも結構出てきたんですけど 僕もまだまだ知らないのが結構
あったんでそういったのをキャッチ アップしてみて実際に導入して
みたりとかそういったのもやって いきたいなと思ったのですごい
参考になったなというのが一つ 感想としてはありましたね
僕もCAMのほうでやっている技術 のフローだったりとか特にコンテンツ
の技術についての力の入れ具合 とかっていうのがあっていろんな
事業部でいろんな考え方があるん だなっていうのがまず一つ知れた
のがすごいよかったなっていう のとやっぱり先ほどお申し上げ
られてましたけどいろんなサービス をリリースしているからこその
気をつけ方みたいなのがそこの 共通認識があってやっぱりみんな
同じくらいしっかり気をつけて るんだなっていうのがあってそこ
はチームサイバーエージェント というかしっかり品質に対して
の考え方っていうのはどこもサイバー エージェントの一律で変わってない
んだなっていうのがすごい安心 感がありましたこれからもスピード
感を持った開発っていうのは当然 続けていくんですけど同時に同じ
くらい品質っていうのも大事に しながら開発を続けていこうかな
と思いました 確かに確かにサイバーエージェント
のエンジニアとして品質スピード すべてを担保しながら
そうですね 今回の話もいろんなツールの
名前とか出てきたと思うんですけど 僕も知らないのいっぱいありました
し自分のところでもどんどん入れ ていきたいなと思いますね
はいでは本日いろんな話できて 本当に楽しかったですなので今日は
これで終わりにしたいと思います 本日はお越しいただいてありがとうございました
聞いている皆さんもまた次回よろしくお願いします それではバイバイ
バイバイ

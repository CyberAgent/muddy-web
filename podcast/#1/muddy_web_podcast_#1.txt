マディウェブポッドキャストは、マディの意味が泥であるようにウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、
実際に明日から使えるかもしれないウェブフロントエンド知識や技術を参加者の皆様と共有し合うことを通して、フロントエンド界隈への役に立てるように思いを込めて発信しています。
それでは記念すべき第1回マディウェブポッドキャストを始めます。
ファシリテーターを務めます、株式会社資力エンジニア石井由紀と申します。
記念すべき第1回のトピックは、事業別プロダクトのリリースについてです。
まずはじめに、ちょっと軽く自己紹介から始めていきましょう。
まず、株式会社ウィンチケットの竹内さんからよろしくお願いします。
はい、竹内実之と申します。
そうですね、社内ではドラと呼ばれていることが多いです。
2021年度の新卒として入社して、前代株式会社ウィンチケットで競輪やオートレースの投票サービスを行うウィンチケットというサービスを開発しております。
はい、ありがとうございます。
では次は株式会社安倍真TPから野口さんお願いします。
はい、野口忠弘と申します。
2018年に新卒で入社しまして、そこからずっと安倍までウェブエンジニアをしています。
最近は安倍真のテックリードとして技術戦略などを考えたりしています。
一応安倍真についても紹介しておきますと、新しい未来のテレビということでテレビ放送とビデオオンデマンド視聴のハイブリッドサービスという形になっています。
9月20日からはワールドカップを放送予定ですので、ぜひよろしくお願いいたします。
はい、ありがとうございます。ワールドカップ近いですね、本当に。
そうですね、あと少しということで開発の方も盛り上がっております。
いろいろ聞いていきましょう。
では次は株式会社シロク、開発広太郎さんお願いします。
株式会社シロクのエンジニアの開発広太郎です。
自分もECと同じく22年度の新卒です。
シロクはサイバーエージェントの中で数少ないEC事業であるN-Organicというスキンケアブランドをやっています。
はい、ありがとうございます。
本日のトピックが事業別のプロダクトのリリース頻度についてなんですけども、本当に雑談形式で話していくので緊張せずに落ち着いた雰囲気でお笑いもありで話していきましょう。
では早速ですけども、多分事業別で栽培人といろんな事業が大きさとかリリースの速度とかも全然違うと思うんですけども、
その1回のリリースの大きさって他の事業部の方すごい気になると思ってるんですよね。
なのでちょっとその辺りを聞いていきたいと思うんですけども、デカいといえば株式会社、あればTV。どうなんですかね、野口さん。
そうですね、1回のリリースの大きさは結構あべまま大きくてですね、多分開局当初の時からあまり変わらずにずっと来てしまっているというところも大きいのかなと思うんですけれども、
そのところ2週間に1回のリリースという形になっていまして、リリースの頻度もそんなに近くはないので、その分1回の大きさも大きいという形になっていまして、
ジラのチケットで言うと大体6から10個ぐらい。コミット数もちょっと調べてきたんですけれども、大体1回につき400コミットぐらいから多い時だと900コミットぐらい一気にリリースするみたいな結構ビッグバンリリースという形にはなってますね。
すごいですね。ビッグバンリリース初めて聞きました。
そうなんですね、やっぱりでかいプロダクトとなるとそれぐらいの大きさになってくるんですね。株式会社ウィンチケットリリースの大きさってどれぐらいになっているんですかね?
そうですね、あべままとは違って、割と固定でスキジュールを決めているというよりかは、1つは施策ベースでリリース日が決まっているものがあって、この日に出したいからリリースするというのが1つと、
あともう1つ、そういうのがない場合にでも差分はこう溜まっていくので、ある程度差分が溜まってきたのでそろそろ出したいねっていうタイミングで割とラフに決めてはいるんですけど、そうですね、プルリクの数でいうと10個から20個ぐらいが多いかなという印象ですね。
結構決まってないんですね、ラフに出したい時に出すみたいな感じ。
なので逆に施策のリリース日とかもあまりそこのリリースタイミングに縛られないというか、逆に施策がここに出したいからここまでにリリース作業するみたいな感じで決めたりとかしてますね。
それなかなかいいですね。うちだと2週間に1回だと1ヶ月に2回しか出さないので、次のリリースはこの日だからみたいな形で結構大変なんですよね。
確かに、実装が3日伸びただけで次のリリースに載せなきゃとかなっちゃったりしますもんね。
リリースごとにデッドラインがあるみたいな形なんですね。
そうですね、あればだとそんな形ですね。
すごい難しい。そのリリースのタイミングっていうのは誰が決めるとかってあるんですか?
インチケットの場合だとあまりなくて、基本的に施策ごとに実装担当がついてるんですけれども、実装担当に主に考えて決めてもらうみたいな感じで、チームで合意が取れれば特に問題がないっていう感じで進めてますね。
なるほど。そのチームごとにリリースの日を決めて、この日リリースしますよってことを他のチームに伝えている。
そのタイミングで、例えば他の施策で今デブ環境のものをそのまま出すとまずいみたいなことはもちろんあるので、
あらかじめそこは共有しておいて、それまでにデブ環境だけで見えるようにするとか、そういう処置は必要だったりはするんですけれども、その共有ができてれば基本的に好きなタイミングでリリースできるっていう感じですね。
なるほど。じゃあチームごとがデブ環境にどんどんデプロイしていって、まとめてプロダクションに出すという形なんですね。
なるほど。すごい面白いですね。株式会社Sirokは、僕は勤めてるからなんですけども、リリース頻度を毎日してるっていうことなんですけども、実際のところどうなんですかね?
そうですね。Sirokは開発の人数が少なくて、プロダクトのAbeMaTVとかと比べると小規模なこともあって、リリースの頻度はめちゃめちゃ多いです。
で、だいたいどれくらいかっていうと、エンジニア全員が毎日1回はリリースしているくらいの量でした。
確かに。今日ちなみに何回リリースしましたか?
自分は今日は1回リリースしています。
ちなみに僕は今日3回リリースしています。
すごい。そうなんですよね。
すごい。
Sirokはすごいリリースできたらもうプロダクションに上げてしまうっていう形をきいています。
そうです。さっきWinTicketとかAbeMaTVの話を聞いていて思ったのは、いわゆるそのフィーチャーブランチからステージングとかデブブランチにマージしていって、それがまとまったタイミングでプロダクションに上げるみたいな感じだと思うんですけど、
Sirokの場合はそうではなくて、フィーチャーブランチを直接プロダクションのブランチにマージしていってるので、このようなスピード感になっているのかなと思っています。
そうすると、いわゆるトランクベース開発みたいなプロダクションのブランチにマージされたら、それがそのままデプロイされるみたいな形っていうことですかね。
そうですね。
なるほど。それでいうと逆にうちも基本はメインブランチ1本ではあるんですけど、メインブランチがデブには勝手にデプロイはされるんですけど、
どうしてもやっぱりプロダクションにそのまま出すってなると、うまくフラグで出せればいいんですけど、そうじゃないやつとかはどうしてもメインにはマージされてるけど、本番には今リリースしちゃまずい期間みたいなのがどうしてもらえてしまうので、
そこでちょっとタイミングをうまく測る必要があるみたいな感じになってますね。
確かにステージングで動かないのにプロダクションでリリースされてる。
そうですね。
ちなみにアベマTVとかの環境の中にいるときに株式会社主力のようなスピードの中の状況を聞いて、野口さん実際どう思いましたか?
そこで一番気になったのはQAとかをどうしてるのかなっていうところが結構気になっていて、というのもアベマがこんなに時間がかかっていることの一つの原因として、
結構QAに時間がかかっているっていうのがあるんですよね。
QAのやり方が昨日ごとのQAにできていなくて、全部集めて、それを全てQAしてから出すみたいな形になっているっていうのもあるんですけども、
そのQAやるのに大体1週間くらいかかるみたいな、手動のQAを行っているので、そこで1週間くらいかかって、全てオールグリーになったので出しますみたいな形にはなっているっていうところがあって、
トランクベースみたいなところに行くときに一番障壁になっているのが、あそこのQAどうするのかっていうところなんですよね。
その辺をどうやってるのかなっていうのが結構気になりました。
実際どうでしょう?
シロックではもちろんQAはやっていて、具体的にはステージング環境でリリース前にエンジニアとか施策担当者、いわゆる総合職の人と一緒にするっていう感じになっています。
さっきその機能全体を通してQAは正直できていなくて、リリースした後に問題があった場合に早期検知するみたいな方向で考えている部分が大きいと思います。
なるほどですね。
株式会社WinTicketはQAのところをどういうふうに行っていますか?
QAは施策単位でQCを一手で行っていて、施策ごとにQCが進行しているんですけど、
例えば1個の施策がQC進行していて、もう1個の施策が終わっていて出したいというときに、そこは特に依存していないので、先に終わったものから出すことが可能なので、施策ベースでこれは出せる、これはまだ出せないみたいな感じで決まっている感じですね。
なるほど。
QAが通ったらどんどん出していく?
そうですね。
本当にいろんな部署で違うやり方をしていて、聞いているだけで面白いですね。
QAといえば、よくCI、CD最近すごい流行っていますけども、フロントエンドのあたりでテストとかってどのように行っていますか?
それは自動テストみたいな感じですか?
そうですね。自動テストで、最近入りのジェストだとか、テスティングライブラリとかリアクトが出ているかと思うんですけども、
例えば株式会社アベマTVの方では、テストはガッツリ書いているんでしょうか?
それなりに書いているみたいな感じですね。
正直なところ完璧なテストみたいのはできていなくて、単体テストみたいな形でテストをいっぱい書いてはいるんですけれども、
ロジックの部分でテストがやりづらいような、実装になってしまっているところとかも古いコードの部分に結構あって、
そのあたりの部分をいらないといけなくなったときに、テストがないのでそのままバグが起きるみたいなこととかもあったりなかったりという感じですかね。
あと、逸位テストとかも結構あったりすると思うんですけれども、今のところは逸位テストを取り組めていなくて、
今ちょうど逸位テストを整備するみたいなところのプロジェクトが動いているところではあるんですけれども、
そこの部分を人手で頑張っているみたいなところが正直あるかなという感じですね。
そうなんですね。逸位テストは結構コストがかかるものですけど、でも将来的には入れていくという方針ですね。
そうですね。やはりそこの人手のQAのコストが結構大きいので、逸位テストでそこを軽減していくみたいなところを考えているという感じです。
なるほどですね。逸位テストを導入するにあたって難しい問題とかってありますか?
いかに信頼性が高いというか、なかなかこけたりこけなかったりみたいな。
逸位テストがフリーキーになりがちですね。
フリーキーなテストになってしまうとやはり難しいので、そこをいかになくしていくかというところと、
あとはやはり運用部分というかメンテナンスしていく部分が難しかったりするので、そこをどのようにやっていくかというところが難しいかなという気はしてますね。
ウェンチケット最近、逸位テスト導入しようというところで動いている話を聞いたことあります。
そうなんですね。ぜひお聞かせしていただきたいんですけども。
ウェンチケットもさっきお話ししたように、人手によるQCとかがメインになってきてたので、特にライブラリのバージョンアップ、例えばリラクトとか、
他だとNode.jsとかよくあると思うんですけど、そこらへんのバージョンアップをしたいってなったときに、どうしても一度投資のQCをする方が確実ということでやってはいるんですけど、
やっぱり5日間とかかかる上に、気軽にできないというところがありまして、投資のE2Eをもうちょっと自動化したいみたいなところは同じくモチベートしてあって、
ちょっとそこを今、具体的な手法とかを検討したりというところですね。
それはすでに導入し始めているということですか?一部では。
いや、まだちょうどどうシナリオを、例えば今人手でやっている部分をどこまで自動化できるのかとかがあって、
例えばウェンチケットの場合だとチャージの手段がいっぱいあって、デブ環境で簡単にテストで通せる手段と、
ちょっと人手で提携先の企業さんからいただいているデブ環境の設定とかを参照しながらじゃないとできないテストとかもあったりするので、
そこらへんをどこまでできるかとか、シナリオの運用とかを今ちょうど考えたりしているフェーズですね。
そうなんですね。結構話を聞く限り手でテストするということですけども、
コースって結構かかるかと思うんですけども、実際どれぐらいのコースかかっていましたか?
先ほどお話ししたように、一通りウェンチケットの場合だと投票とか、チャージ、登録とか、そこらへんのコアな部分とかを行う投資テストと呼ばれる投資の休止に関しては、
だいたいご営業日とか1週間前後で行うことができるんですけど、ただそこのラインが複数走れるわけではないので、
例えば別の施策がすでに進行中で予定が落ちたりすると、例えば投資テストできるのが1ヶ月先になりますとかは割とあるので、
そうなるとバージョンアップするの大変だなって正直になりますね。
大変ですね。
すごいかかって、しかも待たせてしまうということで、それが自動化になるともう1日で終わるような感じですか?
全部できなくても、例えば半分は自動化でパパッと終わって、残りの2日、3日とかで人でしかできない部分をやるとかは可能かなとは考えていますね。
早く自動化にしたいですね。
株式会社シロクでは開発速度、リリース速度は早いということですけども、テストの周りって速度に合わせて毎回書いているんですか?
そうですね。正直そんなに自分たちもテストを書けていなくて、よくあるランディングページからの購入みたいな、
ユーザーストーリーの中でコアになる部分だけはフロントの単体テストも言い継いテストもあるんですけど、全体としてあるわけではないです。
やっぱり結構コアなところにテストを書いていく。
そうですね。
聞いているとどこの授業部もテストを書くのがなかなかコアになっているようなんですね。
そうですね。あとうちで言うと割と最近できたプロダクトであるので、最初からVRTと呼ばれるビジュアルリグレッションテストを全面的に導入しているのが結構いいポイントかなと思っていて、
最初からストーリーをキャプチャするものとしてストーリーを書いているので、ちゃんとバリエーションを用意してキャプチャして差分がわかるようになっているという状態が保てているのが結構良いところかなと思っていますね。
コンポーネント駆動開発で行っている。
そうですね。ただ逆にVRTって結構画像で比較するので、ダイアログ系とか一部のコンポーネントで変な差分がそれこそフリーキーなテストになってしまう部分はあるので、そこら辺のメンテがちょっと難しいみたいなのはあるんですけど、やっぱりビジュアル系のリファクターとか行うときとかにすごい威力を発揮するなというのは感じていますね。
そうですよね。結構ツールとしてはChromaticとかフロントエンドのテスティングツールがあるんですけども、あれ僕も使ったことあるんですけども、予想外のところでそれを出してくれるので意外とバグを検知できるということで、ただ導入も結構厳しいですよね。
特に後からやるってやると本当に大変だと思う。
それでいうと後から導入したのがAbeまで。もともとスナップショットテストが大量にあったんですけれども、スナップショットテストはご存知の通りあまりよくわからないというか、差分が出てもこれが正しい差分なのかそうじゃないのかいまいちよくわからなくて、なんか差分出てるけどこれでよしみたいな感じでアプローブするみたいな感じが続いてはいたので、スナップショットテストはやめて全部VRTに移行しましょうということで、基本的にはコンポーネント全部VRTに移行し終わったっていう感じではあるんですけども。
そこの変換というか変えていくところも結構大変だったのと、やっぱり物量が単純に多いので、そこがなかなか大変だったなっていうところと、あとやはりフレーキになりやすいというところはまさしくAbeまでも存在していて、
例えばサムネイルの画像とかがもともとそのデブ環境に存在している画像とかを使ってたんですけども、なんかそのキャプチャーの時の画質の違いなのかどうかわからないんですけど、そこで毎回差分が出るみたいなのとか結構あって、
今はVRTの時はデータイメージで自動生成するプレースフォルダーっぽい感じのやつに置き換えたりとか、いろいろやってはいるんですけども、やはりなんかフレーキテストが残ってますね。なので毎回ちょっと5つか6つくらい差分が出るので、これは大丈夫な差分みたいな感じになってますね。
とりあえずアップルーブしとくみたいな感じになるんですね。
話がフレーキなんですね。
うちもなんか画像はそういうデータを置き換えてて、前はダミーの写真を使ってたんですけど、そうするとやっぱり圧縮とかの差分が出やすいので、基本画像の中身自体が見なくていいものに関しては単色のベタ塗りの画像だけに置き換えてしまってとかやっていますね。
もうテスト用でその画像を用意するみたいな感じですね。
そういう工夫があり得られですね。
そうですね。なんか模様というか普通の写真だと謎の差分が出るんですよね。
確かにピクセルタイのカラーとかも見てますからね。
先ほどAbebaTVの話で全部移行したっていう話をしましたけども、あれだけの大きいプロダクトでの移行って結構時間かかったと思うんですけども、どれくらいかかりましたか?
大体半年くらいかかったと思いますね。1人それを担当してくださっていたメンバーの人がいて、その人がちょっとずつ移行していきつつっていう感じではあったんですが、やはりなかなか時間はかかったなという感じですね。
ただその間もスナップショットテストは存在していたので、テストの印数が落ちているみたいなところはなかったんですけども、完全にそのスナップショットからVRTに移行していくっていう感じではあったので。
なるほどですね。ありがとうございます。
テストもそうですけども、試合の中ではやっぱり一番、といえばビルドタイムなんですけども、
ビルドタイム、株式会社主力で結構かかっているっていう話を聞いたことがあって、
自分たちはフロントエンドのビルドが遅い問題をずっと抱えています。
どれくらいかかるんですか?
どれくらいかかっているのかな?
この前見たときは、フロントビルドは20分くらいかかっていましたね。
結構僕も気になるトピックで、他のところの事業部がフロントのビルドってどれくらいを目指しているのかなっていうのをお聞きしたいんですけども、
ウィンチケットとかってどうですか?
そうですね。ウィンチケットの場合だと、だいたいビルドをするのが5分前後くらい。
なので、10分もかからずに試合場でビルドできたかできなかったのに結果は帰ってくるみたいな感じではありますね。
ちなみに、コンパイラーとかって何を使っていますか?ビルダーとか。
そこで言うと、あまり最新の何かを使っているというわけではなくて、割と素直にWebpackとかBabelを使ってビルドをしていて、
やっていることで言うと、サークルCIで不合的にどこかの性能が高いランナーを使ってバウンしているみたいなところはあるんですけども、どれくらいですかね。
やっぱり性能のいいマシンを使っているのかな?
そうですね。ただやっぱりちゃんと使い切る工夫が必要なので、スレッドローダーでサークルCIのマシンスペックに合わせたスレッドを立てて回すようにとか、そういう工夫はちょっと必要だったりはしますね。
それってちなみに昔からそういう工夫をされてきたんですかね?
いや、スレッドローダーとかはわりかし直近ここ1、2年ぐらいのところで入れたところで、そこでサークルCIのスペックとかもいくつか試しながら、どれを使うと短くなるとかは検証しつつ今のところに落ち着いたという感じですね。
なるほど。ちなみにこれからもどんどんビルド速度を上げていく予定はありますか?
そうですね。それでいうと、直近そのウェブのインフラ周りをこの間刷新しまして、そのタイミングでドッカーイメージのドッカーファイルを書き直すみたいなことをして、以前は結構キャッシュが丸ごとコピーをしたりしていて、キャッシュが効きづらい形になっていたんですけれども、そちらをよりレイヤーキャッシュが効く形にしたりしたので、CI上でPRでビルドするビルド時間はそんなに変わってないんですけど、デプロイ時のビルド時間っていうのが結構短くなったかなっていう感じですね。
なるほど。工夫されてるんですね。アベマTVではやっぱりプロダクトがでかいからビルド時間も長いっていう印象があるんですけども、その辺はどうでしょうか?
そうですね。ビルドだけに限るならば、本当にメイクファイル使ってるんですが、メイクビルドするところだけに限るなら、CI上だと2分半とか3分くらいで終わる感じですね。
それも普通にルーバック使ってビルドはしてるんですけども、という感じですね。ただCI全体で言うともちょっとやはり時間はかかるところはあって、
依存パッケージのインストールのところに結構時間かかったりとか、リントとか、それこそストーリーブックのところであるとか、いろいろ時間がかかるところはあるので、全部が3分で、全体が3分で終わるわけではないんですけども、ビルド自体はそのぐらいっていう感じですね。
なるほど。ビルドは3分。やっぱり全体となっていくと各工程の時間も加算されていって、ポータルで言うと結構時間かかるんですか?
デプロイの時のCIの時間で言うと、大体20分くらいかかっているっていうところはあって、時間がかかるフェーズとしては、クリティカルCSSの抽出っていうところを安部真はやっていまして、
どういうものかと言いますと、ページを表示するときにそこのブラウザーの一番最初に表示される面に必要なCSSだけを抜き出してきて、
それをHTMLにそのまま埋め込むっていう形にすると、CSSのロードを待たないでそこの部分だけ利用ができるっていう形になるので、その分パフォーマンス的に早いっていうテクニックがあるんですけども、
ただクリティカルCSSを抽出するためには、もちろん実際にCIの中でChromeを動かしてキャプチャをして、そこの上に必要なCSSを抜き出すみたいな処理が必要になってくるので、
ビルドをして中でローカル関係を立ち上げてアクセスしにいってみたいなことを全部やらないといけないので、そこに結構時間がかかったりとか、
あとはそのドッカーイメージを作成してGCTのレジストリにアップロードしたりみたいなところも行ったりしてるんですけれども、そこらへんに結構時間がかかってるような印象ですね。
なるほど。やっぱりWebTVでもそれなりのすごい苦労していて、今の時間があるというね。
そうですね。結構CIのキャッシュを使うにはどうしたらいいだろうかとか、列で実行するにはどうしたらいいだろうかとか、
いろいろ工夫しつつ、なかなか時間が減らないみたいな感じですね。
確かに、ビルドのデプロイ時間は一生の目標というか、戦うべきところというか。
ちなみにリリースの時って気をつけていることとかってありますかね?
例えば、リリース終末やらないとかっていうところが多いかと思うんですけども、株式会社シロックでは何か気をつけていることってありますか?
そうですね。シロックはやっぱり異質な点としてリリースが毎日みんなやってるみたいな点があると思うので、
終末はずらすっていうのはできるだけ意識してはいますが、金曜日も午前とかは全然リリースが行われている感じです。
怖いですね。
怖い。そうですね。
ちなみにそれでもしエラーが出た時とかってどう対処していますか?
シロックの場合だとフロントエンドもリアクションのモノリコの中に組み込まれている形なので、
リリースしたものがやばいということが緊急でわかった場合ですと、
AWSのECSのイメージを一つ前のやつに戻すみたいなので対応したりしています。
出して確認してみたら戻す?
そうですね。あんまりいいパターンではないと思うんですけど。
その場合ってバックエンドレールズでしたっけ?レールズとかも含めたイメージのバージョンを戻すみたいな感じであるんですか?
そうですね。
なるほど。
もう一個リリースしたものをまるごとこそっと戻すようになるんですね。
なるほど。
それでいうと先ほどQAとかにコストをかけるのもどちらかというと出した後の検知をメインで行っているみたいな話があったかと思うんですけれども、
例えば金曜日の午後とか、土曜日とかもあると思うんですが、その辺り検知ってどういうふうに実際行ってたりするんですか?
検知の仕組みとしては、イシーが中心で今進めてくれているんですけど、セントリーであったりページャドリティであったり不正なエラーをハンドリングするための仕組みが複数入っていたりですかね。
例えばECサイトという特性上、お客様からCS、そのカスタマーサクセスの方への連絡とかも多いので、CSさんからの連絡で判明するみたいなパターンも多分他のサービスよりは多いと思います。
そうですね。
この前導入、最近してるんですけども、セントリーとか入れてエラーが発生したら通知して、それを確認していくという形で、
セントリーだとリリースタグとか付けられるので、
そうですね。
どのリリースでエラーが出ているとか検知して、すごく便利なんですよね。
セントリー、結構インチケとかも入れていると思うんですけども、割とノイズが多いというか、
そうですね。
そこが難しそうだなと思うんですけど、そこを検知、利用しているというところでどういうふうに設定しているみたいなのってあったりしますか。
難しいんですけども、そこは見て、ノイズであればイグノアするみたいな形で今やっています。
やっぱりそこはですね、ちゃんと定期的にさばいていかないとどんどん溜まっていっちゃってノイズだらけになりますよね。
そうなんですよ。
なので今チームスクラムとか作って、エラーを誰か一人が見ていくみたいな形になっているんですよね。
ちなみに、AbeMaTVの方だとリリースするときに気をつけていることとかありますか。
同じような形ですけども、基本的に2週間に1回というのが水曜日に固定されているので、
そのときにリリースするだけという形ではあるんですが、それもなるべく早い時間というか、
午後とかに置いてたりするんですけど、午後1時とかにリリースしたりみたいなのとか、
ホットピックスという形で定常外リリースを出すときもあるんですが、それもなるべく週末は避けようとかはもちろんあったりはしますね。
緊急で出さないといけないバグがあったときは例外ですけども。
緊急はそうですね、今すぐ出したりしますね。
最近そこのフローとかも結構整えられてきていて、
レジャーデューティーを使ってオールームをスラップで立てて、そこに関係者の人が集合して修正をしていってとか、
もしお知らせとかをユーザーに出さないといけないみたいなことがあったら、
そこのビジネス側の方の人と連携してとか、そういった形で一斉に集まって対応するみたいなところのフローが結構整ってきているかなという感じですね。
なるほど。じゃあそのインシデントが起きたときのフローもしっかり固めていると。
そうですね。
すごいですね。
ウィンチケットの方では同じようにリリースするときに気をつけていることってありますか?
そうですね。週末とか例えば定時の終わり、就業間際とかは避けるっていうのはよくあると思うんですけど、
特に就業間際は避けるっていうのももちろんありますし、
ウィンチケットの場合だと毎晩、特に8時半からミットナイト競輪っていうのがありまして、
これはアベマの番組で取り上げて放送を行っているので、
特にそこで障害は起こしたくはないっていうところはあったので、
もともと夜なのであまりそのタイミングにかぶることはないんですけれども、
そこは意識して避けようっていう感じではありますね。
なるほど。
やはり同じように週末を避けてピークのタイムは起こさないということで、
そうすると結構溜まったものが週頭にまとめてリリースみたいな形になると思うんですけども、
そういったところでそのリリースがもし週末にエラーとかが発覚してしまったときも、
アベマTVみたいにインシデントのワークフローっていうのは組んでるんですかね。
そうですね。
基本的にそのリリース後とかはグラファナでバッシュボードを作っているので、
そのラッシュボードとかでメトリクスを注視して、
例えば500エラーが増えてないかとか、そこら辺を見たりとかセントリーも見たりとかするんですけれども、
それで問題があるってなったら、あまり時間とか関係なく必要なホットフィックスはどんどんやっていくっていう感じではありますね。
なるほど。結構そういうホットフィックスとかも監視してやっているということですね。
ちなみにやっていく中で苦労していることとかってありますか。
そうですね。苦労していることで言うと、
先ほど話したセントリーについてあまり現状ちゃんと運用ができていない部分はどうしてもあって、
エラーがノティファイで流れてはくるんですけれども、一々をちゃんと精査してイグノアしたりとか修正を行ったりっていうのは全部はできていないので、
これよく見るけどまた流れてきたやつだなみたいなのがどうしてもあるところがあるので、
ちょうど最近改善していきたいというところではありますね。
再発は結構ありますね。またこいつかみたいな感じで。
なかなか狼少年じゃないですけど、嘘つきが出てきて。
うちも結構それで苦労しているんですよね。何かいい方法とかあるんですかね。
そうですね。
結構やっぱり人をそこに咲いてこう見ていくとかよく見るんですけど。
毎週とかどっかのタイミングで定期的にしょっちゅうしていく仕組みができればいいのかなとかちょっと思ったりはしてますけど、なかなか難しいですよね。
あとはあれですよね。ブラウザー側が勝手に送ってくるものに関しては仕方ないんですけれども、
いかにアプリケーションコードの中でエラーハンドリングを適切にしていくかっていうところが、
必要ないけれども送られてしまうみたいなエラーを減らしていくことに繋がっていくのかなとは思っていて、
それが適切にユーザー側にリカバーできるような回復可能なエラーなのであれば、そもそも先取りに送る必要ないよねとか、いろいろあると思うんですよね。
なのでそこをしっかりやっていくことっていうのが大事であり一番難しいところだなって。
そうですね。エラー系は思ったりします。
そうですね。確かに必要のないエラーを送るっていうのはあるかと思うんですよ。
うちも例えばIDで検索してなかったっていうエラーハンドリングを先取りに送っていたりだとか、本当に必要ないやつ今整理してるんですけども、
そうやっていく中でやっぱりモニタリングの中とか改善していくやっぱりそういうやり方になるかなっていうのはあります。
そうですね。なんか送信回数が課金対象になってるからどんどん無駄なエラーを送ってくると、そこのクレジットもどんどん消費していきますもんね。
確かに。そうなんですよね。無駄でだんどん圧迫して実際に大切なエラーのアラートっていうのは見逃してしまったりとかっていうのがあるとやっぱり危ないですよね。
ではそろそろお時間なので、本日みなさん初めて1回目のマリウェブポッドキャストということでしたけども、感想の方どうでしたでしょうか。
たくさんの方からお願いします。
そうですね。結構リリースの頻度とか量とか表面的なところはグローダクトによって違うなって印象があったんですけども、
抱えている悩みとか本質的な部分は結構どこも共通しているなっていうのを改めてちょっと感じて、すごい面白い時間でした。ありがとうございました。
ありがとうございます。
アベマはやはりずっと昔から同じリリースの手順になってしまっているっていうところがあって、他のプロダクトが割と高頻度にリリースをしていたので、もっと改善していかないとなというふうに思いました。
そうですね。N-Organicはやっぱり他の2つのサービスと比べると、特にフロントエンドの規模は小さいので、これからもっと盛り上げていきたいなと思いました。
そうですね。僕自身も他の授業部がいろんな、どういうふうにデプロイしているかっていうのがすごい気になっていたところで参考になりますし、これを聞いているウェブフロントまたバックエンドの人たちもすごい参考になるかと思って良い収録ができたと思います。
本日は本当にありがとうございました。
ありがとうございました。

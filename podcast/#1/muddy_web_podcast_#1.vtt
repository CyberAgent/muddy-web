WEBVTT

00:00.000 --> 00:11.000
マディウェブポッドキャストは、マディの意味が泥であるようにウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、

00:11.000 --> 00:24.000
実際に明日から使えるかもしれないウェブフロントエンド知識や技術を参加者の皆様と共有し合うことを通して、フロントエンド界隈への役に立てるように思いを込めて発信しています。

00:25.000 --> 00:29.000
それでは記念すべき第1回マディウェブポッドキャストを始めます。

00:29.000 --> 00:34.000
ファシリテーターを務めます、株式会社資力エンジニア石井由紀と申します。

00:34.000 --> 00:39.000
記念すべき第1回のトピックは、事業別プロダクトのリリースについてです。

00:39.000 --> 00:43.000
まずはじめに、ちょっと軽く自己紹介から始めていきましょう。

00:43.000 --> 00:47.000
まず、株式会社ウィンチケットの竹内さんからよろしくお願いします。

00:47.000 --> 00:49.000
はい、竹内実之と申します。

00:49.000 --> 00:53.000
そうですね、社内ではドラと呼ばれていることが多いです。

00:53.000 --> 01:04.000
2021年度の新卒として入社して、前代株式会社ウィンチケットで競輪やオートレースの投票サービスを行うウィンチケットというサービスを開発しております。

01:04.000 --> 01:06.000
はい、ありがとうございます。

01:06.000 --> 01:10.000
では次は株式会社安倍真TPから野口さんお願いします。

01:10.000 --> 01:12.000
はい、野口忠弘と申します。

01:12.000 --> 01:18.000
2018年に新卒で入社しまして、そこからずっと安倍までウェブエンジニアをしています。

01:18.000 --> 01:23.000
最近は安倍真のテックリードとして技術戦略などを考えたりしています。

01:23.000 --> 01:33.000
一応安倍真についても紹介しておきますと、新しい未来のテレビということでテレビ放送とビデオオンデマンド視聴のハイブリッドサービスという形になっています。

01:33.000 --> 01:38.000
9月20日からはワールドカップを放送予定ですので、ぜひよろしくお願いいたします。

01:38.000 --> 01:41.000
はい、ありがとうございます。ワールドカップ近いですね、本当に。

01:41.000 --> 01:45.000
そうですね、あと少しということで開発の方も盛り上がっております。

01:45.000 --> 01:47.000
いろいろ聞いていきましょう。

01:47.000 --> 01:51.000
では次は株式会社シロク、開発広太郎さんお願いします。

01:51.000 --> 01:54.000
株式会社シロクのエンジニアの開発広太郎です。

01:54.000 --> 01:58.000
自分もECと同じく22年度の新卒です。

01:58.000 --> 02:05.000
シロクはサイバーエージェントの中で数少ないEC事業であるN-Organicというスキンケアブランドをやっています。

02:05.000 --> 02:07.000
はい、ありがとうございます。

02:07.000 --> 02:19.000
本日のトピックが事業別のプロダクトのリリース頻度についてなんですけども、本当に雑談形式で話していくので緊張せずに落ち着いた雰囲気でお笑いもありで話していきましょう。

02:19.000 --> 02:29.000
では早速ですけども、多分事業別で栽培人といろんな事業が大きさとかリリースの速度とかも全然違うと思うんですけども、

02:29.000 --> 02:34.000
その1回のリリースの大きさって他の事業部の方すごい気になると思ってるんですよね。

02:34.000 --> 02:44.000
なのでちょっとその辺りを聞いていきたいと思うんですけども、デカいといえば株式会社、あればTV。どうなんですかね、野口さん。

02:44.000 --> 02:54.000
そうですね、1回のリリースの大きさは結構あべまま大きくてですね、多分開局当初の時からあまり変わらずにずっと来てしまっているというところも大きいのかなと思うんですけれども、

02:54.000 --> 03:05.000
そのところ2週間に1回のリリースという形になっていまして、リリースの頻度もそんなに近くはないので、その分1回の大きさも大きいという形になっていまして、

03:05.000 --> 03:21.000
ジラのチケットで言うと大体6から10個ぐらい。コミット数もちょっと調べてきたんですけれども、大体1回につき400コミットぐらいから多い時だと900コミットぐらい一気にリリースするみたいな結構ビッグバンリリースという形にはなってますね。

03:21.000 --> 03:25.000
すごいですね。ビッグバンリリース初めて聞きました。

03:25.000 --> 03:35.000
そうなんですね、やっぱりでかいプロダクトとなるとそれぐらいの大きさになってくるんですね。株式会社ウィンチケットリリースの大きさってどれぐらいになっているんですかね?

03:35.000 --> 03:46.000
そうですね、あべままとは違って、割と固定でスキジュールを決めているというよりかは、1つは施策ベースでリリース日が決まっているものがあって、この日に出したいからリリースするというのが1つと、

03:46.000 --> 04:03.000
あともう1つ、そういうのがない場合にでも差分はこう溜まっていくので、ある程度差分が溜まってきたのでそろそろ出したいねっていうタイミングで割とラフに決めてはいるんですけど、そうですね、プルリクの数でいうと10個から20個ぐらいが多いかなという印象ですね。

04:03.000 --> 04:09.000
結構決まってないんですね、ラフに出したい時に出すみたいな感じ。

04:09.000 --> 04:21.000
なので逆に施策のリリース日とかもあまりそこのリリースタイミングに縛られないというか、逆に施策がここに出したいからここまでにリリース作業するみたいな感じで決めたりとかしてますね。

04:21.000 --> 04:31.000
それなかなかいいですね。うちだと2週間に1回だと1ヶ月に2回しか出さないので、次のリリースはこの日だからみたいな形で結構大変なんですよね。

04:31.000 --> 04:36.000
確かに、実装が3日伸びただけで次のリリースに載せなきゃとかなっちゃったりしますもんね。

04:36.000 --> 04:40.000
リリースごとにデッドラインがあるみたいな形なんですね。

04:40.000 --> 04:43.000
そうですね、あればだとそんな形ですね。

04:43.000 --> 04:49.000
すごい難しい。そのリリースのタイミングっていうのは誰が決めるとかってあるんですか?

04:49.000 --> 05:03.000
インチケットの場合だとあまりなくて、基本的に施策ごとに実装担当がついてるんですけれども、実装担当に主に考えて決めてもらうみたいな感じで、チームで合意が取れれば特に問題がないっていう感じで進めてますね。

05:03.000 --> 05:11.000
なるほど。そのチームごとにリリースの日を決めて、この日リリースしますよってことを他のチームに伝えている。

05:11.000 --> 05:18.000
そのタイミングで、例えば他の施策で今デブ環境のものをそのまま出すとまずいみたいなことはもちろんあるので、

05:18.000 --> 05:30.000
あらかじめそこは共有しておいて、それまでにデブ環境だけで見えるようにするとか、そういう処置は必要だったりはするんですけれども、その共有ができてれば基本的に好きなタイミングでリリースできるっていう感じですね。

05:30.000 --> 05:38.000
なるほど。じゃあチームごとがデブ環境にどんどんデプロイしていって、まとめてプロダクションに出すという形なんですね。

05:38.000 --> 05:49.000
なるほど。すごい面白いですね。株式会社Sirokは、僕は勤めてるからなんですけども、リリース頻度を毎日してるっていうことなんですけども、実際のところどうなんですかね?

05:49.000 --> 05:59.000
そうですね。Sirokは開発の人数が少なくて、プロダクトのAbeMaTVとかと比べると小規模なこともあって、リリースの頻度はめちゃめちゃ多いです。

05:59.000 --> 06:06.000
で、だいたいどれくらいかっていうと、エンジニア全員が毎日1回はリリースしているくらいの量でした。

06:06.000 --> 06:10.000
確かに。今日ちなみに何回リリースしましたか?

06:10.000 --> 06:14.000
自分は今日は1回リリースしています。

06:14.000 --> 06:17.000
ちなみに僕は今日3回リリースしています。

06:17.000 --> 06:19.000
すごい。そうなんですよね。

06:19.000 --> 06:20.000
すごい。

06:20.000 --> 06:25.000
Sirokはすごいリリースできたらもうプロダクションに上げてしまうっていう形をきいています。

06:25.000 --> 06:43.000
そうです。さっきWinTicketとかAbeMaTVの話を聞いていて思ったのは、いわゆるそのフィーチャーブランチからステージングとかデブブランチにマージしていって、それがまとまったタイミングでプロダクションに上げるみたいな感じだと思うんですけど、

06:43.000 --> 06:53.000
Sirokの場合はそうではなくて、フィーチャーブランチを直接プロダクションのブランチにマージしていってるので、このようなスピード感になっているのかなと思っています。

06:53.000 --> 07:01.000
そうすると、いわゆるトランクベース開発みたいなプロダクションのブランチにマージされたら、それがそのままデプロイされるみたいな形っていうことですかね。

07:01.000 --> 07:03.000
そうですね。

07:03.000 --> 07:11.000
なるほど。それでいうと逆にうちも基本はメインブランチ1本ではあるんですけど、メインブランチがデブには勝手にデプロイはされるんですけど、

07:11.000 --> 07:23.000
どうしてもやっぱりプロダクションにそのまま出すってなると、うまくフラグで出せればいいんですけど、そうじゃないやつとかはどうしてもメインにはマージされてるけど、本番には今リリースしちゃまずい期間みたいなのがどうしてもらえてしまうので、

07:23.000 --> 07:27.000
そこでちょっとタイミングをうまく測る必要があるみたいな感じになってますね。

07:27.000 --> 07:31.000
確かにステージングで動かないのにプロダクションでリリースされてる。

07:31.000 --> 07:33.000
そうですね。

07:33.000 --> 07:45.000
ちなみにアベマTVとかの環境の中にいるときに株式会社主力のようなスピードの中の状況を聞いて、野口さん実際どう思いましたか?

07:45.000 --> 08:00.000
そこで一番気になったのはQAとかをどうしてるのかなっていうところが結構気になっていて、というのもアベマがこんなに時間がかかっていることの一つの原因として、

08:00.000 --> 08:04.000
結構QAに時間がかかっているっていうのがあるんですよね。

08:04.000 --> 08:14.000
QAのやり方が昨日ごとのQAにできていなくて、全部集めて、それを全てQAしてから出すみたいな形になっているっていうのもあるんですけども、

08:14.000 --> 08:26.000
そのQAやるのに大体1週間くらいかかるみたいな、手動のQAを行っているので、そこで1週間くらいかかって、全てオールグリーになったので出しますみたいな形にはなっているっていうところがあって、

08:26.000 --> 08:34.000
トランクベースみたいなところに行くときに一番障壁になっているのが、あそこのQAどうするのかっていうところなんですよね。

08:34.000 --> 08:38.000
その辺をどうやってるのかなっていうのが結構気になりました。

08:38.000 --> 08:40.000
実際どうでしょう?

08:40.000 --> 08:53.000
シロックではもちろんQAはやっていて、具体的にはステージング環境でリリース前にエンジニアとか施策担当者、いわゆる総合職の人と一緒にするっていう感じになっています。

08:53.000 --> 09:06.000
さっきその機能全体を通してQAは正直できていなくて、リリースした後に問題があった場合に早期検知するみたいな方向で考えている部分が大きいと思います。

09:06.000 --> 09:08.000
なるほどですね。

09:08.000 --> 09:13.000
株式会社WinTicketはQAのところをどういうふうに行っていますか?

09:13.000 --> 09:23.000
QAは施策単位でQCを一手で行っていて、施策ごとにQCが進行しているんですけど、

09:23.000 --> 09:39.000
例えば1個の施策がQC進行していて、もう1個の施策が終わっていて出したいというときに、そこは特に依存していないので、先に終わったものから出すことが可能なので、施策ベースでこれは出せる、これはまだ出せないみたいな感じで決まっている感じですね。

09:39.000 --> 09:41.000
なるほど。

09:41.000 --> 09:43.000
QAが通ったらどんどん出していく?

09:43.000 --> 09:45.000
そうですね。

09:45.000 --> 09:49.000
本当にいろんな部署で違うやり方をしていて、聞いているだけで面白いですね。

09:57.000 --> 10:06.000
QAといえば、よくCI、CD最近すごい流行っていますけども、フロントエンドのあたりでテストとかってどのように行っていますか?

10:06.000 --> 10:08.000
それは自動テストみたいな感じですか?

10:08.000 --> 10:16.000
そうですね。自動テストで、最近入りのジェストだとか、テスティングライブラリとかリアクトが出ているかと思うんですけども、

10:16.000 --> 10:23.000
例えば株式会社アベマTVの方では、テストはガッツリ書いているんでしょうか?

10:23.000 --> 10:26.000
それなりに書いているみたいな感じですね。

10:26.000 --> 10:35.000
正直なところ完璧なテストみたいのはできていなくて、単体テストみたいな形でテストをいっぱい書いてはいるんですけれども、

10:35.000 --> 10:43.000
ロジックの部分でテストがやりづらいような、実装になってしまっているところとかも古いコードの部分に結構あって、

10:43.000 --> 10:54.000
そのあたりの部分をいらないといけなくなったときに、テストがないのでそのままバグが起きるみたいなこととかもあったりなかったりという感じですかね。

10:54.000 --> 11:02.000
あと、逸位テストとかも結構あったりすると思うんですけれども、今のところは逸位テストを取り組めていなくて、

11:02.000 --> 11:08.000
今ちょうど逸位テストを整備するみたいなところのプロジェクトが動いているところではあるんですけれども、

11:08.000 --> 11:14.000
そこの部分を人手で頑張っているみたいなところが正直あるかなという感じですね。

11:14.000 --> 11:22.000
そうなんですね。逸位テストは結構コストがかかるものですけど、でも将来的には入れていくという方針ですね。

11:22.000 --> 11:30.000
そうですね。やはりそこの人手のQAのコストが結構大きいので、逸位テストでそこを軽減していくみたいなところを考えているという感じです。

11:30.000 --> 11:37.000
なるほどですね。逸位テストを導入するにあたって難しい問題とかってありますか?

11:37.000 --> 11:43.000
いかに信頼性が高いというか、なかなかこけたりこけなかったりみたいな。

11:43.000 --> 11:45.000
逸位テストがフリーキーになりがちですね。

11:45.000 --> 11:51.000
フリーキーなテストになってしまうとやはり難しいので、そこをいかになくしていくかというところと、

11:51.000 --> 12:03.000
あとはやはり運用部分というかメンテナンスしていく部分が難しかったりするので、そこをどのようにやっていくかというところが難しいかなという気はしてますね。

12:03.000 --> 12:09.000
ウェンチケット最近、逸位テスト導入しようというところで動いている話を聞いたことあります。

12:09.000 --> 12:13.000
そうなんですね。ぜひお聞かせしていただきたいんですけども。

12:13.000 --> 12:21.000
ウェンチケットもさっきお話ししたように、人手によるQCとかがメインになってきてたので、特にライブラリのバージョンアップ、例えばリラクトとか、

12:21.000 --> 12:30.000
他だとNode.jsとかよくあると思うんですけど、そこらへんのバージョンアップをしたいってなったときに、どうしても一度投資のQCをする方が確実ということでやってはいるんですけど、

12:30.000 --> 12:41.000
やっぱり5日間とかかかる上に、気軽にできないというところがありまして、投資のE2Eをもうちょっと自動化したいみたいなところは同じくモチベートしてあって、

12:41.000 --> 12:46.000
ちょっとそこを今、具体的な手法とかを検討したりというところですね。

12:46.000 --> 12:51.000
それはすでに導入し始めているということですか?一部では。

12:51.000 --> 12:58.000
いや、まだちょうどどうシナリオを、例えば今人手でやっている部分をどこまで自動化できるのかとかがあって、

12:58.000 --> 13:06.000
例えばウェンチケットの場合だとチャージの手段がいっぱいあって、デブ環境で簡単にテストで通せる手段と、

13:06.000 --> 13:14.000
ちょっと人手で提携先の企業さんからいただいているデブ環境の設定とかを参照しながらじゃないとできないテストとかもあったりするので、

13:14.000 --> 13:20.000
そこらへんをどこまでできるかとか、シナリオの運用とかを今ちょうど考えたりしているフェーズですね。

13:20.000 --> 13:26.000
そうなんですね。結構話を聞く限り手でテストするということですけども、

13:26.000 --> 13:33.000
コースって結構かかるかと思うんですけども、実際どれぐらいのコースかかっていましたか?

13:33.000 --> 13:46.000
先ほどお話ししたように、一通りウェンチケットの場合だと投票とか、チャージ、登録とか、そこらへんのコアな部分とかを行う投資テストと呼ばれる投資の休止に関しては、

13:46.000 --> 13:55.000
だいたいご営業日とか1週間前後で行うことができるんですけど、ただそこのラインが複数走れるわけではないので、

13:55.000 --> 14:03.000
例えば別の施策がすでに進行中で予定が落ちたりすると、例えば投資テストできるのが1ヶ月先になりますとかは割とあるので、

14:03.000 --> 14:07.000
そうなるとバージョンアップするの大変だなって正直になりますね。

14:07.000 --> 14:09.000
大変ですね。

14:09.000 --> 14:16.000
すごいかかって、しかも待たせてしまうということで、それが自動化になるともう1日で終わるような感じですか?

14:16.000 --> 14:26.000
全部できなくても、例えば半分は自動化でパパッと終わって、残りの2日、3日とかで人でしかできない部分をやるとかは可能かなとは考えていますね。

14:26.000 --> 14:30.000
早く自動化にしたいですね。

14:30.000 --> 14:42.000
株式会社シロクでは開発速度、リリース速度は早いということですけども、テストの周りって速度に合わせて毎回書いているんですか?

14:42.000 --> 14:51.000
そうですね。正直そんなに自分たちもテストを書けていなくて、よくあるランディングページからの購入みたいな、

14:51.000 --> 15:01.000
ユーザーストーリーの中でコアになる部分だけはフロントの単体テストも言い継いテストもあるんですけど、全体としてあるわけではないです。

15:01.000 --> 15:05.000
やっぱり結構コアなところにテストを書いていく。

15:05.000 --> 15:07.000
そうですね。

15:07.000 --> 15:14.000
聞いているとどこの授業部もテストを書くのがなかなかコアになっているようなんですね。

15:14.000 --> 15:26.000
そうですね。あとうちで言うと割と最近できたプロダクトであるので、最初からVRTと呼ばれるビジュアルリグレッションテストを全面的に導入しているのが結構いいポイントかなと思っていて、

15:26.000 --> 15:40.000
最初からストーリーをキャプチャするものとしてストーリーを書いているので、ちゃんとバリエーションを用意してキャプチャして差分がわかるようになっているという状態が保てているのが結構良いところかなと思っていますね。

15:40.000 --> 15:42.000
コンポーネント駆動開発で行っている。

15:42.000 --> 16:04.000
そうですね。ただ逆にVRTって結構画像で比較するので、ダイアログ系とか一部のコンポーネントで変な差分がそれこそフリーキーなテストになってしまう部分はあるので、そこら辺のメンテがちょっと難しいみたいなのはあるんですけど、やっぱりビジュアル系のリファクターとか行うときとかにすごい威力を発揮するなというのは感じていますね。

16:04.000 --> 16:23.000
そうですよね。結構ツールとしてはChromaticとかフロントエンドのテスティングツールがあるんですけども、あれ僕も使ったことあるんですけども、予想外のところでそれを出してくれるので意外とバグを検知できるということで、ただ導入も結構厳しいですよね。

16:23.000 --> 16:26.000
特に後からやるってやると本当に大変だと思う。

16:26.000 --> 16:55.000
それでいうと後から導入したのがAbeまで。もともとスナップショットテストが大量にあったんですけれども、スナップショットテストはご存知の通りあまりよくわからないというか、差分が出てもこれが正しい差分なのかそうじゃないのかいまいちよくわからなくて、なんか差分出てるけどこれでよしみたいな感じでアプローブするみたいな感じが続いてはいたので、スナップショットテストはやめて全部VRTに移行しましょうということで、基本的にはコンポーネント全部VRTに移行し終わったっていう感じではあるんですけども。

16:55.000 --> 17:13.000
そこの変換というか変えていくところも結構大変だったのと、やっぱり物量が単純に多いので、そこがなかなか大変だったなっていうところと、あとやはりフレーキになりやすいというところはまさしくAbeまでも存在していて、

17:13.000 --> 17:28.000
例えばサムネイルの画像とかがもともとそのデブ環境に存在している画像とかを使ってたんですけども、なんかそのキャプチャーの時の画質の違いなのかどうかわからないんですけど、そこで毎回差分が出るみたいなのとか結構あって、

17:28.000 --> 17:48.000
今はVRTの時はデータイメージで自動生成するプレースフォルダーっぽい感じのやつに置き換えたりとか、いろいろやってはいるんですけども、やはりなんかフレーキテストが残ってますね。なので毎回ちょっと5つか6つくらい差分が出るので、これは大丈夫な差分みたいな感じになってますね。

17:48.000 --> 17:50.000
とりあえずアップルーブしとくみたいな感じになるんですね。

17:50.000 --> 17:52.000
話がフレーキなんですね。

17:52.000 --> 18:07.000
うちもなんか画像はそういうデータを置き換えてて、前はダミーの写真を使ってたんですけど、そうするとやっぱり圧縮とかの差分が出やすいので、基本画像の中身自体が見なくていいものに関しては単色のベタ塗りの画像だけに置き換えてしまってとかやっていますね。

18:07.000 --> 18:11.000
もうテスト用でその画像を用意するみたいな感じですね。

18:11.000 --> 18:13.000
そういう工夫があり得られですね。

18:13.000 --> 18:17.000
そうですね。なんか模様というか普通の写真だと謎の差分が出るんですよね。

18:17.000 --> 18:22.000
確かにピクセルタイのカラーとかも見てますからね。

18:22.000 --> 18:35.000
先ほどAbebaTVの話で全部移行したっていう話をしましたけども、あれだけの大きいプロダクトでの移行って結構時間かかったと思うんですけども、どれくらいかかりましたか?

18:35.000 --> 18:54.000
大体半年くらいかかったと思いますね。1人それを担当してくださっていたメンバーの人がいて、その人がちょっとずつ移行していきつつっていう感じではあったんですが、やはりなかなか時間はかかったなという感じですね。

18:54.000 --> 19:05.000
ただその間もスナップショットテストは存在していたので、テストの印数が落ちているみたいなところはなかったんですけども、完全にそのスナップショットからVRTに移行していくっていう感じではあったので。

19:05.000 --> 19:08.000
なるほどですね。ありがとうございます。

19:13.000 --> 19:19.000
テストもそうですけども、試合の中ではやっぱり一番、といえばビルドタイムなんですけども、

19:19.000 --> 19:26.000
ビルドタイム、株式会社主力で結構かかっているっていう話を聞いたことがあって、

19:26.000 --> 19:35.000
自分たちはフロントエンドのビルドが遅い問題をずっと抱えています。

19:35.000 --> 19:37.000
どれくらいかかるんですか?

19:37.000 --> 19:40.000
どれくらいかかっているのかな?

19:40.000 --> 19:46.000
この前見たときは、フロントビルドは20分くらいかかっていましたね。

19:46.000 --> 19:55.000
結構僕も気になるトピックで、他のところの事業部がフロントのビルドってどれくらいを目指しているのかなっていうのをお聞きしたいんですけども、

19:55.000 --> 19:57.000
ウィンチケットとかってどうですか?

19:57.000 --> 20:02.000
そうですね。ウィンチケットの場合だと、だいたいビルドをするのが5分前後くらい。

20:02.000 --> 20:11.000
なので、10分もかからずに試合場でビルドできたかできなかったのに結果は帰ってくるみたいな感じではありますね。

20:11.000 --> 20:15.000
ちなみに、コンパイラーとかって何を使っていますか?ビルダーとか。

20:15.000 --> 20:23.000
そこで言うと、あまり最新の何かを使っているというわけではなくて、割と素直にWebpackとかBabelを使ってビルドをしていて、

20:23.000 --> 20:33.000
やっていることで言うと、サークルCIで不合的にどこかの性能が高いランナーを使ってバウンしているみたいなところはあるんですけども、どれくらいですかね。

20:33.000 --> 20:36.000
やっぱり性能のいいマシンを使っているのかな?

20:36.000 --> 20:48.000
そうですね。ただやっぱりちゃんと使い切る工夫が必要なので、スレッドローダーでサークルCIのマシンスペックに合わせたスレッドを立てて回すようにとか、そういう工夫はちょっと必要だったりはしますね。

20:48.000 --> 20:52.000
それってちなみに昔からそういう工夫をされてきたんですかね?

20:52.000 --> 21:09.000
いや、スレッドローダーとかはわりかし直近ここ1、2年ぐらいのところで入れたところで、そこでサークルCIのスペックとかもいくつか試しながら、どれを使うと短くなるとかは検証しつつ今のところに落ち着いたという感じですね。

21:09.000 --> 21:14.000
なるほど。ちなみにこれからもどんどんビルド速度を上げていく予定はありますか?

21:14.000 --> 21:41.000
そうですね。それでいうと、直近そのウェブのインフラ周りをこの間刷新しまして、そのタイミングでドッカーイメージのドッカーファイルを書き直すみたいなことをして、以前は結構キャッシュが丸ごとコピーをしたりしていて、キャッシュが効きづらい形になっていたんですけれども、そちらをよりレイヤーキャッシュが効く形にしたりしたので、CI上でPRでビルドするビルド時間はそんなに変わってないんですけど、デプロイ時のビルド時間っていうのが結構短くなったかなっていう感じですね。

21:41.000 --> 21:51.000
なるほど。工夫されてるんですね。アベマTVではやっぱりプロダクトがでかいからビルド時間も長いっていう印象があるんですけども、その辺はどうでしょうか?

21:51.000 --> 22:04.000
そうですね。ビルドだけに限るならば、本当にメイクファイル使ってるんですが、メイクビルドするところだけに限るなら、CI上だと2分半とか3分くらいで終わる感じですね。

22:04.000 --> 22:15.000
それも普通にルーバック使ってビルドはしてるんですけども、という感じですね。ただCI全体で言うともちょっとやはり時間はかかるところはあって、

22:15.000 --> 22:31.000
依存パッケージのインストールのところに結構時間かかったりとか、リントとか、それこそストーリーブックのところであるとか、いろいろ時間がかかるところはあるので、全部が3分で、全体が3分で終わるわけではないんですけども、ビルド自体はそのぐらいっていう感じですね。

22:31.000 --> 22:40.000
なるほど。ビルドは3分。やっぱり全体となっていくと各工程の時間も加算されていって、ポータルで言うと結構時間かかるんですか?

22:40.000 --> 22:56.000
デプロイの時のCIの時間で言うと、大体20分くらいかかっているっていうところはあって、時間がかかるフェーズとしては、クリティカルCSSの抽出っていうところを安部真はやっていまして、

22:56.000 --> 23:06.000
どういうものかと言いますと、ページを表示するときにそこのブラウザーの一番最初に表示される面に必要なCSSだけを抜き出してきて、

23:06.000 --> 23:19.000
それをHTMLにそのまま埋め込むっていう形にすると、CSSのロードを待たないでそこの部分だけ利用ができるっていう形になるので、その分パフォーマンス的に早いっていうテクニックがあるんですけども、

23:19.000 --> 23:33.000
ただクリティカルCSSを抽出するためには、もちろん実際にCIの中でChromeを動かしてキャプチャをして、そこの上に必要なCSSを抜き出すみたいな処理が必要になってくるので、

23:33.000 --> 23:42.000
ビルドをして中でローカル関係を立ち上げてアクセスしにいってみたいなことを全部やらないといけないので、そこに結構時間がかかったりとか、

23:42.000 --> 23:54.000
あとはそのドッカーイメージを作成してGCTのレジストリにアップロードしたりみたいなところも行ったりしてるんですけれども、そこらへんに結構時間がかかってるような印象ですね。

23:54.000 --> 24:02.000
なるほど。やっぱりWebTVでもそれなりのすごい苦労していて、今の時間があるというね。

24:02.000 --> 24:10.000
そうですね。結構CIのキャッシュを使うにはどうしたらいいだろうかとか、列で実行するにはどうしたらいいだろうかとか、

24:10.000 --> 24:15.000
いろいろ工夫しつつ、なかなか時間が減らないみたいな感じですね。

24:15.000 --> 24:23.000
確かに、ビルドのデプロイ時間は一生の目標というか、戦うべきところというか。

24:23.000 --> 24:34.000
ちなみにリリースの時って気をつけていることとかってありますかね?

24:34.000 --> 24:44.000
例えば、リリース終末やらないとかっていうところが多いかと思うんですけども、株式会社シロックでは何か気をつけていることってありますか?

24:44.000 --> 24:53.000
そうですね。シロックはやっぱり異質な点としてリリースが毎日みんなやってるみたいな点があると思うので、

24:53.000 --> 25:03.000
終末はずらすっていうのはできるだけ意識してはいますが、金曜日も午前とかは全然リリースが行われている感じです。

25:03.000 --> 25:04.000
怖いですね。

25:04.000 --> 25:06.000
怖い。そうですね。

25:06.000 --> 25:10.000
ちなみにそれでもしエラーが出た時とかってどう対処していますか?

25:10.000 --> 25:17.000
シロックの場合だとフロントエンドもリアクションのモノリコの中に組み込まれている形なので、

25:17.000 --> 25:21.000
リリースしたものがやばいということが緊急でわかった場合ですと、

25:21.000 --> 25:27.000
AWSのECSのイメージを一つ前のやつに戻すみたいなので対応したりしています。

25:27.000 --> 25:30.000
出して確認してみたら戻す?

25:30.000 --> 25:34.000
そうですね。あんまりいいパターンではないと思うんですけど。

25:34.000 --> 25:40.000
その場合ってバックエンドレールズでしたっけ?レールズとかも含めたイメージのバージョンを戻すみたいな感じであるんですか?

25:40.000 --> 25:41.000
そうですね。

25:41.000 --> 25:42.000
なるほど。

25:42.000 --> 25:48.000
もう一個リリースしたものをまるごとこそっと戻すようになるんですね。

25:48.000 --> 25:49.000
なるほど。

25:49.000 --> 26:00.000
それでいうと先ほどQAとかにコストをかけるのもどちらかというと出した後の検知をメインで行っているみたいな話があったかと思うんですけれども、

26:00.000 --> 26:09.000
例えば金曜日の午後とか、土曜日とかもあると思うんですが、その辺り検知ってどういうふうに実際行ってたりするんですか?

26:09.000 --> 26:24.000
検知の仕組みとしては、イシーが中心で今進めてくれているんですけど、セントリーであったりページャドリティであったり不正なエラーをハンドリングするための仕組みが複数入っていたりですかね。

26:24.000 --> 26:38.000
例えばECサイトという特性上、お客様からCS、そのカスタマーサクセスの方への連絡とかも多いので、CSさんからの連絡で判明するみたいなパターンも多分他のサービスよりは多いと思います。

26:38.000 --> 26:39.000
そうですね。

26:39.000 --> 26:49.000
この前導入、最近してるんですけども、セントリーとか入れてエラーが発生したら通知して、それを確認していくという形で、

26:49.000 --> 26:51.000
セントリーだとリリースタグとか付けられるので、

26:51.000 --> 26:52.000
そうですね。

26:52.000 --> 26:57.000
どのリリースでエラーが出ているとか検知して、すごく便利なんですよね。

26:57.000 --> 27:02.000
セントリー、結構インチケとかも入れていると思うんですけども、割とノイズが多いというか、

27:02.000 --> 27:03.000
そうですね。

27:03.000 --> 27:10.000
そこが難しそうだなと思うんですけど、そこを検知、利用しているというところでどういうふうに設定しているみたいなのってあったりしますか。

27:10.000 --> 27:16.000
難しいんですけども、そこは見て、ノイズであればイグノアするみたいな形で今やっています。

27:16.000 --> 27:22.000
やっぱりそこはですね、ちゃんと定期的にさばいていかないとどんどん溜まっていっちゃってノイズだらけになりますよね。

27:22.000 --> 27:23.000
そうなんですよ。

27:23.000 --> 27:29.000
なので今チームスクラムとか作って、エラーを誰か一人が見ていくみたいな形になっているんですよね。

27:29.000 --> 27:35.000
ちなみに、AbeMaTVの方だとリリースするときに気をつけていることとかありますか。

27:35.000 --> 27:42.000
同じような形ですけども、基本的に2週間に1回というのが水曜日に固定されているので、

27:42.000 --> 27:49.000
そのときにリリースするだけという形ではあるんですが、それもなるべく早い時間というか、

27:49.000 --> 27:55.000
午後とかに置いてたりするんですけど、午後1時とかにリリースしたりみたいなのとか、

27:55.000 --> 28:04.000
ホットピックスという形で定常外リリースを出すときもあるんですが、それもなるべく週末は避けようとかはもちろんあったりはしますね。

28:04.000 --> 28:08.000
緊急で出さないといけないバグがあったときは例外ですけども。

28:08.000 --> 28:11.000
緊急はそうですね、今すぐ出したりしますね。

28:11.000 --> 28:15.000
最近そこのフローとかも結構整えられてきていて、

28:15.000 --> 28:23.000
レジャーデューティーを使ってオールームをスラップで立てて、そこに関係者の人が集合して修正をしていってとか、

28:23.000 --> 28:27.000
もしお知らせとかをユーザーに出さないといけないみたいなことがあったら、

28:27.000 --> 28:38.000
そこのビジネス側の方の人と連携してとか、そういった形で一斉に集まって対応するみたいなところのフローが結構整ってきているかなという感じですね。

28:38.000 --> 28:43.000
なるほど。じゃあそのインシデントが起きたときのフローもしっかり固めていると。

28:43.000 --> 28:44.000
そうですね。

28:44.000 --> 28:45.000
すごいですね。

28:45.000 --> 28:51.000
ウィンチケットの方では同じようにリリースするときに気をつけていることってありますか?

28:51.000 --> 28:57.000
そうですね。週末とか例えば定時の終わり、就業間際とかは避けるっていうのはよくあると思うんですけど、

28:57.000 --> 29:00.000
特に就業間際は避けるっていうのももちろんありますし、

29:00.000 --> 29:07.000
ウィンチケットの場合だと毎晩、特に8時半からミットナイト競輪っていうのがありまして、

29:07.000 --> 29:10.000
これはアベマの番組で取り上げて放送を行っているので、

29:10.000 --> 29:14.000
特にそこで障害は起こしたくはないっていうところはあったので、

29:14.000 --> 29:18.000
もともと夜なのであまりそのタイミングにかぶることはないんですけれども、

29:18.000 --> 29:21.000
そこは意識して避けようっていう感じではありますね。

29:21.000 --> 29:22.000
なるほど。

29:22.000 --> 29:27.000
やはり同じように週末を避けてピークのタイムは起こさないということで、

29:27.000 --> 29:35.000
そうすると結構溜まったものが週頭にまとめてリリースみたいな形になると思うんですけども、

29:35.000 --> 29:42.000
そういったところでそのリリースがもし週末にエラーとかが発覚してしまったときも、

29:42.000 --> 29:47.000
アベマTVみたいにインシデントのワークフローっていうのは組んでるんですかね。

29:47.000 --> 29:48.000
そうですね。

29:48.000 --> 29:53.000
基本的にそのリリース後とかはグラファナでバッシュボードを作っているので、

29:53.000 --> 29:55.000
そのラッシュボードとかでメトリクスを注視して、

29:55.000 --> 30:01.000
例えば500エラーが増えてないかとか、そこら辺を見たりとかセントリーも見たりとかするんですけれども、

30:01.000 --> 30:08.000
それで問題があるってなったら、あまり時間とか関係なく必要なホットフィックスはどんどんやっていくっていう感じではありますね。

30:08.000 --> 30:13.000
なるほど。結構そういうホットフィックスとかも監視してやっているということですね。

30:13.000 --> 30:18.000
ちなみにやっていく中で苦労していることとかってありますか。

30:18.000 --> 30:20.000
そうですね。苦労していることで言うと、

30:20.000 --> 30:26.000
先ほど話したセントリーについてあまり現状ちゃんと運用ができていない部分はどうしてもあって、

30:26.000 --> 30:35.000
エラーがノティファイで流れてはくるんですけれども、一々をちゃんと精査してイグノアしたりとか修正を行ったりっていうのは全部はできていないので、

30:35.000 --> 30:40.000
これよく見るけどまた流れてきたやつだなみたいなのがどうしてもあるところがあるので、

30:40.000 --> 30:44.000
ちょうど最近改善していきたいというところではありますね。

30:44.000 --> 30:49.000
再発は結構ありますね。またこいつかみたいな感じで。

30:49.000 --> 30:53.000
なかなか狼少年じゃないですけど、嘘つきが出てきて。

30:53.000 --> 30:58.000
うちも結構それで苦労しているんですよね。何かいい方法とかあるんですかね。

30:58.000 --> 31:00.000
そうですね。

31:00.000 --> 31:05.000
結構やっぱり人をそこに咲いてこう見ていくとかよく見るんですけど。

31:05.000 --> 31:15.000
毎週とかどっかのタイミングで定期的にしょっちゅうしていく仕組みができればいいのかなとかちょっと思ったりはしてますけど、なかなか難しいですよね。

31:15.000 --> 31:21.000
あとはあれですよね。ブラウザー側が勝手に送ってくるものに関しては仕方ないんですけれども、

31:21.000 --> 31:27.000
いかにアプリケーションコードの中でエラーハンドリングを適切にしていくかっていうところが、

31:27.000 --> 31:34.000
必要ないけれども送られてしまうみたいなエラーを減らしていくことに繋がっていくのかなとは思っていて、

31:34.000 --> 31:44.000
それが適切にユーザー側にリカバーできるような回復可能なエラーなのであれば、そもそも先取りに送る必要ないよねとか、いろいろあると思うんですよね。

31:44.000 --> 31:50.000
なのでそこをしっかりやっていくことっていうのが大事であり一番難しいところだなって。

31:50.000 --> 31:52.000
そうですね。エラー系は思ったりします。

31:52.000 --> 31:58.000
そうですね。確かに必要のないエラーを送るっていうのはあるかと思うんですよ。

31:58.000 --> 32:09.000
うちも例えばIDで検索してなかったっていうエラーハンドリングを先取りに送っていたりだとか、本当に必要ないやつ今整理してるんですけども、

32:09.000 --> 32:18.000
そうやっていく中でやっぱりモニタリングの中とか改善していくやっぱりそういうやり方になるかなっていうのはあります。

32:18.000 --> 32:25.000
そうですね。なんか送信回数が課金対象になってるからどんどん無駄なエラーを送ってくると、そこのクレジットもどんどん消費していきますもんね。

32:25.000 --> 32:36.000
確かに。そうなんですよね。無駄でだんどん圧迫して実際に大切なエラーのアラートっていうのは見逃してしまったりとかっていうのがあるとやっぱり危ないですよね。

32:36.000 --> 32:51.000
ではそろそろお時間なので、本日みなさん初めて1回目のマリウェブポッドキャストということでしたけども、感想の方どうでしたでしょうか。

32:51.000 --> 32:53.000
たくさんの方からお願いします。

32:53.000 --> 33:01.000
そうですね。結構リリースの頻度とか量とか表面的なところはグローダクトによって違うなって印象があったんですけども、

33:01.000 --> 33:09.000
抱えている悩みとか本質的な部分は結構どこも共通しているなっていうのを改めてちょっと感じて、すごい面白い時間でした。ありがとうございました。

33:09.000 --> 33:11.000
ありがとうございます。

33:11.000 --> 33:25.000
アベマはやはりずっと昔から同じリリースの手順になってしまっているっていうところがあって、他のプロダクトが割と高頻度にリリースをしていたので、もっと改善していかないとなというふうに思いました。

33:25.000 --> 33:35.000
そうですね。N-Organicはやっぱり他の2つのサービスと比べると、特にフロントエンドの規模は小さいので、これからもっと盛り上げていきたいなと思いました。

33:35.000 --> 33:49.000
そうですね。僕自身も他の授業部がいろんな、どういうふうにデプロイしているかっていうのがすごい気になっていたところで参考になりますし、これを聞いているウェブフロントまたバックエンドの人たちもすごい参考になるかと思って良い収録ができたと思います。

33:49.000 --> 33:51.000
本日は本当にありがとうございました。

33:51.000 --> 33:55.000
ありがとうございました。


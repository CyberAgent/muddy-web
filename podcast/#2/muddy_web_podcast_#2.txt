マディウェブポッドキャストは、マディの意味が泥であるように ウェブフロントエンドの開発現場における泥臭い話などから学びを得ることを目的とし、
実際に明日から使えるかもしれないウェブフロントエンド知識や技術を 参加者の皆様と共有し合うことを通して、フロントエンド海外の役に立てるように思いを込めて発信しています。
はい、では始めていきましょう。マディウェブポッドキャスト。 本日はウェブスピードハッカーソンについて話していきたいと思います。
司会はこの私、株式会社シロキョーDCがお送りいたします。
本日ゲストに3人の方にお越しいただいております。
株式会社アメバTVから野口さんと宮城さん、 株式会社ウィンジケットから竹内さんがお越しいただいております。
最初は軽く自己紹介の方から始めていきたいと思いますので、野口さんから。
株式会社アメバTVから来ました野口と言います。
ウェブスピードハッカーソン関連の話で言うと、ウェブスピードハッカーソンをそもそも提案したというか始めたのが自分という感じなので、
今日はその辺の裏話とかもできればなと思っています。よろしくお願いします。
よろしくお願いします。創設者ですね。神ですね。
創設者なんですかね。
続きまして宮城さんお願いします。
株式会社アメバTVでウェブフロントエンジニアをやっている宮城と言います。
僕はウェブスピードハッカーソンの第2回の作文をやっていまして、
それからはずっと運営としても一緒に野口さんとやっているという感じですね。
今日は続けていくというところに関しても何かいろいろ話せたらなと思っています。よろしくお願いします。
よろしくお願いします。いろいろ聞きたいですね。
続きまして竹内さんお願いします。
竹内にのると申します。第1回の時に野口さんと同じく出させていただいたんですけれども、
21年の新卒入者で今はウィンチケットのウェブチームで10月からテックリードとして開発を行っています。
社内ではハンドルネームとしてドラっていう名前で呼ばれていることが多いです。
スピードハッカーソンに関しては第1回と第2回は参加者として参加させてもらったんですけど、
第2回は社内向けで優勝したことをきっかけに第3回の作文担当となって、第3回は作文担当させていただきました。
今日はいろいろ話せたらなと思います。よろしくお願いします。
よろしくお願いします。優勝者が来ましたね。
やはり宮城君も第1回の優勝者という形で、そういう伝統的な形で優勝者が次のオーダーを作るみたいな形で続いているので。
その辺はこれからちょっと詳しく聞いていきましょう。
じゃあまずはじめなんですけども、ウェブスピードハッカーソンを知らない方もいるので、軽くどういうものかっていうのを説明していただきたいなと思うんですけども、
のくじさんに説明していただいてよろしいでしょうか。
ウェブスピードハッカーソンはどういうものかと言いますと、すごく重いウェブアプリケーションみたいなのをお題のアプリケーションという形で、
出題みたいな形で出題しまして、それをいかに火薬できるか、快適なアプリケーションにチューニングできるかっていうところを競う、
そういうハッカーソン形式の競技という形になっています。
なので、いわゆるイスコンみたいなのもイメージしていただければわかりやすいかなと思うんですけれども、
それのウェブフロントエンド版という感じですね。
業界的には例えばリクルートさんであるとか、Googleでしたっけ?とかでもやっているというところがあったかなと思うんですけれども、
それをサイバーエージェントでもやってみようということでやっているという感じになります。
なるほど、ありがとうございます。
名前はすごく聞いてて、結構話題になってますもんね。
そうですね、ありがたいことに色々な企業とかでもウェブスピードハッカーソンの問題を使ってイベントをやってみたみたいな話とかも見たりはしているので、
そういう形で広まっていっているというのは嬉しいなと思います。
僕の同期でも何人かも出ててよかったという話はすごく聞いてて、
次回僕もウェブフロントだけどまだ参加していないので、
ぜひぜひ。
参加したいんですけども、
ウェブスピードハッカーソンどうして始めた企画とかってありますか?
そうですね、始まった第1回が2020年の開始だったんですけれども、
その時にちょうど普通の形でのインターンシップであるとか、
ハッカーソン形式のイベントみたいなところがなかなかやりづらいねっていう話が一つあったっていうところが、
ちょうどコロナが始まった頃だったので、その辺り難しいよねっていう話があったのと、
あともう一つその頃パフォーマンスチューニングみたいなところを割とメインで仕事とかでもやっていたんですけれども、
リクルートさんのイベントとかを見ていて、
リクルートさんのイベントの場合には実際のサービスとして出ているアプリケーションをチューニングして、
改善点がないかみたいなところを探していくっていう感じではあったんですけれども、
それを実際にイスコンみたいな形で問題形式で出せないかなっていうふうに思ったのが割ときっかけっていう感じではあって、
ただイスコンみたいなイベントを一人で開催するのはなかなか大変なので、
さっきの採用系のところと絡めれば、割と会社のイベントとしても開催できるんじゃないかということで、
それをきっかけで提案してみて、ぜひやってみましょうっていう感じでできたっていうのが最初の始まりっていう感じですかね。
そうなんですね。
じゃあ1回目の問題も野口さんが採用して。
1回目のときはアミブロっていう、どこかで聞いたことあるような感じのブログのサービスなんですけれども、
ブログのサービスがめちゃくちゃ重いっていう感じで、JSが30MBくらいあったりとか。
30MB。本当にJSだみたいな。
そういう形で1個1個リストでここは補足できるんじゃないかとか、
こうすればサイズが膨らむんじゃないかみたいなところを1個1個考えていって、
それをなるべく盛り込んだ形でアプリケーションを作ってみたいな感じでやったっていうのが最初ですね。
なるほど。それの優勝者が本日来ていただいている宮塩さん。
そうですね。社内でコンテストやって。
あのときは2日間でやってましたか?
そうですね。確か2日間だったかなと思っていて。
そもそも社内版っていう話がどういうことなのかというと、
そもそも社内版っていう話がどういうことなのかというと、
最初は先ほどちょっとお話ししたように採用関連でということで、
学生さん向けのハッカソンイベントという形で始めたんですけれども、
個人的にやっぱりすごい良くできたので、じかじさんじゃないんですけど、
すごい良い感じのアプリケーションが問題ができたので、
それをぜひやっぱり学生さん向けだけで終わらせてしまうのはもったいないなというふうに思って。
そのときに、作ったのは自分だけではなくて、
そのときの運営がPAGさんとGASさんで3人でイベントをやったんですけれども、
そのメンバーの中でもやはり社内だけで終わらせてしまうのはもったいないよねという話があって、
ちょうどウェブパフォーマンスの技術力を社内でも上げていこうというような話とかもあったりするので、
そこで社内向けにやることで、社内のエンジニア向けにも実際やってみようという感じでやったのが、
社内向けで開催したという感じですね。
それのときの優勝者がここにいる宮城くんという感じです。
実際に解いてみてどうでしたか?
解いてみて、あのときはむちゃくちゃ面白いおもちゃが転がってきてないですね。
聞いてはいたんですけど、重たいタイトルをパフォーマンスチューニングしていくみたいな、
ちょっと舐めてはいて、こんなに重たいんじゃないですかね。
確かに想像を超えてくる感じがありますね。
想像を超えてきてますね。
普段の開発でここまで遅いのって普通プラスで出ないですね。
確かに。
シューニングしがいがあるっていうのはすごくありましたよね。
なので夢中で解いちゃってて、
社内版は平日にやったんで、ちょっと遅めの時間帯に18時くらいからみたいな感じでやって、
20時くらいに一旦回としたらストップで、やりたい人がいたら深夜月にやっていいよっていう話だったんですけど、
寝ずにずっとやってました。
そんなにじゃあ本当に相当面白かったおもちゃが転がってきたんですね。
いやー本当に良かったですね。
こういうスポットで面白いことが入ってくるとやっぱりモチベーションがつながってきますよね。
確かに。
実際に重たいって感じたところってどういったところが重たいと感じました?
まず初っ端に開くのに時間かかるんですよね。
どれくらい?
そもそも開くのか?
3、40秒はかかるんですよね、開くのに。
開くのに。
ライトハウスで得点化してるんですけども、
普通に作るとだいたい6、70点くらいはライトハウスってどんなに遅くても行く感じじゃないですか。
たまに遅くて3、40点かなみたいな感じなんですけど、
3回ともだいたい1点とか2点とか出てくるんですよね。
聞いたことないね。
のび太くんでも取らないようなスコアですね。
一桁台とか0点とかを叩き出してくるので、
本当に開くのに3、40秒とかひどい時はたぶん1分とかかかるようなサイトとかになっているって感じですね。
それを解いていくと、改善していくと、
実際にどういった改善をすることによってパフォーマンスが上がる仕組みになってくるんですか?
基本的にはまず1つデータ量を減らしていくっていうところは本舗の方針としてあって、
JavaScriptが全部Androidサイトでミニファインもされてないし、
ソースマップもくっついてるみたいな感じなので、
そこら辺を削っていくと普通のサイトになってくる。
そうですね。30MBあったJSが5MBとか数MBぐらいには減るみたいな。
そこからパフォーマンスってなってくると、
どこから攻めてくるんですかね、ああいうのって。
そうですね。結構パフォーマンスチューニング的な話にはなってしまいますけど、
例えばJSを分割してそのページでしか使わないJSだけを読み込むようにしていったりとか、
あと、結構重たいライブラリを入れることによってパッケージのサイズを大きくしたりっていうところもあったりするので、
その辺をいかに違うライブラリに変えていったりとか、
自前で実装していくことで軽量化していくみたいな話になったりとか。
あと取り組みやすいところで言うと、
第1回の時はまだなかったんですけれども、
第2回あたりからLighthouseが測る指標として、
CLS、Cumulative Layout Shiftが入ってきたので、
そこのガタッとするところというか、
意図的にめちゃくちゃガタガタするように作っていたりするので、
そこをうまいことプレイスホルダー作ったりみたいなところが、
1つ取り組みやすいところとしては最初出てくるのかなという感じですかね。
第1回はなかったんですね、まだ。
そうですね。第1回の時はまだCore Web Vitalsに、
Core Web Vitals自体が確かなかった気がするので、
Lighthouseの時はまだCLSという概念がなかったんですよね。
2回目にはあったっていうことですか?
そうですね。確かだと思いますね。
そうですね。それを意識して実装を作ったので、
あったと思いますね。
2回目の覇者。
ちょっと記憶が薄いですけど。
そうですね。なので、少なくとも3回についても、
CLSとかの覇者は結構あったので、
Lighthouseが意外と指標が5つと6つくらいあるので、
どれか1つをひたすら改善していくというよりかは、
ある程度改善したら次の指標を改善しに行くみたいな、
試験勉強じゃないですけど、
要領の良さみたいなところも競技的なところでは必要になってくるかなという気がしてますね。
もう1個を潰したら次の課題を潰していく。
指標が30%、30%とか比率が決まって計算されているので、
CLSが残ったままだといつまでも点数が1点以上上がらないという感じになっちゃうので。
あれですね、今聞いている方はたぶん、
次回の開催の時にすごい良いヒントが出られてるんじゃないかなと思ってますけど。
2人とも回答して、
次に作る側として参加されたってことなんですけども、
作る方もなかなか考えながら作ってるんだなという感じに分かってきたんですけども、
実際に作っている中で、
ここめちゃくちゃ大変だったなとか、
すごい努力さえ作業したよみたいな話を聞いていきたいんですけども、
そういったところってありましたか?
そうですね、僕は第2回を実装したんですけど、
第2回、第3回もなんですけど、
前のやつで大体ネタがバレてるんで、
そこをまず新しく何かを入れていかなきゃいけないというところが結構難しかったですね。
僕の時は普通のブログサービスとしてもあって、
野口さんが出題の意図というのも実は公開されているので、
そういうので普通のパフォーマンスチューニングはそれを見ればできるみたいな状態になって、
そこから普通じゃないパフォーマンスチューニングを考えるというところがなかなか難しかったですね。
自分が作ったやつはTwitterみたいな感じの単文を投稿できるSNSを作ったんですけど、
前はブログサービスだったのであんまり動画とか、
あとはウェブフォントが入っていたかもしれないけれども、
全部にフォントを入れるとかっていうのはやってなくて、
今回はそことかを入れたりとかしてやってたんですよね。
意外と触れたことないような分野、
普段自分が触れたことないような分野に全体を通して触っていくと
どんどん触れていくことができるっていうのが
ウェブスピード博士の面白いところかなという気はしていますね。
第3回も第3回でまた違ったところをターゲットにした実装になっているので。
第3回は結局結構テーマに悩んで最初、
何のサイトをモチーフにしてそういうサイトを作ろうかなというのを考えて、
結局自分が普段関わっているベッティングサービスに落ち着いたんですけれども、
作ってて思ったのは結構ベッティングサービスって
ブログとかSNSとかと違って、
本当に文字情報とかがやっぱりメインになってくるので、
そうなると文字情報をメインのサイトで
遅くするっていうのが意外と大変なので、
そこで作文し始めてからデチューニングで結構苦労したりはしましたね。
結構に難しい。
聞いていると作る側もなかなか勉強しながらやっていくっていう。
そうですね。
結局どの辺をデチューニングするっていう感じになったんでしたっけ?
そうですね。
それでいうと画像は使っていたので、
画像に関してさっきのレイアウトシフトが発生するような風に組んでみたり、
そもそも画像の表示に時間がかかるように
普通のイメージタグを使うのではないちょっと特殊な実装にしてみたりとかをしました。
あとはウェブフォントを引き続き使ったりですとか、
あと第1回、第2回になかったのとしては、
時間に伴う表示みたいなところがあったので、
そこで処理が重くなったりするような実装を入れたりするっていう工夫をしたりしました。
時間に伴う?
そうですね。残り何分とか。
そういう実装があったりとかしたので、
そこはカウント処理が不必要に走るとか。
ちょっと動員ではあるんですけど、
そういう処理が隠れてるみたいなとかは入れたりしましたね。
マイミリビューをチェックしたりしてましたよね?
そうですね。
結構そこら辺とかは過去に参加したリクルートさんのスキダオカソンからちょっと影響を受けたりはしてるんですけど、
意外とビルド設定とかに限らないプロダクトの行動って気づきにくかったりするので、
そこら辺を何も情報がない状態かというと、
自分でまずはちゃんとプロファイルを取ったりする機会にもなるので、
いいかなということで入れてます。
なるほど。プロファイルを見ればわかるようなものですね。
そうですね。明らかに怪しいくらいの頻度で走ってる処理があるので、
そこら辺を見ていくとって感じです。
そういうのって入れるときって誰にもわからないような感じで隠すように入れてるんですか?
多少は隠したいですけど、正直明らかに怪しいので、
見ればわかるかなって感じですね。
なるほど。ありがとうございます。
なかなかアプリケーションを一から我々作っているので、
コード量としてはそんなに多くできないっていうところが制約としてはあるかなと思っていて、
言ってもやっぱり1,2ヶ月とかで2,3人とかで、結構1人とかで作っていたりもするので、
そこら辺で隠す森がそんなにないというか。
森というか林というか。
そうですね。林くらいになっちゃうかなみたいなところではあったりするので、
ちょっとその辺を隠すのは難しいところはありつつ、
ただやっぱり参加者側としても結構学生向けでやるときは2日間とかでやったりするので、
あんまり大きいアプリケーションになってしまうと、
そもそもちょっと競技として難しくなりすぎるっていうところがあったりするのかなと思っていて、
ちょうどパフォーマンス技術を学ぶっていう側面での競技みたいなところと、
実際の競技性みたいなところのうまいことバランスが取れているのかなという気もしたいではしてますね。
そこら辺のコードベースの小ささみたいなのはやっぱり独自で問題作り結構利点だなと思っていて、
取り組んでいるのを見ててもやっぱりライブラリを置き換えるとかってよく出てくるんですけど、
そういうのをコードベースが大きいのでやろうとすると、それだけで終わらなくなってしまうので、
あんまりそこの置き換え作業に時間がかかるのは競技の本質では少なくないので、
そういう意味でもいいのかなとは思っていますね。
結構回答してもらうターゲット層によってもレベルを変えていたりとかもするんですかね、そうすると。
それでいうと、さっきちょっとあったんですけど、わりとネタが借り尽くされてしまうみたいな話にもちょっと移るんですけど、
個人的に3回作る時に思ったのは、ある程度ネタをかぶっててもいいかなと逆に思っていて、
楽しんでもらえているクロートの方々もいっぱいいるんですけど、
その一方でどこから取り組めばいいのかわかんないとか、
普段そんなにフロントやってないけどちょっと面白そうみたいな方も結構大勢いらっしゃると思うんですよね。
そういう時にあまりに手を付けられないような問題をやってしまうと、それはそれでちょっと寂しいかなという感じがして、
その意味で、例えば第1回、第2回でやったこれをまずやればある程度は良くなるとかいう風に、
ある程度入門向けの部分と最後突き詰めるためにはやった方がいい部分みたいなところが両方あるのがいいのかなという風に考えたりはしてました。
難しい問題と簡単な問題を絡めていくような感じなんですね。
そうですね。
なるほど。
それでいうと第2回は難しすぎちゃって。
そうなんですか。
学生向けに出した時にはだいぶ層が分かれてしまって、層が分かれるところではなかったかもしれないですけど、
本当に上位数人がすごい点数を出してて、それ以外の人たちは結構点数が伸び悩んでみたいな感じになってしまって、
それは大きな反省でしたね。
やりたいものを全部詰め込んだらこうなっちゃった。
できるかできないかの違いみたいな。
なのでちょっと分かりにくすぎたかなみたいな。
どこが課題なのかみたいなところとか。
そういったところは徐々に改善されていくなって感じはしますね。
そうですね。
でも逆に第1回で1回ってあると毎回難しさを超えてくるのを若干期待されている部分もあるので、
そこら辺ではちょっと難しいなって思うんですけど。
実際競技を始めてみてその雰囲気とか、
回答者の現場の雰囲気っていうのはどうでしたか?
現場の雰囲気、そうですね。
オンライン開催なんであんまり解いてるところは見れないんですけど、
基本的にフォークして書いてもらうことにしてるんですよね。
フォークするとフォークした先のレポジトリも見れるようになるんで、
そういったレポジトリから見てると結構面白いコミットメッセージ。
どんなのがあったんですか?
どういうのが面白かったかな?
特に面白かったのは社内向けでやってるときとかは
結構みんな半分遊びでやっていたりっていうところもあったりするので、
例えばパフォーマンスシューニングの一つのテクニックで
プリコネクトっていうリンクタグをセットすることで
事前にリソースを呼び込んでおくというか
リソースの接続を先にやっておくことで
その分早くなりますよっていう技術があったりするんですけれども
プリコネクトのタグを追加するときに
プリンセスコネクトみたいな感じの
そういうゲームがありますからね。
弊社プリンセスコネクトというゲームがありますので
プリコネっていう形でコミットメッセージを追加していたりとか
弊社特有の
そうですね。
あとはいきなりSSRやり始める人とかもいて
結構アプローチが面白かったりとかもしますね。
SSRは勇気せぬアプローチの仕方だったんですか?
最後の方にやってもいいかなと思うんですけど
結構最初にそれを突っ込んでくるのは
なかなか勇気があるアプローチの仕方だから
最初からSSRのスピリットをしてくる
そんな人もいたんですね。
パフォーマンスチューニングっていう観点じゃないところから
攻めてくる人も結構いて
どんな観点でしょう?
今まで全部リアクトですよね。
そうですね。
リアクトやってるんですけど
リアクトのフレームワーク自体も変えるみたいな
行動変える
冒険出る人もいたんですけど
だいたいそれは間に合わなくて失敗するんですけど
一から同じアプリケーションをスクラッチで開発しているみたいな感じになりますね。
リプレイスするみたいな
問題を壊してきてますね。
他には何かありましたか?
回答見てて面白かったものはなんだろうな
プッシュ、プッシュ、プッシュみたいなコメントとかもありましたか?
フィックス、フィックスみたいな
フィックス、フィックスみたいのは割とありますけど
競技っちゃ競技なので
その辺はそういうものかなという感じではあります。
特典としては見てないということですね。
そうですね。
さっきフォークスしたのが見られるという話ありましたけれども
そこで結構運営者側としても競技時間中に楽しんでいるというか
運営している側って基本やっぱり競技形式なので
あんまりサポート的なことをしたりとか
質問に答えたりみたいなのはそんなに発生はしないので
基本ずっと待機しているというか
眺めているみたいな形にはなるんですけれども
そこでフォークスした先のレポジトリとかを見ていると
この辺できてるねとか
あるいはそういう面白いコミットメッセージが見られたりとか
すごい複雑なことをしようとしているなみたいな話だったりとか
何が面白いかってみんなの開放が見れるんですよね。
僕らってある程度こうやるとパフォーマンス良くなるかなというところは
考えてはいるんですけど
めちゃくちゃチューニングするというところまでは
考えきれていないところがあって
点数高い人のやつとか見ると自分自身が勉強になるんですよね。
これでこう速くなるのねみたいな
そういった発見があるのはすごく良かったですね。
なるほど、もう本当にできる人も来るから
その人たちのアプローチが新しい自分の技術として取り入れられる
みたいな感じ、学びがすごいあるんですね。
一般開催すると結構それこそ今回満点狙いに行く人がいるんですけど
そもそも出題者が開催する時点では
満点まで攻めきれてないっていうことも結構あるので
そういう時に満点とか出てる人を見ると
逆に参考になってたりはしますね。
いいですね、その満点のデポジトリとかって一般公開はされてるんですか?
その人が公開してればって感じですね。
僕らの書いたボールではなくなってるんで。
そうなんですよね、結局我々って
例えばその満点の状態のアプリケーションをまず作って
そこからデチューニングしていくっていうような形で作っていないので
最初からある程度遅いアプリケーションとして作って
さらにデチューニングして遅くしていこうみたいな感じで作ったりはしているので
一体どうやったら満点が取れるのかというのは我々わかってないんですよ。
なるほど、確かに。
なのでそもそもその満点を取るのが可能なのかどうかみたいのも
正直なところそこまで事前にやり込んで
これが模範回答ですみたいなところまで作り込めてればいいんですけれども
どうしてもちょっとそこまでできていないっていうところはあって
ある程度の点数までいくにはどうしたらいいみたいなところとかまでは
もちろん検証とかはしてたりするんですけれども
そこはやはり最後の0.1点とかまで
詰められるのかみたいなところはわからないところがあって
それをむしろ一般開催の時に
一般開催は結構期間が長いというところもありますけれども
そこを本当に非常にやり込んでいただいて
満点狙っていくというところまでできてきているっていうのは
本当に出題者妙に尽きるというか
そこまでやり込んでいただいて本当にありがたいなという感じがしますね。
確かに嬉しいですね、それは出題者カーカラーとしても。
実際に開催しながらで苦労したところとかってありますか?
点数の採点のところとかで。
採点はそうですね。
一番最初の頃ってあれは採点システムだけはあったんでしょうか?
一番最初の時はサークルCIを使って
その中でライトハウスを動かすみたいな形になっていて
その結果を別途立てているリーダーボード用のサーバーみたいなのがあって
そこにスコアを送信してリーダーボードを表示するみたいな
そういうちょっと簡単な仕組みがあったっていう感じですね。
一定時間置きに計測されるから自分の好きなタイミングで計測できない?
そうですね。
第2回の社内向け開催まではそのような形で
基本的に30分に1回とか1時間に1回とかで
一斉に参加者のスコアを計算して更新するという形で
そのスコアを計算して更新するみたいな感じの仕組みになってましたね。
そうなんですね。
第3回目では違う仕組み?
そうですね。第2回の一般開催、そこから一般開催を始めたんですけれども
そのタイミングで新しい仕組みを作ったという
宮城くんが新しい仕組みを作ったという感じでした。
それはどんな仕組みだったんですか?
GitHub Actionsを使っていて
Issueを立ててそこに回してほしいみたいな感じのコメントをすると
デペンダーボットとかリノベートとか
ああいうボット系のGitHubのやつあると思うんですけど
ああいう感じでボットに対してリクエストを飛ばすと
GitHub Actions上で計測が回って
スコアが出てみたいな感じで
一通りそこら辺を全部GitHub Actionsに寄せたんですよね。
リーダーボードもGitHubのReadMeで更新されるようになって
それで一番大きかったのは
あれですね、お金が浮いたっていうか
そうだったんですね。
GitHub Actionsってオープンソースというか
公開しているプレッシャーに対しては無料で使えて
一般公開っていうのを決めた時も
だいぶ長い期間やりたいねっていう話で
1ヶ月くらいだったんですけど
1ヶ月間好き放題、CI回し放題で
壊しておくわけにはいかないみたいなところがあって
そういったところはすごく助かりましたね。
GitHub Actions無料で使えてみたいなところは
確かになかなかないですもんね。
そうなんですよね。
CIなんか無限にオープンソースとして
開発している環境に対して無料で
CI提供しますっていうのは結構あるんですけど
オープンソースって言えるかどうかは怪しいですよね。
確かに。
実際にそのレポジトリってまだ公開されていますか?
そうですね。公開はしてますね。
リーダーボードっていう形でレポジトリ公開していて
もう期間過ぎちゃってるんで
実際にそれで動くわけじゃないんですけど
フォークしてもらって加工してもらうと
自分でも動かせるんで
結構使ってくださっている方もいて
そうなんですね。
それを使って査者さんが会社でやりましたみたいな
記事もあげてくださってしてたんで
いろいろ公開していくと
そうやって広がっていくのがいいですね。
嬉しいですね、それは。
他の会社でも使っていただけると。
そうですね。
最初公開されて
これで本当に誰も見られなかったら
めちゃくちゃ悲しいなって思うんですけど
結構遊んでもらってますね。
そこはすごく嬉しいです。
最初のリーダーボードだと30分に1点で
しかも運営がサポートする時間ないしか回らなかったんで
例えば夜6時とか7時とか
ある程度のタイミングで測定が止まって
次の日の朝まで分かんないみたいな感じだったんですけど
GitHub Actionsの仕組みに移行してからは
好きなタイミングで回せてしまうので
よくも悪くもみんな回し続けるんで
運営がサポート離れた後も
ひたすらに一晩中回っていて
ちょっと恐怖を覚えましたね。
終わってからもみんな回し続けていたんですね。
やってる人たちはずっと改善して回してみたいなのをやってて
その辺の作業時間がある意味
可視化されるようになったっていうところがありますよね。
以前は夜が明けて翌日になって最初に回してみると
ものすごい点数上がってる人がいるみたいな
そういう感じだったんですけど
今は本当にこまめに回すことができるので
結構リアルタイムがスコアで。
そこの採点あたりの大変なところっていう話で言うと
もう一つあって
レギュレーションチェックをやっているっていうところなんですけれども
採点というかライトハウスだと
実際に動いているかどうかっていうのは
それだけだとわからないので
パフォーマンスチューニングしたけれども
アプリケーションが壊れてしまいましたっていう形になってしまうと
それはそれでチューニングの範囲を超えているというか
機能を落とせば速くなるのはそれは当然なので
そこをしっかり機能を保った上でチューニングできているのかな
っていうところをチェックするんですけれども
そこはやはりどうしても自動化が難しいところではあって
それこそE2Eテストみたいな形で
自動化するっていう方法もなくはないかもしれないんですけれども
ただその自動化E2Eテストを作るにしても
例えば要素を特定して
そこの要素をクリックしてとか表示されているとか
そういうチェックをしないといけないんですが
そこすらもパフォーマンスチューニングで変わる可能性があるというか
要素の数を減らしたりとか
あるいはクラス名を変えたりとか
そういったところは派生する可能性は十分にあるので
そこに対してそれすらも耐えうるような
E2Eテストを作るというのがどうしても難しいので
今はそれを全部手動でというか
人力でチェックをしているというところがありまして
競技が終了したタイミングで採点が終わるんですけれども
その後に採点したスコアの上位の人から
一個ずつ人力でチェック表みたいな
テスト項目書みたいなのが存在していて
それを一個ずつ人力で見て
ここは大丈夫とかこれはダメだったみたいなところで
レギュレーションチェックという感じでやっているんですが
なかなかレギュレーションチェックを通りにくいというか
チューニングしていく中で壊れてしまうというところも
割とあったりはするので
その辺が上位3つだけチェックすればいいのかというと
実はそういうわけではなかったりするパターンが結構多くて
レギュレーションチェックがすごい時間かかっちゃうというところはあるなというところと
最初の上位の人とかはすごく点数高かったりするので
その分すごい高速なアプリケーションになっていて
サクサクチェックできるんですけれども
だんだん下の順位までチェックしないといけないとなってくると
チューニングがそこまで進んでいなかったりするので
元のすごく重いアプリケーションを
平飾るを得ないような形になってきたりして
そこの中でレギュレーションチェックするというのが
なかなか難しかったりというところもあったりしますね
そうですね
あと第2回からあったものでいうと
ログイン機能があって一応軽く認証みたいなのがあったんですね
第3回も軽い気持ちでちょっと軽く入れとくかと思って入れたんですけど
意外とそれが罠になったみたいで
社員向けだとさすがにあんまりなかったんですけど
学生向けだと結構最後に早くするために
CDNにキャッシュさせようと思って
雑に全部キャッシュにつけたら
認証周りに置くやつもキャッシュがついてしまって
ちゃんと機能しなくなってしまったとかも意外とあったりして
意外とそこら辺の罠みたいなのがあったな
というのはちょっと思ったりしましたね
最初に初回アクセスのはずなのにログインできてるみたいな
そうですね
実際のプロダクトでやったらインシデントみたいな感じですけど
なかなか聞いてる方たち
実際に怒り得そうなことでもありそうですけど
正しく使うのはすごい重要なので
いい量いいんじゃないかなとは思ってますね
ちなみに第4回は考えていらっしゃるんですか?
そうですね
第4回2013ということで
開催を今まさに準備を進めているところで
年明けの3月4日と5日の第1週目ですかね
第1週目の土日に開催しようかなと思って準備しています
どんなことを今やろうとしてるんですかね
言える範囲で全然変わらないんですけども
どんなことをそうですね
ドラくんは参加者として出たいみたいなので
あんまり大きなネタバレができないですけど
大丈夫ですよ
ここに今聞いてる皆さんも参加者として参加できるので
同じ条件ですね
今回は一番大きく変わるのがあれですよね
学生向けでやってたのと一般向けにやってたのを
統合して一緒のタイミングでやろうという話を
今している最中なので
一般の方は1ヶ月期間が結構長めにやってたんで
長い期間でコツコツやってらっしゃる方も
多かったかなっていう気がするんですけど
2日間は難しいですよ
確かに
というところと新しく試みとしてやってみたいな
と思っているのは
Lighthouseのスコアだけだとどうしても
チューニングするポイントみたいなのが
最初のランディング時のパフォーマンスだけになっちゃう
っていう問題はあって
ウェブのパフォーマンスって
ランディングだけじゃないはずなんですよね
その後使っていくところに対しての
ユーザビリティ向上みたいなところもあると思うので
実際使ってみてのスコアが
何かしらの方向で取れないかなみたいなのは
今検討しているところですね
そうなんですね
他にもこういったことを学びたいっていう人がいたら
ぜひ参加してくださいみたいなところってありますか?
そうですね
まだそんなに決まってないんですよね
まだそんなにできてないっていうところはあるんですけれども
今回も第2回第3回と同じように
やっぱり基本的なところというか
これはパフォーマンスチューニングとして応答だよね
みたいなところももちろん組み込んでいこうかなとは思っているので
そういったパフォーマンスチューニングを
これから学びたいであるとか
ちょっと興味があるんだけれども
どういうところの知識をつけていけばいいのか
わからないよみたいな
そういうような方でも十分楽しめるような形の
素材にまた今回もしていければなと思っているので
そういった方にもぜひ挑戦していただきたいなと思いますし
2日間の限定された時間でやっていくというところと
先ほどの新しい計測の仕組みというか
新しい計測の方法でもやっていくという
そういう新要素ももちろん入れていこうと思っているので
これまで楽しんでいただいた方にも
ぜひまたしても挑戦していただければなと思っています
ありがとうございます
ぜひいろんな方に参加していただきたいですね
次回は僕もできれば出たいなと思っているので
ぜひぜひ出てください
というわけで本日も時間になったんですけれども
今日改めて振り返ってみての感想とかってどうでしたか
そうですね
ウェブスピードハッカソンはもともと自分のエゴみたいな形で
やりたいと思ったので始めたみたいなところではあるんですけれども
そこを運営というか出題を引き継いで
宮城くんとドラくんと引き継いでくれたというところもありますし
いろんな業界的にも結構ウェブスピードハッカソンを
楽しんで参加していただいている方であったりとか
それを社内のイベントとして
開催していただいているような会社さんであったりとか
そういう業界的な広がりも結構生まれてきているのかなという気がしているので
そういった自分がまいた種みたいなのが
広がってきているっていうのはすごい嬉しいなと思いますし
これからも継続的にやっていければなというふうに思っています
なるほど
竹内さんはどうでしたか
そうですね
結構最初は作文側になるっていうのは緊張もあったんですけれども
やっぱりいろんな方に解いていただけているのはすごい嬉しいなと思うし
やっぱり解いていただく方がたくさんいてこそのスピードハッカソンだと思うので
改めてそこに感謝しつつ
次回の開催は自分も今度はまた参加側として参加しようと思うので
楽しみにしていたいと思います
ぜひまたチャンピオンを取っていただいて
次の人代でしょうか
宮城さんどうでしたか
そうですね
ウェブスピードハッカソンって僕個人の思いとしては
パフォーマンスチューニングだけじゃないところが大きいかなと思っていて
一つのアプリケーションを提供しているようなんですよね
そういったところがアプリケーションを作る上での
勉強にすごくなるとは思っていて
例えば初学者の人がまず最初にやるのは
トゥートアプリとかだったりすると思うんですけれども
もっと発展的なものを作りたいっていうときに
参考になるものはあんまり世の中ない気がするんですよね
僕らも結構真剣にアプリケーションを作っていますので
ある程度皆さんにもお見せする前提で作っているので
そこから学び取れるところは結構あるとは思っていて
僕自身も学べるし皆さんも学べるしっていうところで
お互いウェブの業界を良くしていけたらなというふうには思っています
ありがとうございます
今日実際話してお聞きしてなかなか以前から気になっていたんですけれども
裏話とかも本当にたくさん聞けて
これからどうなっていくかっていう話も聞けて
本当にいい回になりました
また今後もウェブスピードハッカソンをどんどん続けてもらって
CA全体の大きなイベントとして大きくなっていければなと思っています
本日は本当に皆さんお忙しい中参加していただいてありがとうございます
本当に楽しかったです
今回もマディウェブポッドキャスト収録を終わりにいたします
皆さん本当にありがとうございました
ありがとうございました
バイバイ

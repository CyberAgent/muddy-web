マディウェブポッドキャストは マディの意味が泥であるように
ウェブフロントエンドの開発現場 における泥臭い話などから学び
を得ることを目的とし実際に明日 から使えるかもしれないウェブ
フロントエンド知識や技術を参加 者の皆様と共有し合うことを通
してフロントエンド界隈の役に 立てるように思いを込めて発信
しています
はいではマディウェブポッドキャスト 始めていきたいと思います今回
はゲストにアベマTVからお越しい ただいております 宮城まさひろ
さんが来ていただいております
宮城まさひろといいますサイバー エージェントに入社したのが2019
年で新卒で入社したんですけれども そのときからアベマTVに配属
になって今はアベマっていうプラットフォーム になっていますけれどもそこで
ずっとウェブのフロントエンド として開発をやっています
今回はワールドカップで試合と 一緒にその試合のゴール数とか
そういったものが見れるような 機能を開発したんですけれども
その開発したときのウェブのフロント の話とかができたらなと思います
よろしくお願いします
はいよろしくお願いしますそうですね 今回話していくタイトルもアベマ
TVでワールドカップのところが あったのでそのような開発で使用
したウェブビューのところの導入 の話をしていきたいと思うんですけ
れども導入するにあたった経緯 としてどんなことがあるんですか
まず試合を見ながらその試合の データを見るみたいなところの
体験っていうところはやっぱり 今回はワールドカップで提供
したいねっていう話にはなって いてそれを提供するにあたって
ウェブのブラウザー版とあとは アプリ版この2つで提供しよう
っていう話が進んでいたんですね この2つで提供するにあたってそれ
ぞれネイティブのアプリで実装 してウェブのアプリでも実装して
ってなるとやっぱりなかなか構 数が大きくなってしまうっていう
ところがあってワールドカップ の期間っていうのもワールドカップ
やりますっていう話をしてから そんなに期間が多く取れたわけ
でもないのでできれば共通化して 同じコードで出せたらいいねっていう
話がありましてそこからいろんな 手段を検討して最終的にウェブビュー
でやるといいんじゃないかっていう 話に落ち着いたっていう形ですね
なるほど確かにいろんな方が見る からいろんなブラウザーとかデバイス
とかを考慮しなきゃいけないです けどねその中でウェブビューを
導入するにあたって多分これから いろいろ泥臭い話を聞けるんじゃない
かと思っていてるんですが辛み とかって一番辛かったなみたい
なのってあるんですか 今回ウェブビューブラウザー版
だとiFrameでやってるんですけれども ウェブビューとiFrameでここが一番
難しかったなっていうところで 言うと多種多様なデバイスで使わ
れてるのでそれらでちゃんと動く っていうところを担保しなきゃ
いけないっていうところがなかなか 設計として難しかったところかな
っていう気はしています あとから 追加するっていうところになる
んでこの機能のためだけにじゃあ このOS以下は使えないようにします
みたいなのはちょっとさすがに 無理があるよねっていうところ
があって今サポートしてる範囲 は一通りサポートしつつちゃん
と動くように作るみたいなところ の調査から始めたっていうところ
が結構大きかったかなと思います なるほど結構じゃあ調査から始
めてどんなこと調査してたんです かね最初なんか結構バージョン
これ以上を対象にするとか そうですね基本的には一通りサポート
したいねっていう気持ちではい たので最低どのくらいのバージョン
をサポートしないといけないのか っていうところでいろいろ調査
をしてたんですけれどもAndroid とかiOSとかはわりと公式にちゃん
とそういうことが書いてあった りするんでそこまで調査に手間
は取らなかったんですけれども 逆にあるんですか書いてなかった
ものが ファイヤータブレットのアベマ
はサポート範囲に含めてるんです けれどもそのファイヤータブレット
で使われてる搭載されてるWebView っていうところが公式の情報として
はなかったんですよねグロミウム ペースだっていうことだけは公式
のドキュメントに書いてあるんですけど どのバージョンのグロミウム
から使われてるのかみたいなところ がどうしても書いてなくってそこ
ら辺の調査が結構難航したんです けど最終的にはファイヤータブレット
のOSのアップデートデータっていう のが公式は出てるんでそのアップデート
データを解析して中のアプリチュース してそこの中のアプリのバージョン
どういうバージョンがかかってる のかっていうのを調べるように
してスクリプト組んでみたいな ことをやったりしてますねそこら
辺の情報とかもオープンソース で公開できたらなっていう形で
置いてはいるんですけども結構 古いバージョンだと古いブラウザ
だったりしてたんで調べてみて よかったなっていう感じですね
確かに古いバージョンブラウザ 結構Web開発とかだとWebViewだけ
じゃなくてもなかなかボトルネック になってくるんじゃないかなと思
ったんですけど今回の導入にあた って古いバージョンに関してAPI
とかそういったところで苦労とか されましたか
そうですね結構スタイリング周り で辛かったところで言うとCSSグリッド
がまず対応してないようなブラウザ から始まってくるんで
ありますね
今回実際に試合でいった機能を 使ってくださった方が見てもらうと
分かるかもしれないんですけど それなりに複雑な画面構成には
なっていてその複雑な画面構成 をどうCSSグリッドなしでFlexbox
は最低限使えたのでFlexboxで実現 するかみたいなところはなかなか
難しかったかなと思います
開発の中でもスタイリングに制約 かけるとかあったと思うんですけ
ども制約の中で開発するにあた って開発の環境を良くしていこう
みたいなことの仕組みとかって それに合わせて変えていったんですか
ね
そうですね実際そういう制約がある ってことは分かっていたのでその
制約の中でどうストレスなく開発 できるかっていうところでいろいろ
取り組みをしてたんですけどその 中の一つではリンターでしっかり
縛ろうっていうところが結構重視 していたところでどうしてもCSS
グリッド使えないっていうこと が分かっててもCSSグリッドを書
いちゃうっていうところはあったり するんですけどデバッグするとき
って古いブラウザーを動かしながら デバッグするっていうのもでき
なくはないんですけど開発効率 的にはやっぱり今手元にあるブラウザ
で実装しながら開発するとは思 っていてそういった中で無意識
のうちにCSSグリッド組んじゃって 実際レプロイしてみたら動きません
だとやっぱり開発サイクル的な ところでも遅くなっちゃうっていう
ところがあるとは思っています そういったところをリンター
で制約かけることはしていて ESリントとかスタイルリントでこの
ブラウザのバージョンより下の ものだと使えないみたいなのは
どの機能が使えてどの機能が使 えないのかみたいなのをリント
するっていうリンターを今回作 ったりしています
自作で作ったんですか そうですね今回のためにESリント
のほうは既存だったんですけど スタイルリントのほうは今回独自
で作っていてここら辺のブラウザ でどのくらい使えるかみたいな
ところっていうのがキャナユーズ とかあると思うんですけども最近
だとMDNで提供されてたりするので そのMDNの情報を元にリントして
くれるみたいなところを作った りしてましたね
MDNの情報をあらかじめテキスト か何かデータとして引っ張って
きといてリンターのルールに載 せるって感じじゃないですかね
それとも毎回API叩いてみたいな 感じなんですか
中の情報がMDNのブラウザ対応 の情報が実はパッケージとして
提供されていて そのJSONデータをもとにどのスタイル
リントが使えるみたいなのを判別 してくれるっていう形になっています
上にですねウェブ開発にあったら 全然ぜひそれオープンしてもら
いたいぐらい便利そうな気がします が
スタイルリントのほうはオープン で作っていて既に公開していて
自分のGitHubのレポジションの下 にあるんですけども
じゃあぜひお聞きの方はレポジション に飛んでもらっていいねスター
をつけてもらいたいですね
そうですねぜひ使ってもらえたらな と思います
結構使えそうなんですか他の開発 でも聞いてると全然使えそうな
気がしますか
そうですね割とどういう開発でも 使えるかなっていう気がしていて
最近のブラウザだとエバーグリーン で常にアップデートするっていう
形にはなってると思うんですけど それでもやっぱり2ブラウザ遅れて
みたいなところはあったりはする と思うんでどうしてもずっと使える
機能使えない機能っていう境目 みたいなこの問題は残っていく
とは思うんですよねそういった ところでは活用する機会がある
かなっていうふうには思います
なるほどそういったリンターとか ルール決めとかをちゃんとしっかり
やって開発に臨むっていうこと やってたんですね確かに短い期間
の中で開発を効率よくやっていく のってそういったルールから決めて
いくのって大事ですよね確かに
そうですね他にも結構ルール開発 したところはあって
他には何かあるんですか
今回デザイントークンっていう まででもないんですけどデザイン
を作る上でこういった値をベース にこの値の倍数で組んできます
みたいなルールがあったりして 例えば何かの文字と文字の間の
スペースマージンとかは4ピクセル の倍数にしましょうみたいなそう
いったルール決めとかあったり するんですけどそういったところ
に対してCSSパリアムズ使って変数 としておいて設定していきましょう
みたいなときに組んでるとやっぱり 直で変えちゃうみたいなところ
があったりしてCSSパリアムズ使 ってないよねみたいなところの
レビューの指摘が何回かあった りはしたんですよね
何回かあった順でこれはLinterで 制御したほうが多分レビューコスト
が低くなるだろうというところ でLinter導入したりとかっていう
のは実際ありましたね
なるほど確かにルールから外れたら 自動で検知してくれるみたいな
感じなんですね
そうですねそうするとやっぱり レビューコストが低くなるのも
あるし開発のサイクルも手元で Linter回せば気づけるので毎回
CI回さなきゃいけないとか相手の レビュー待って数時間後に違います
って聞くよりかは断然いいかな っていう感じですね
確かによくありますよね2時間後 レビューいただいたらここ直して
ください1行だけ直すみたいな
そうなんですよね
がよくあるからでも確かに結構 自動化大事ですよね
スタイルの話を今話しましたけども そういうスタイル決めのルール
決めってやっぱりデザイナーさん と結構深く関わっていってやって
いったんですか
そうですね結構スタイル周りは デザイナーと相談しながらやって
たのでそこら辺のデザインどういう ふうにやってたのかみたいなのは
サイバーエージェントのデベロッパー ブログのほうで記事投稿したり
するんでもしよかったらそちら も読んでもらえたらと思うんですけ
れども
ぜひ見てください
いろいろ新しい取り組みがあった ので密に連携しながらデザイン
は組んでいきましたね
なるほどデザインを実装していく 中で出来上がった成果物とかを
確認する作業っていうのが入る かと思うんですけどもその中で
開発環境の仕組みの改善でそう いったプロセスの効率化とかって
どこか工夫したところとかって ありますか例えばさっき言った
スタイルで新しいバージョンじゃない と動かないとかの確認っていう
のは実際にブラウザを開いてやって いったのかそれともはたまた違う
ツールで例えばストーリーブック とかでやったのかそういった
感じの工夫とかってされて開発 されたんですかね
そうですね結構スタイル周りについて は古いブラウザでは動かないみたいな
ところは結構大いにあり得るとは 思っていたのでその古いブラウザ
をまず動かすっていう環境を作った っていうのがまず一つあります
Dockerの中で古いChromiumをインストール してそのChromiumを動かしてあとは
VNCですねDockerで中でChromiumを動かして そのDocker上で仮想デスクトップ
上で古いChromiumが動かせるみたいな 環境は作りましたそれを作ると
ストーリーブックとか作ってあれば そこで動かせるのでストーリーブック
も用意してストーリーブック上で 確認するみたいなのをやったり
したんですけどストーリーブック 結構最近のブラウザに特化して
作られててIEの対応とかも最近確か なくなったかと思うんですけど
そんなんで動かなかったりして そこら辺のモンキーパッチを自
前で書いたりしたのはちょっと 努力さかったかなっていう気は
してますね
大変そうですねそうすると毎回 確認してそういうバグというか
動かないところがあるとそれごとに モンキーパッチをしていくみたいな
形にしてたんですか
ストーリーブックが動かなかった みたいなところに関してだけで
言うと実際に試してみて動かなかった ところで他の手段があれば他の
手段に変えたりとかあとはパッチ が当てれば動くみたいなところ
であれば手元でパッチ当てて動かす みたいな感じでやってはいました
基本的にはそんなにいろいろ調整 しないと動かないっていうこと
ではなかったんですけどたまに 動かないアドオンとかがあったり
したんでそういったところを調整 したりとかはしましたね
なかなか難しいコースにかかる ような結構その辺でコースって
取られましたか
それなりに動かなくなって対応 みたいなのはあったにはあったん
ですけどだからといってそれの 対応ばかりに追われて結構大変
だったっていうわけでもなくて 割とついちょっと前まではIEの
対応みたいなのが入ってたライブラリ が結構ウェブの界隈が多いので
交互感性みたいなところは割と まだ残ってるようなライブラリ
は多くて時折直さなきゃいけない けれどもむちゃくちゃがっつり
それのためにコースが逆らっちゃう みたいなほどではなかったかな
という気がしますね
じゃあそこまでなかったわけですね なんか聞いてると実際にそういう
ふうに環境を整えていって開発 でした恩恵って結構やっぱりあり
ましたか
ストーリーブックでレンダーした コンポーネントに対してスクリーン
ショット撮ってそのスクリーン ショットの差分を撮るみたいな
ビジュアルレギュレーションテスティング も導入していてこれのおかげで
今回描いたスタイルがリントも ちょっとすり抜けちゃってうまく
動いてないみたいなところに関して は差分があれれば気づけるっていう
ところが作れたところとかあとは スクリーンショットが全コンポーネント
に対して撮れてるのでそのレビュー のときに新しく追加されたスクリーン
ショットさえ見れば古いブラウザ でちゃんとレンダーできてるか
できてないかっていうのがすぐ 分かるっていう状態が作れたの
が開発効率の中ではすごく良かった 点で実際にやってみたらむちゃ
くちゃ崩れてるみたいなのは往々 にしてあったので
そうなんですね
なので用意しておいてすごく良かった なって思ってますね
結構じゃあブラウザーごとにスクリーン ショットを撮って差分を検知して
バージョンごとっていうんですか
一番古いバージョンに合わせて 取り入れましたねやっぱりブラウザ
全部で撮るってなるとコストが でかいので今回対応するブラウザ
で一番古かったのがAndroid 5のとき のWebViewAndroidのWebViewってアップ
ストアから更新できるようには できるんですけど更新したい
ユーザーもやっぱりいるので一番 最低限のバージョンってなると
Chromiumの372014年の頃のブラウザ らしいんですけど
だいぶ前ですね
Chromium 37のときのスクリーンショット だけでチェックしてます
なるほど結構古いブラウザのところ からも見てそこを基準としてやって
いたわけですね
そうですね
結構テストとか細かくやってる ような他に単体テストとかって
入れてましたか
さっきまでスタイリングの話が 結構主な話だったんですけれども
ライブラリーをどうしても使って 開発していく上でライブラリー
の中までってなかなか精査ができない っていうところはあってこのライブラリー
を使ったときにライブラリーの 内部で必要なポリフィールが読み
込まれてないよねとかそういった ところに気づくためにも単体テスト
をブラウザ上で動かすみたいな ところを今回意識して技術選定
をしたっていうところがあります
単体テストをブラウザ上で動かす と言いますと
単体テストって今だと結構ノード JS上で動かすことが多いかなと思
っていてJSとかあとはAVAとかあとは VTestとかもそうですけどああいう
のって基本的にはノードJS上で 動かしてもしROMとかが必要だったら
JS DOMみたいな仮想的なDOM入れて 回すみたいなのがあると思うん
ですけどそれではなくて実際に テスト書いたコードをブラウザ
上でそのまま動かしてテストする みたいなので有名なのがKarmaっていう
ライブラリーがあるんですけど そのKarmaを使ってブラウザ上で
動かしたっていう形になります
関数を作られたライブラリーなどの 関数をブラウザ上でただ動かして
動作がちゃんと動くかどうかの 確認をするテストみたいな感じ
ですかねイメージとしては
ライブラリー自体をテストする っていうよりかは実際に使ってる
単体テストの普通の手元のコード に対してのテストで使ってるライブラリー
自体が動かなかったらそもそも 自分たちのコードも動いてない
はずなんでテスト落ちるよねみたいな イメージで設計してたって感じ
ですねなので単体テスト自体は 多分普通の開発と同じ感じで書いて
はいるんですけど
なるほど結構今先ほど話に出て きた中でJSTとかを使ってバーチャル
のDOM使ってテストするっていう のはやらなかったってことですか
一応そっちも導入はしていてなんで 両方あるのかっていう話をする
とどうしてもブラウザで動かす と速度が遅いんですよね全ての
テストを通してやるまでにどう してもGUIを動かしてるんでメモリ
も苦しいみたいなところはあって やっぱりノードジェス上で回す
テストみたいなところもローカル でとりあえず開発して最後動く
かどうか確認するみたいなところ のテストを書いてコード修正自体
のサイクルはやっぱり早く回せた ほうがいいし確かに長期的なところ
でいうとCIとかも実際のPR上では ノードジェス上でテストして最終
リリースするときとかにブラウザ でテストするみたいな使い分け
みたいなところも将来的にはできる かなっていうところは考えて両方
とも用意はしてます同じ単体テスト で動かすことしか変えられるよう
になってるんで核側としてはテスト 一つなんですけれども動かす環境
がブラウザとノードジェスで自分で 好きなほうを選べるみたいな状態
になってます
なるほど二つ用意して選んで状況 に応じて速度とかも考慮した上
でテストをしていくって感じなん ですよね
そうですね
すごいいいですねそれやっぱり ローカルテストするのとやっぱり
CIでテストするのってなかなか 速度も変わってきますし見る大事な
ソフトウェアとかも変わってくる から大事なところですよね
でも今のお話を聞いてるだけでも テストだけでもいろんな工夫が
されてるからそれゆえの成功が あるんじゃないかなと思うんですけ
ど例えば今古いバージョンのブラウザ とかの話を結構よくしてました
けども逆にモダンのブラウザに 対してのアプローチとかって何か
工夫されたこととかってあるんですか
今結構古いブラウザの話をして るんですけども古いブラウザには
やっぱり動かすためにはいろんな ポリフィルを入れなきゃいけない
とかっていう話はあってポリフィル を入れるとどうしてもJavaScript
のバンドルサイズっていうのは 肥大化していくっていうところ
があるんですけどみんなはみんな 古いブラウザを使ってるわけではない
のでモダンブラウザを使ってる 人にはもちろんもうちょっと軽量
なバンドルのJavaScriptを提供した いよねっていう話はあります
今回やったのがESモジュールを 使えるブラウザと使えないブラウザ
で提供するJavaScriptを分けるっていう 手法があってなんて説明すれば
いいんだろうスクリプトタグの 普通のスクリプトタグを書くと
今までの普通のJavaScriptが輸入 込まれるんですけどもESモジュール
に対応してるスクリプトをスクリプト タイプモジュールとかってやって
あげるとESモジュールが対応してる ところだけブラウザだけ読み込む
スクリプトはそっちのほうになる みたいなやり方があるんですけど
それでどっちのスクリプトを使う かっていうのを出し分けしてたり
します
モジュールを使うと結構軽くなる
モジュールを使うと軽くなるという かは出し分けにこれ言葉で説明
するの無理だなちょっとやめます か
結構図とかないと難しい
そうですねコールかけが一発間違い なんですけど
でも基本はブラウザがモジュール に対応してるか対応してないか
を見て読み込むスクリプト先を 変えているみたいなスクリプト
ですね
基本的には確かChromiumの50なん ちゃらぐらいから使えるようになる
んで
そこら辺が境目になってそれより 古いブラウザにはもうちょっと
大きいJavaScriptを提供して新しい ブラウザにはいらないプリフィル
を削ったもうちょっと軽量なJavaScript を提供してっていうのをやって
ます
それのプリフィルの出し分けみたいな ところも基本的にはバベルのプラグイン
のバベルプリセッテンブっていう プラグインがあると思うんですけど
あれを使うと設定したブラウザリスト に対して対応するプリフィル
が入る入らないっていうのが指定 できるんですけどそれのデメリット
として基本的にはCore.jsのプリフィル に対しての出し分けになっちゃ
うんですよね
Core.jsってJavaScriptに対して ECMAScriptに対してのプリフィルが
メインなんですけども今回使ってる のってWeb APIもいくつか使ってる
のでWeb API自体の出し分けどうしよう みたいな問題はありました
フェッチが使えるブラウザとフェッチ が使えないブラウザでフェッチ
のプリフィル入れるか入れない か変わると思うんですけどそれ
がプリセッテンブラと切り分け ができないっていうところで今回
それもちょっと課題ではあった のでそれもプラグインを今回自作
して対応したりしてますそれも MDNのデータ使ってWeb API対応して
ればプリフィル入れるし対応しなかったら 入れないっていうのをやったりしてます
プラグインも自作して本当にもう ブラウザに最適化するような仕組み
をどんどん作っていったっていう 形なんですね
そうですね今回はモダンな開発 しつつLegacyブラウザに対応する
みたいなところではあったので そこのモダンな開発にうまく寄せる
ためにいろいろツールを作った りしました
なるほどそれのおかげでも幅広い 層のユーザーが見れることができましたね
そろそろ時間もなってきました が今回このマディウェブのポッドキャスト
で改めて振り返ってみて感想とか ってありますかどうでしたか
そうですね結構Legacyブラウザって 今だとIE11がなくなって割とみんな
気にしなくなってきたところだ とは思うんですけれども何らかん
だずっと更新されないで残ってる ブラウザっていうのはやっぱり
世の中あってこういったLegacyに 対応しつつモダンな開発をして
いくみたいなこのノウハウ自体 はIEがなくなった後にも知識として
残っていくといいのかなっていう ふうには思ってます
今回ウェブビューの話をしました けど他にも結構組み込みのブラウザ
とかはずっと古いまま残ってる ものとかも結構あったりするので
そういったところでも使えるノウハウ になってくるのかなっていう気は
してます
そうですね結構ウェブブラウザ 今後もどんどん進化してきます
し古いブラウザなんかもIEみたい にどんどん切り捨てられていく
未来かもしれませんしそういった ところで今回のようなことを参考
していただけるといい未来が見 れるんじゃないかなと思います
ね
本日はいろいろと驚くさい話聞 けて本当によかったですお越しいただ
いた三浦さんありがとうございました ありがとうございました
では聞いてる皆さんもまた会い ましょう
ではバイバイ

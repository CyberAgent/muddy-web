WEBVTT

00:00.000 --> 00:04.880
マディウェブポッドキャストは マディの意味が泥であるように

00:04.880 --> 00:09.120
ウェブフロントエンドの開発現場 における泥臭い話などから学び

00:09.120 --> 00:13.520
を得ることを目的とし実際に明日 から使えるかもしれないウェブ

00:13.520 --> 00:18.280
フロントエンド知識や技術を参加 者の皆様と共有し合うことを通

00:18.280 --> 00:22.800
してフロントエンド界隈の役に 立てるように思いを込めて発信

00:22.800 --> 00:23.800
しています

00:23.800 --> 00:28.880
はいではマディウェブポッドキャスト 始めていきたいと思います今回

00:28.880 --> 00:33.840
はゲストにアベマTVからお越しい ただいております 宮城まさひろ

00:33.840 --> 00:36.080
さんが来ていただいております

00:36.080 --> 00:40.200
宮城まさひろといいますサイバー エージェントに入社したのが2019

00:40.200 --> 00:45.440
年で新卒で入社したんですけれども そのときからアベマTVに配属

00:45.440 --> 00:50.000
になって今はアベマっていうプラットフォーム になっていますけれどもそこで

00:50.000 --> 00:53.680
ずっとウェブのフロントエンド として開発をやっています

00:53.680 --> 00:58.680
今回はワールドカップで試合と 一緒にその試合のゴール数とか

00:58.680 --> 01:01.080
そういったものが見れるような 機能を開発したんですけれども

01:01.080 --> 01:05.200
その開発したときのウェブのフロント の話とかができたらなと思います

01:05.200 --> 01:06.280
よろしくお願いします

01:06.280 --> 01:11.160
はいよろしくお願いしますそうですね 今回話していくタイトルもアベマ

01:11.160 --> 01:15.920
TVでワールドカップのところが あったのでそのような開発で使用

01:15.920 --> 01:19.560
したウェブビューのところの導入 の話をしていきたいと思うんですけ

01:19.560 --> 01:25.160
れども導入するにあたった経緯 としてどんなことがあるんですか

01:25.160 --> 01:29.040
まず試合を見ながらその試合の データを見るみたいなところの

01:29.040 --> 01:33.040
体験っていうところはやっぱり 今回はワールドカップで提供

01:33.040 --> 01:37.280
したいねっていう話にはなって いてそれを提供するにあたって

01:37.280 --> 01:41.600
ウェブのブラウザー版とあとは アプリ版この2つで提供しよう

01:41.600 --> 01:46.640
っていう話が進んでいたんですね この2つで提供するにあたってそれ

01:46.640 --> 01:51.200
ぞれネイティブのアプリで実装 してウェブのアプリでも実装して

01:51.200 --> 01:54.600
ってなるとやっぱりなかなか構 数が大きくなってしまうっていう

01:54.600 --> 01:59.520
ところがあってワールドカップ の期間っていうのもワールドカップ

01:59.520 --> 02:04.200
やりますっていう話をしてから そんなに期間が多く取れたわけ

02:04.200 --> 02:09.400
でもないのでできれば共通化して 同じコードで出せたらいいねっていう

02:09.400 --> 02:16.160
話がありましてそこからいろんな 手段を検討して最終的にウェブビュー

02:16.160 --> 02:20.080
でやるといいんじゃないかっていう 話に落ち着いたっていう形ですね

02:20.080 --> 02:25.600
なるほど確かにいろんな方が見る からいろんなブラウザーとかデバイス

02:25.600 --> 02:30.480
とかを考慮しなきゃいけないです けどねその中でウェブビューを

02:30.480 --> 02:34.960
導入するにあたって多分これから いろいろ泥臭い話を聞けるんじゃない

02:34.960 --> 02:40.640
かと思っていてるんですが辛み とかって一番辛かったなみたい

02:40.640 --> 02:44.160
なのってあるんですか 今回ウェブビューブラウザー版

02:44.160 --> 02:49.000
だとiFrameでやってるんですけれども ウェブビューとiFrameでここが一番

02:49.000 --> 02:54.120
難しかったなっていうところで 言うと多種多様なデバイスで使わ

02:54.120 --> 02:57.360
れてるのでそれらでちゃんと動く っていうところを担保しなきゃ

02:57.360 --> 03:00.800
いけないっていうところがなかなか 設計として難しかったところかな

03:00.800 --> 03:05.120
っていう気はしています あとから 追加するっていうところになる

03:05.120 --> 03:09.320
んでこの機能のためだけにじゃあ このOS以下は使えないようにします

03:09.320 --> 03:12.480
みたいなのはちょっとさすがに 無理があるよねっていうところ

03:12.480 --> 03:17.320
があって今サポートしてる範囲 は一通りサポートしつつちゃん

03:17.320 --> 03:20.680
と動くように作るみたいなところ の調査から始めたっていうところ

03:20.680 --> 03:26.080
が結構大きかったかなと思います なるほど結構じゃあ調査から始

03:26.080 --> 03:29.600
めてどんなこと調査してたんです かね最初なんか結構バージョン

03:29.600 --> 03:35.280
これ以上を対象にするとか そうですね基本的には一通りサポート

03:35.280 --> 03:39.440
したいねっていう気持ちではい たので最低どのくらいのバージョン

03:39.440 --> 03:42.680
をサポートしないといけないのか っていうところでいろいろ調査

03:42.680 --> 03:48.040
をしてたんですけれどもAndroid とかiOSとかはわりと公式にちゃん

03:48.040 --> 03:52.000
とそういうことが書いてあった りするんでそこまで調査に手間

03:52.000 --> 03:54.440
は取らなかったんですけれども 逆にあるんですか書いてなかった

03:54.440 --> 03:57.840
ものが ファイヤータブレットのアベマ

03:57.840 --> 04:01.840
はサポート範囲に含めてるんです けれどもそのファイヤータブレット

04:01.840 --> 04:06.680
で使われてる搭載されてるWebView っていうところが公式の情報として

04:06.680 --> 04:11.160
はなかったんですよねグロミウム ペースだっていうことだけは公式

04:11.160 --> 04:13.960
のドキュメントに書いてあるんですけど どのバージョンのグロミウム

04:13.960 --> 04:18.560
から使われてるのかみたいなところ がどうしても書いてなくってそこ

04:18.560 --> 04:23.360
ら辺の調査が結構難航したんです けど最終的にはファイヤータブレット

04:23.360 --> 04:28.840
のOSのアップデートデータっていう のが公式は出てるんでそのアップデート

04:28.840 --> 04:34.720
データを解析して中のアプリチュース してそこの中のアプリのバージョン

04:34.720 --> 04:37.480
どういうバージョンがかかってる のかっていうのを調べるように

04:37.480 --> 04:42.400
してスクリプト組んでみたいな ことをやったりしてますねそこら

04:42.400 --> 04:46.800
辺の情報とかもオープンソース で公開できたらなっていう形で

04:46.800 --> 04:53.600
置いてはいるんですけども結構 古いバージョンだと古いブラウザ

04:53.600 --> 04:57.240
だったりしてたんで調べてみて よかったなっていう感じですね

04:57.240 --> 05:02.400
確かに古いバージョンブラウザ 結構Web開発とかだとWebViewだけ

05:02.400 --> 05:05.800
じゃなくてもなかなかボトルネック になってくるんじゃないかなと思

05:05.800 --> 05:11.840
ったんですけど今回の導入にあた って古いバージョンに関してAPI

05:11.840 --> 05:14.960
とかそういったところで苦労とか されましたか

05:14.960 --> 05:22.880
そうですね結構スタイリング周り で辛かったところで言うとCSSグリッド

05:22.880 --> 05:26.400
がまず対応してないようなブラウザ から始まってくるんで

05:26.400 --> 05:27.400
ありますね

05:27.400 --> 05:32.440
今回実際に試合でいった機能を 使ってくださった方が見てもらうと

05:32.440 --> 05:35.960
分かるかもしれないんですけど それなりに複雑な画面構成には

05:35.960 --> 05:41.760
なっていてその複雑な画面構成 をどうCSSグリッドなしでFlexbox

05:41.760 --> 05:46.920
は最低限使えたのでFlexboxで実現 するかみたいなところはなかなか

05:46.920 --> 05:57.240
難しかったかなと思います

05:57.240 --> 06:03.160
開発の中でもスタイリングに制約 かけるとかあったと思うんですけ

06:03.160 --> 06:08.960
ども制約の中で開発するにあた って開発の環境を良くしていこう

06:08.960 --> 06:12.680
みたいなことの仕組みとかって それに合わせて変えていったんですか

06:12.680 --> 06:13.680
ね

06:13.680 --> 06:19.520
そうですね実際そういう制約がある ってことは分かっていたのでその

06:19.520 --> 06:23.920
制約の中でどうストレスなく開発 できるかっていうところでいろいろ

06:23.920 --> 06:28.320
取り組みをしてたんですけどその 中の一つではリンターでしっかり

06:28.320 --> 06:34.120
縛ろうっていうところが結構重視 していたところでどうしてもCSS

06:34.120 --> 06:37.280
グリッド使えないっていうこと が分かっててもCSSグリッドを書

06:37.280 --> 06:41.200
いちゃうっていうところはあったり するんですけどデバッグするとき

06:41.200 --> 06:44.760
って古いブラウザーを動かしながら デバッグするっていうのもでき

06:44.760 --> 06:48.520
なくはないんですけど開発効率 的にはやっぱり今手元にあるブラウザ

06:48.520 --> 06:52.760
で実装しながら開発するとは思 っていてそういった中で無意識

06:52.760 --> 06:57.000
のうちにCSSグリッド組んじゃって 実際レプロイしてみたら動きません

06:57.000 --> 07:00.840
だとやっぱり開発サイクル的な ところでも遅くなっちゃうっていう

07:00.840 --> 07:04.600
ところがあるとは思っています そういったところをリンター

07:04.600 --> 07:10.440
で制約かけることはしていて ESリントとかスタイルリントでこの

07:10.440 --> 07:14.840
ブラウザのバージョンより下の ものだと使えないみたいなのは

07:14.840 --> 07:18.000
どの機能が使えてどの機能が使 えないのかみたいなのをリント

07:18.000 --> 07:22.840
するっていうリンターを今回作 ったりしています

07:22.840 --> 07:26.680
自作で作ったんですか そうですね今回のためにESリント

07:26.680 --> 07:30.000
のほうは既存だったんですけど スタイルリントのほうは今回独自

07:30.000 --> 07:34.840
で作っていてここら辺のブラウザ でどのくらい使えるかみたいな

07:34.840 --> 07:38.760
ところっていうのがキャナユーズ とかあると思うんですけども最近

07:38.760 --> 07:44.040
だとMDNで提供されてたりするので そのMDNの情報を元にリントして

07:44.040 --> 07:48.040
くれるみたいなところを作った りしてましたね

07:48.040 --> 07:52.640
MDNの情報をあらかじめテキスト か何かデータとして引っ張って

07:52.640 --> 07:55.920
きといてリンターのルールに載 せるって感じじゃないですかね

07:55.920 --> 08:00.360
それとも毎回API叩いてみたいな 感じなんですか

08:00.360 --> 08:06.320
中の情報がMDNのブラウザ対応 の情報が実はパッケージとして

08:06.320 --> 08:11.040
提供されていて そのJSONデータをもとにどのスタイル

08:11.040 --> 08:14.320
リントが使えるみたいなのを判別 してくれるっていう形になっています

08:14.320 --> 08:20.040
上にですねウェブ開発にあったら 全然ぜひそれオープンしてもら

08:20.040 --> 08:22.480
いたいぐらい便利そうな気がします が

08:22.480 --> 08:28.760
スタイルリントのほうはオープン で作っていて既に公開していて

08:28.760 --> 08:31.680
自分のGitHubのレポジションの下 にあるんですけども

08:31.680 --> 08:36.360
じゃあぜひお聞きの方はレポジション に飛んでもらっていいねスター

08:36.360 --> 08:37.520
をつけてもらいたいですね

08:37.520 --> 08:40.440
そうですねぜひ使ってもらえたらな と思います

08:40.440 --> 08:44.440
結構使えそうなんですか他の開発 でも聞いてると全然使えそうな

08:44.440 --> 08:45.440
気がしますか

08:45.440 --> 08:50.160
そうですね割とどういう開発でも 使えるかなっていう気がしていて

08:50.160 --> 08:53.800
最近のブラウザだとエバーグリーン で常にアップデートするっていう

08:53.800 --> 08:57.760
形にはなってると思うんですけど それでもやっぱり2ブラウザ遅れて

08:57.760 --> 09:02.560
みたいなところはあったりはする と思うんでどうしてもずっと使える

09:02.560 --> 09:06.640
機能使えない機能っていう境目 みたいなこの問題は残っていく

09:06.640 --> 09:11.200
とは思うんですよねそういった ところでは活用する機会がある

09:11.200 --> 09:12.600
かなっていうふうには思います

09:12.600 --> 09:17.480
なるほどそういったリンターとか ルール決めとかをちゃんとしっかり

09:17.480 --> 09:22.960
やって開発に臨むっていうこと やってたんですね確かに短い期間

09:22.960 --> 09:27.320
の中で開発を効率よくやっていく のってそういったルールから決めて

09:27.320 --> 09:29.080
いくのって大事ですよね確かに

09:29.080 --> 09:33.240
そうですね他にも結構ルール開発 したところはあって

09:33.240 --> 09:34.400
他には何かあるんですか

09:34.400 --> 09:40.400
今回デザイントークンっていう まででもないんですけどデザイン

09:40.400 --> 09:45.320
を作る上でこういった値をベース にこの値の倍数で組んできます

09:45.320 --> 09:49.600
みたいなルールがあったりして 例えば何かの文字と文字の間の

09:49.600 --> 09:53.160
スペースマージンとかは4ピクセル の倍数にしましょうみたいなそう

09:53.160 --> 09:56.040
いったルール決めとかあったり するんですけどそういったところ

09:56.040 --> 10:00.720
に対してCSSパリアムズ使って変数 としておいて設定していきましょう

10:00.720 --> 10:04.680
みたいなときに組んでるとやっぱり 直で変えちゃうみたいなところ

10:04.680 --> 10:08.880
があったりしてCSSパリアムズ使 ってないよねみたいなところの

10:08.880 --> 10:12.680
レビューの指摘が何回かあった りはしたんですよね

10:12.680 --> 10:17.400
何回かあった順でこれはLinterで 制御したほうが多分レビューコスト

10:17.400 --> 10:20.920
が低くなるだろうというところ でLinter導入したりとかっていう

10:20.920 --> 10:22.400
のは実際ありましたね

10:22.400 --> 10:27.320
なるほど確かにルールから外れたら 自動で検知してくれるみたいな

10:27.320 --> 10:28.320
感じなんですね

10:28.320 --> 10:32.840
そうですねそうするとやっぱり レビューコストが低くなるのも

10:32.840 --> 10:38.160
あるし開発のサイクルも手元で Linter回せば気づけるので毎回

10:38.160 --> 10:42.680
CI回さなきゃいけないとか相手の レビュー待って数時間後に違います

10:42.680 --> 10:46.360
って聞くよりかは断然いいかな っていう感じですね

10:46.360 --> 10:50.240
確かによくありますよね2時間後 レビューいただいたらここ直して

10:50.240 --> 10:52.200
ください1行だけ直すみたいな

10:52.200 --> 10:53.200
そうなんですよね

10:53.200 --> 10:57.440
がよくあるからでも確かに結構 自動化大事ですよね

10:57.440 --> 11:10.200
スタイルの話を今話しましたけども そういうスタイル決めのルール

11:10.200 --> 11:14.600
決めってやっぱりデザイナーさん と結構深く関わっていってやって

11:14.600 --> 11:15.600
いったんですか

11:15.600 --> 11:20.800
そうですね結構スタイル周りは デザイナーと相談しながらやって

11:20.800 --> 11:25.160
たのでそこら辺のデザインどういう ふうにやってたのかみたいなのは

11:25.160 --> 11:28.320
サイバーエージェントのデベロッパー ブログのほうで記事投稿したり

11:28.320 --> 11:31.320
するんでもしよかったらそちら も読んでもらえたらと思うんですけ

11:31.320 --> 11:32.320
れども

11:32.320 --> 11:33.320
ぜひ見てください

11:33.320 --> 11:39.320
いろいろ新しい取り組みがあった ので密に連携しながらデザイン

11:39.320 --> 11:40.320
は組んでいきましたね

11:40.320 --> 11:47.320
なるほどデザインを実装していく 中で出来上がった成果物とかを

11:47.320 --> 11:52.160
確認する作業っていうのが入る かと思うんですけどもその中で

11:52.160 --> 11:59.600
開発環境の仕組みの改善でそう いったプロセスの効率化とかって

11:59.600 --> 12:03.520
どこか工夫したところとかって ありますか例えばさっき言った

12:03.520 --> 12:07.160
スタイルで新しいバージョンじゃない と動かないとかの確認っていう

12:07.160 --> 12:13.160
のは実際にブラウザを開いてやって いったのかそれともはたまた違う

12:13.160 --> 12:16.120
ツールで例えばストーリーブック とかでやったのかそういった

12:16.120 --> 12:20.000
感じの工夫とかってされて開発 されたんですかね

12:20.000 --> 12:25.320
そうですね結構スタイル周りについて は古いブラウザでは動かないみたいな

12:25.320 --> 12:29.960
ところは結構大いにあり得るとは 思っていたのでその古いブラウザ

12:29.960 --> 12:33.600
をまず動かすっていう環境を作った っていうのがまず一つあります

12:33.600 --> 12:40.000
Dockerの中で古いChromiumをインストール してそのChromiumを動かしてあとは

12:40.000 --> 12:48.320
VNCですねDockerで中でChromiumを動かして そのDocker上で仮想デスクトップ

12:48.320 --> 12:57.600
上で古いChromiumが動かせるみたいな 環境は作りましたそれを作ると

12:57.600 --> 13:01.160
ストーリーブックとか作ってあれば そこで動かせるのでストーリーブック

13:01.160 --> 13:05.480
も用意してストーリーブック上で 確認するみたいなのをやったり

13:05.480 --> 13:10.520
したんですけどストーリーブック 結構最近のブラウザに特化して

13:10.520 --> 13:16.600
作られててIEの対応とかも最近確か なくなったかと思うんですけど

13:16.600 --> 13:20.960
そんなんで動かなかったりして そこら辺のモンキーパッチを自

13:20.960 --> 13:25.280
前で書いたりしたのはちょっと 努力さかったかなっていう気は

13:25.280 --> 13:26.280
してますね

13:26.280 --> 13:32.200
大変そうですねそうすると毎回 確認してそういうバグというか

13:32.200 --> 13:37.320
動かないところがあるとそれごとに モンキーパッチをしていくみたいな

13:37.320 --> 13:39.040
形にしてたんですか

13:39.040 --> 13:42.280
ストーリーブックが動かなかった みたいなところに関してだけで

13:42.280 --> 13:47.480
言うと実際に試してみて動かなかった ところで他の手段があれば他の

13:47.480 --> 13:50.920
手段に変えたりとかあとはパッチ が当てれば動くみたいなところ

13:50.920 --> 13:55.480
であれば手元でパッチ当てて動かす みたいな感じでやってはいました

13:55.480 --> 14:00.400
基本的にはそんなにいろいろ調整 しないと動かないっていうこと

14:00.400 --> 14:03.840
ではなかったんですけどたまに 動かないアドオンとかがあったり

14:03.840 --> 14:08.200
したんでそういったところを調整 したりとかはしましたね

14:08.200 --> 14:13.880
なかなか難しいコースにかかる ような結構その辺でコースって

14:13.880 --> 14:16.120
取られましたか

14:16.120 --> 14:19.400
それなりに動かなくなって対応 みたいなのはあったにはあったん

14:19.400 --> 14:24.520
ですけどだからといってそれの 対応ばかりに追われて結構大変

14:24.520 --> 14:30.720
だったっていうわけでもなくて 割とついちょっと前まではIEの

14:30.720 --> 14:36.280
対応みたいなのが入ってたライブラリ が結構ウェブの界隈が多いので

14:36.280 --> 14:40.240
交互感性みたいなところは割と まだ残ってるようなライブラリ

14:40.240 --> 14:46.120
は多くて時折直さなきゃいけない けれどもむちゃくちゃがっつり

14:46.120 --> 14:49.960
それのためにコースが逆らっちゃう みたいなほどではなかったかな

14:49.960 --> 14:50.960
という気がしますね

14:50.960 --> 14:56.160
じゃあそこまでなかったわけですね なんか聞いてると実際にそういう

14:56.160 --> 15:01.720
ふうに環境を整えていって開発 でした恩恵って結構やっぱりあり

15:01.720 --> 15:02.720
ましたか

15:02.720 --> 15:06.280
ストーリーブックでレンダーした コンポーネントに対してスクリーン

15:06.280 --> 15:10.400
ショット撮ってそのスクリーン ショットの差分を撮るみたいな

15:10.400 --> 15:14.960
ビジュアルレギュレーションテスティング も導入していてこれのおかげで

15:14.960 --> 15:19.680
今回描いたスタイルがリントも ちょっとすり抜けちゃってうまく

15:19.680 --> 15:24.120
動いてないみたいなところに関して は差分があれれば気づけるっていう

15:24.120 --> 15:27.760
ところが作れたところとかあとは スクリーンショットが全コンポーネント

15:27.760 --> 15:33.120
に対して撮れてるのでそのレビュー のときに新しく追加されたスクリーン

15:33.120 --> 15:36.520
ショットさえ見れば古いブラウザ でちゃんとレンダーできてるか

15:36.520 --> 15:38.720
できてないかっていうのがすぐ 分かるっていう状態が作れたの

15:38.720 --> 15:44.160
が開発効率の中ではすごく良かった 点で実際にやってみたらむちゃ

15:44.160 --> 15:46.600
くちゃ崩れてるみたいなのは往々 にしてあったので

15:46.600 --> 15:47.600
そうなんですね

15:47.600 --> 15:51.760
なので用意しておいてすごく良かった なって思ってますね

15:51.760 --> 15:57.240
結構じゃあブラウザーごとにスクリーン ショットを撮って差分を検知して

15:57.240 --> 15:59.240
バージョンごとっていうんですか

15:59.240 --> 16:03.360
一番古いバージョンに合わせて 取り入れましたねやっぱりブラウザ

16:03.360 --> 16:08.240
全部で撮るってなるとコストが でかいので今回対応するブラウザ

16:08.240 --> 16:14.720
で一番古かったのがAndroid 5のとき のWebViewAndroidのWebViewってアップ

16:14.720 --> 16:17.920
ストアから更新できるようには できるんですけど更新したい

16:17.920 --> 16:22.040
ユーザーもやっぱりいるので一番 最低限のバージョンってなると

16:22.040 --> 16:26.480
Chromiumの372014年の頃のブラウザ らしいんですけど

16:26.480 --> 16:27.480
だいぶ前ですね

16:27.480 --> 16:33.600
Chromium 37のときのスクリーンショット だけでチェックしてます

16:33.600 --> 16:39.720
なるほど結構古いブラウザのところ からも見てそこを基準としてやって

16:39.720 --> 16:40.720
いたわけですね

16:40.720 --> 16:41.720
そうですね

16:41.720 --> 16:54.280
結構テストとか細かくやってる ような他に単体テストとかって

16:54.280 --> 16:55.280
入れてましたか

16:55.280 --> 16:59.760
さっきまでスタイリングの話が 結構主な話だったんですけれども

16:59.760 --> 17:02.960
ライブラリーをどうしても使って 開発していく上でライブラリー

17:02.960 --> 17:08.040
の中までってなかなか精査ができない っていうところはあってこのライブラリー

17:08.040 --> 17:11.480
を使ったときにライブラリーの 内部で必要なポリフィールが読み

17:11.480 --> 17:15.880
込まれてないよねとかそういった ところに気づくためにも単体テスト

17:15.880 --> 17:20.080
をブラウザ上で動かすみたいな ところを今回意識して技術選定

17:20.080 --> 17:21.800
をしたっていうところがあります

17:21.800 --> 17:25.720
単体テストをブラウザ上で動かす と言いますと

17:25.720 --> 17:31.280
単体テストって今だと結構ノード JS上で動かすことが多いかなと思

17:31.280 --> 17:36.640
っていてJSとかあとはAVAとかあとは VTestとかもそうですけどああいう

17:36.640 --> 17:41.640
のって基本的にはノードJS上で 動かしてもしROMとかが必要だったら

17:41.640 --> 17:45.760
JS DOMみたいな仮想的なDOM入れて 回すみたいなのがあると思うん

17:45.760 --> 17:50.440
ですけどそれではなくて実際に テスト書いたコードをブラウザ

17:50.440 --> 17:54.720
上でそのまま動かしてテストする みたいなので有名なのがKarmaっていう

17:54.720 --> 17:58.280
ライブラリーがあるんですけど そのKarmaを使ってブラウザ上で

17:58.280 --> 18:00.520
動かしたっていう形になります

18:00.520 --> 18:06.360
関数を作られたライブラリーなどの 関数をブラウザ上でただ動かして

18:06.360 --> 18:10.040
動作がちゃんと動くかどうかの 確認をするテストみたいな感じ

18:10.040 --> 18:11.400
ですかねイメージとしては

18:11.400 --> 18:15.520
ライブラリー自体をテストする っていうよりかは実際に使ってる

18:15.520 --> 18:20.920
単体テストの普通の手元のコード に対してのテストで使ってるライブラリー

18:20.920 --> 18:24.440
自体が動かなかったらそもそも 自分たちのコードも動いてない

18:24.440 --> 18:29.680
はずなんでテスト落ちるよねみたいな イメージで設計してたって感じ

18:29.680 --> 18:33.840
ですねなので単体テスト自体は 多分普通の開発と同じ感じで書いて

18:33.840 --> 18:34.840
はいるんですけど

18:34.840 --> 18:41.560
なるほど結構今先ほど話に出て きた中でJSTとかを使ってバーチャル

18:41.560 --> 18:46.320
のDOM使ってテストするっていう のはやらなかったってことですか

18:46.320 --> 18:52.000
一応そっちも導入はしていてなんで 両方あるのかっていう話をする

18:52.000 --> 18:56.640
とどうしてもブラウザで動かす と速度が遅いんですよね全ての

18:56.640 --> 19:00.160
テストを通してやるまでにどう してもGUIを動かしてるんでメモリ

19:00.160 --> 19:04.200
も苦しいみたいなところはあって やっぱりノードジェス上で回す

19:04.200 --> 19:09.400
テストみたいなところもローカル でとりあえず開発して最後動く

19:09.400 --> 19:13.320
かどうか確認するみたいなところ のテストを書いてコード修正自体

19:13.320 --> 19:18.480
のサイクルはやっぱり早く回せた ほうがいいし確かに長期的なところ

19:18.480 --> 19:25.400
でいうとCIとかも実際のPR上では ノードジェス上でテストして最終

19:25.400 --> 19:29.440
リリースするときとかにブラウザ でテストするみたいな使い分け

19:29.440 --> 19:33.600
みたいなところも将来的にはできる かなっていうところは考えて両方

19:33.600 --> 19:38.040
とも用意はしてます同じ単体テスト で動かすことしか変えられるよう

19:38.040 --> 19:43.160
になってるんで核側としてはテスト 一つなんですけれども動かす環境

19:43.160 --> 19:47.640
がブラウザとノードジェスで自分で 好きなほうを選べるみたいな状態

19:47.640 --> 19:48.640
になってます

19:48.640 --> 19:53.320
なるほど二つ用意して選んで状況 に応じて速度とかも考慮した上

19:53.320 --> 19:55.920
でテストをしていくって感じなん ですよね

19:55.920 --> 19:56.920
そうですね

19:56.920 --> 20:01.680
すごいいいですねそれやっぱり ローカルテストするのとやっぱり

20:01.680 --> 20:05.560
CIでテストするのってなかなか 速度も変わってきますし見る大事な

20:05.560 --> 20:08.640
ソフトウェアとかも変わってくる から大事なところですよね

20:08.640 --> 20:21.720
でも今のお話を聞いてるだけでも テストだけでもいろんな工夫が

20:21.720 --> 20:26.400
されてるからそれゆえの成功が あるんじゃないかなと思うんですけ

20:26.400 --> 20:31.720
ど例えば今古いバージョンのブラウザ とかの話を結構よくしてました

20:31.720 --> 20:36.120
けども逆にモダンのブラウザに 対してのアプローチとかって何か

20:36.120 --> 20:37.800
工夫されたこととかってあるんですか

20:37.800 --> 20:43.160
今結構古いブラウザの話をして るんですけども古いブラウザには

20:43.160 --> 20:46.120
やっぱり動かすためにはいろんな ポリフィルを入れなきゃいけない

20:46.120 --> 20:50.480
とかっていう話はあってポリフィル を入れるとどうしてもJavaScript

20:50.480 --> 20:53.200
のバンドルサイズっていうのは 肥大化していくっていうところ

20:53.200 --> 20:56.280
があるんですけどみんなはみんな 古いブラウザを使ってるわけではない

20:56.280 --> 21:00.120
のでモダンブラウザを使ってる 人にはもちろんもうちょっと軽量

21:00.120 --> 21:06.320
なバンドルのJavaScriptを提供した いよねっていう話はあります

21:06.320 --> 21:11.200
今回やったのがESモジュールを 使えるブラウザと使えないブラウザ

21:11.200 --> 21:17.960
で提供するJavaScriptを分けるっていう 手法があってなんて説明すれば

21:17.960 --> 21:22.400
いいんだろうスクリプトタグの 普通のスクリプトタグを書くと

21:22.400 --> 21:26.800
今までの普通のJavaScriptが輸入 込まれるんですけどもESモジュール

21:26.800 --> 21:30.480
に対応してるスクリプトをスクリプト タイプモジュールとかってやって

21:30.480 --> 21:35.280
あげるとESモジュールが対応してる ところだけブラウザだけ読み込む

21:35.280 --> 21:38.840
スクリプトはそっちのほうになる みたいなやり方があるんですけど

21:38.840 --> 21:42.760
それでどっちのスクリプトを使う かっていうのを出し分けしてたり

21:42.760 --> 21:43.760
します

21:43.760 --> 21:47.320
モジュールを使うと結構軽くなる

21:47.320 --> 21:52.560
モジュールを使うと軽くなるという かは出し分けにこれ言葉で説明

21:52.560 --> 22:01.320
するの無理だなちょっとやめます か

22:01.320 --> 22:03.440
結構図とかないと難しい

22:03.440 --> 22:07.640
そうですねコールかけが一発間違い なんですけど

22:07.640 --> 22:12.760
でも基本はブラウザがモジュール に対応してるか対応してないか

22:12.760 --> 22:18.240
を見て読み込むスクリプト先を 変えているみたいなスクリプト

22:18.240 --> 22:19.240
ですね

22:19.240 --> 22:24.520
基本的には確かChromiumの50なん ちゃらぐらいから使えるようになる

22:24.520 --> 22:25.520
んで

22:25.520 --> 22:27.960
そこら辺が境目になってそれより 古いブラウザにはもうちょっと

22:27.960 --> 22:32.320
大きいJavaScriptを提供して新しい ブラウザにはいらないプリフィル

22:32.320 --> 22:35.680
を削ったもうちょっと軽量なJavaScript を提供してっていうのをやって

22:35.680 --> 22:36.680
ます

22:36.680 --> 22:41.360
それのプリフィルの出し分けみたいな ところも基本的にはバベルのプラグイン

22:41.360 --> 22:46.240
のバベルプリセッテンブっていう プラグインがあると思うんですけど

22:46.240 --> 22:51.040
あれを使うと設定したブラウザリスト に対して対応するプリフィル

22:51.040 --> 22:55.160
が入る入らないっていうのが指定 できるんですけどそれのデメリット

22:55.160 --> 22:59.520
として基本的にはCore.jsのプリフィル に対しての出し分けになっちゃ

22:59.520 --> 23:00.520
うんですよね

23:00.520 --> 23:06.320
Core.jsってJavaScriptに対して ECMAScriptに対してのプリフィルが

23:06.320 --> 23:11.040
メインなんですけども今回使ってる のってWeb APIもいくつか使ってる

23:11.040 --> 23:15.920
のでWeb API自体の出し分けどうしよう みたいな問題はありました

23:15.920 --> 23:19.160
フェッチが使えるブラウザとフェッチ が使えないブラウザでフェッチ

23:19.160 --> 23:22.400
のプリフィル入れるか入れない か変わると思うんですけどそれ

23:22.400 --> 23:27.320
がプリセッテンブラと切り分け ができないっていうところで今回

23:27.320 --> 23:32.200
それもちょっと課題ではあった のでそれもプラグインを今回自作

23:32.200 --> 23:39.120
して対応したりしてますそれも MDNのデータ使ってWeb API対応して

23:39.120 --> 23:44.440
ればプリフィル入れるし対応しなかったら 入れないっていうのをやったりしてます

23:44.440 --> 23:48.400
プラグインも自作して本当にもう ブラウザに最適化するような仕組み

23:48.400 --> 23:51.920
をどんどん作っていったっていう 形なんですね

23:51.920 --> 23:56.960
そうですね今回はモダンな開発 しつつLegacyブラウザに対応する

23:56.960 --> 24:01.760
みたいなところではあったので そこのモダンな開発にうまく寄せる

24:01.760 --> 24:04.240
ためにいろいろツールを作った りしました

24:04.240 --> 24:21.040
なるほどそれのおかげでも幅広い 層のユーザーが見れることができましたね

24:21.040 --> 24:25.840
そろそろ時間もなってきました が今回このマディウェブのポッドキャスト

24:25.840 --> 24:31.800
で改めて振り返ってみて感想とか ってありますかどうでしたか

24:31.800 --> 24:38.320
そうですね結構Legacyブラウザって 今だとIE11がなくなって割とみんな

24:38.320 --> 24:41.840
気にしなくなってきたところだ とは思うんですけれども何らかん

24:41.840 --> 24:45.680
だずっと更新されないで残ってる ブラウザっていうのはやっぱり

24:45.680 --> 24:50.360
世の中あってこういったLegacyに 対応しつつモダンな開発をして

24:50.360 --> 24:55.840
いくみたいなこのノウハウ自体 はIEがなくなった後にも知識として

24:55.840 --> 24:58.720
残っていくといいのかなっていう ふうには思ってます

24:58.720 --> 25:02.720
今回ウェブビューの話をしました けど他にも結構組み込みのブラウザ

25:02.720 --> 25:06.720
とかはずっと古いまま残ってる ものとかも結構あったりするので

25:06.720 --> 25:09.800
そういったところでも使えるノウハウ になってくるのかなっていう気は

25:09.800 --> 25:10.800
してます

25:10.800 --> 25:15.720
そうですね結構ウェブブラウザ 今後もどんどん進化してきます

25:15.720 --> 25:20.920
し古いブラウザなんかもIEみたい にどんどん切り捨てられていく

25:20.920 --> 25:24.560
未来かもしれませんしそういった ところで今回のようなことを参考

25:24.560 --> 25:28.800
していただけるといい未来が見 れるんじゃないかなと思います

25:28.800 --> 25:29.800
ね

25:29.800 --> 25:34.400
本日はいろいろと驚くさい話聞 けて本当によかったですお越しいただ

25:34.400 --> 25:37.480
いた三浦さんありがとうございました ありがとうございました

25:37.480 --> 25:40.480
では聞いてる皆さんもまた会い ましょう

25:40.480 --> 25:57.800
ではバイバイ


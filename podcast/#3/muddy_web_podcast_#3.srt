1
00:00:00,000 --> 00:00:04,880
マディウェブポッドキャストは マディの意味が泥であるように

2
00:00:04,880 --> 00:00:09,120
ウェブフロントエンドの開発現場 における泥臭い話などから学び

3
00:00:09,120 --> 00:00:13,520
を得ることを目的とし実際に明日 から使えるかもしれないウェブ

4
00:00:13,520 --> 00:00:18,280
フロントエンド知識や技術を参加 者の皆様と共有し合うことを通

5
00:00:18,280 --> 00:00:22,800
してフロントエンド界隈の役に 立てるように思いを込めて発信

6
00:00:22,800 --> 00:00:23,800
しています

7
00:00:23,800 --> 00:00:28,880
はいではマディウェブポッドキャスト 始めていきたいと思います今回

8
00:00:28,880 --> 00:00:33,840
はゲストにアベマTVからお越しい ただいております 宮城まさひろ

9
00:00:33,840 --> 00:00:36,080
さんが来ていただいております

10
00:00:36,080 --> 00:00:40,200
宮城まさひろといいますサイバー エージェントに入社したのが2019

11
00:00:40,200 --> 00:00:45,440
年で新卒で入社したんですけれども そのときからアベマTVに配属

12
00:00:45,440 --> 00:00:50,000
になって今はアベマっていうプラットフォーム になっていますけれどもそこで

13
00:00:50,000 --> 00:00:53,680
ずっとウェブのフロントエンド として開発をやっています

14
00:00:53,680 --> 00:00:58,680
今回はワールドカップで試合と 一緒にその試合のゴール数とか

15
00:00:58,680 --> 00:01:01,080
そういったものが見れるような 機能を開発したんですけれども

16
00:01:01,080 --> 00:01:05,200
その開発したときのウェブのフロント の話とかができたらなと思います

17
00:01:05,200 --> 00:01:06,280
よろしくお願いします

18
00:01:06,280 --> 00:01:11,160
はいよろしくお願いしますそうですね 今回話していくタイトルもアベマ

19
00:01:11,160 --> 00:01:15,920
TVでワールドカップのところが あったのでそのような開発で使用

20
00:01:15,920 --> 00:01:19,560
したウェブビューのところの導入 の話をしていきたいと思うんですけ

21
00:01:19,560 --> 00:01:25,160
れども導入するにあたった経緯 としてどんなことがあるんですか

22
00:01:25,160 --> 00:01:29,040
まず試合を見ながらその試合の データを見るみたいなところの

23
00:01:29,040 --> 00:01:33,040
体験っていうところはやっぱり 今回はワールドカップで提供

24
00:01:33,040 --> 00:01:37,280
したいねっていう話にはなって いてそれを提供するにあたって

25
00:01:37,280 --> 00:01:41,600
ウェブのブラウザー版とあとは アプリ版この2つで提供しよう

26
00:01:41,600 --> 00:01:46,640
っていう話が進んでいたんですね この2つで提供するにあたってそれ

27
00:01:46,640 --> 00:01:51,200
ぞれネイティブのアプリで実装 してウェブのアプリでも実装して

28
00:01:51,200 --> 00:01:54,600
ってなるとやっぱりなかなか構 数が大きくなってしまうっていう

29
00:01:54,600 --> 00:01:59,520
ところがあってワールドカップ の期間っていうのもワールドカップ

30
00:01:59,520 --> 00:02:04,200
やりますっていう話をしてから そんなに期間が多く取れたわけ

31
00:02:04,200 --> 00:02:09,400
でもないのでできれば共通化して 同じコードで出せたらいいねっていう

32
00:02:09,400 --> 00:02:16,160
話がありましてそこからいろんな 手段を検討して最終的にウェブビュー

33
00:02:16,160 --> 00:02:20,080
でやるといいんじゃないかっていう 話に落ち着いたっていう形ですね

34
00:02:20,080 --> 00:02:25,600
なるほど確かにいろんな方が見る からいろんなブラウザーとかデバイス

35
00:02:25,600 --> 00:02:30,480
とかを考慮しなきゃいけないです けどねその中でウェブビューを

36
00:02:30,480 --> 00:02:34,960
導入するにあたって多分これから いろいろ泥臭い話を聞けるんじゃない

37
00:02:34,960 --> 00:02:40,640
かと思っていてるんですが辛み とかって一番辛かったなみたい

38
00:02:40,640 --> 00:02:44,160
なのってあるんですか 今回ウェブビューブラウザー版

39
00:02:44,160 --> 00:02:49,000
だとiFrameでやってるんですけれども ウェブビューとiFrameでここが一番

40
00:02:49,000 --> 00:02:54,120
難しかったなっていうところで 言うと多種多様なデバイスで使わ

41
00:02:54,120 --> 00:02:57,360
れてるのでそれらでちゃんと動く っていうところを担保しなきゃ

42
00:02:57,360 --> 00:03:00,800
いけないっていうところがなかなか 設計として難しかったところかな

43
00:03:00,800 --> 00:03:05,120
っていう気はしています あとから 追加するっていうところになる

44
00:03:05,120 --> 00:03:09,320
んでこの機能のためだけにじゃあ このOS以下は使えないようにします

45
00:03:09,320 --> 00:03:12,480
みたいなのはちょっとさすがに 無理があるよねっていうところ

46
00:03:12,480 --> 00:03:17,320
があって今サポートしてる範囲 は一通りサポートしつつちゃん

47
00:03:17,320 --> 00:03:20,680
と動くように作るみたいなところ の調査から始めたっていうところ

48
00:03:20,680 --> 00:03:26,080
が結構大きかったかなと思います なるほど結構じゃあ調査から始

49
00:03:26,080 --> 00:03:29,600
めてどんなこと調査してたんです かね最初なんか結構バージョン

50
00:03:29,600 --> 00:03:35,280
これ以上を対象にするとか そうですね基本的には一通りサポート

51
00:03:35,280 --> 00:03:39,440
したいねっていう気持ちではい たので最低どのくらいのバージョン

52
00:03:39,440 --> 00:03:42,680
をサポートしないといけないのか っていうところでいろいろ調査

53
00:03:42,680 --> 00:03:48,040
をしてたんですけれどもAndroid とかiOSとかはわりと公式にちゃん

54
00:03:48,040 --> 00:03:52,000
とそういうことが書いてあった りするんでそこまで調査に手間

55
00:03:52,000 --> 00:03:54,440
は取らなかったんですけれども 逆にあるんですか書いてなかった

56
00:03:54,440 --> 00:03:57,840
ものが ファイヤータブレットのアベマ

57
00:03:57,840 --> 00:04:01,840
はサポート範囲に含めてるんです けれどもそのファイヤータブレット

58
00:04:01,840 --> 00:04:06,680
で使われてる搭載されてるWebView っていうところが公式の情報として

59
00:04:06,680 --> 00:04:11,160
はなかったんですよねグロミウム ペースだっていうことだけは公式

60
00:04:11,160 --> 00:04:13,960
のドキュメントに書いてあるんですけど どのバージョンのグロミウム

61
00:04:13,960 --> 00:04:18,560
から使われてるのかみたいなところ がどうしても書いてなくってそこ

62
00:04:18,560 --> 00:04:23,360
ら辺の調査が結構難航したんです けど最終的にはファイヤータブレット

63
00:04:23,360 --> 00:04:28,840
のOSのアップデートデータっていう のが公式は出てるんでそのアップデート

64
00:04:28,840 --> 00:04:34,720
データを解析して中のアプリチュース してそこの中のアプリのバージョン

65
00:04:34,720 --> 00:04:37,480
どういうバージョンがかかってる のかっていうのを調べるように

66
00:04:37,480 --> 00:04:42,400
してスクリプト組んでみたいな ことをやったりしてますねそこら

67
00:04:42,400 --> 00:04:46,800
辺の情報とかもオープンソース で公開できたらなっていう形で

68
00:04:46,800 --> 00:04:53,600
置いてはいるんですけども結構 古いバージョンだと古いブラウザ

69
00:04:53,600 --> 00:04:57,240
だったりしてたんで調べてみて よかったなっていう感じですね

70
00:04:57,240 --> 00:05:02,400
確かに古いバージョンブラウザ 結構Web開発とかだとWebViewだけ

71
00:05:02,400 --> 00:05:05,800
じゃなくてもなかなかボトルネック になってくるんじゃないかなと思

72
00:05:05,800 --> 00:05:11,840
ったんですけど今回の導入にあた って古いバージョンに関してAPI

73
00:05:11,840 --> 00:05:14,960
とかそういったところで苦労とか されましたか

74
00:05:14,960 --> 00:05:22,880
そうですね結構スタイリング周り で辛かったところで言うとCSSグリッド

75
00:05:22,880 --> 00:05:26,400
がまず対応してないようなブラウザ から始まってくるんで

76
00:05:26,400 --> 00:05:27,400
ありますね

77
00:05:27,400 --> 00:05:32,440
今回実際に試合でいった機能を 使ってくださった方が見てもらうと

78
00:05:32,440 --> 00:05:35,960
分かるかもしれないんですけど それなりに複雑な画面構成には

79
00:05:35,960 --> 00:05:41,760
なっていてその複雑な画面構成 をどうCSSグリッドなしでFlexbox

80
00:05:41,760 --> 00:05:46,920
は最低限使えたのでFlexboxで実現 するかみたいなところはなかなか

81
00:05:46,920 --> 00:05:57,240
難しかったかなと思います

82
00:05:57,240 --> 00:06:03,160
開発の中でもスタイリングに制約 かけるとかあったと思うんですけ

83
00:06:03,160 --> 00:06:08,960
ども制約の中で開発するにあた って開発の環境を良くしていこう

84
00:06:08,960 --> 00:06:12,680
みたいなことの仕組みとかって それに合わせて変えていったんですか

85
00:06:12,680 --> 00:06:13,680
ね

86
00:06:13,680 --> 00:06:19,520
そうですね実際そういう制約がある ってことは分かっていたのでその

87
00:06:19,520 --> 00:06:23,920
制約の中でどうストレスなく開発 できるかっていうところでいろいろ

88
00:06:23,920 --> 00:06:28,320
取り組みをしてたんですけどその 中の一つではリンターでしっかり

89
00:06:28,320 --> 00:06:34,120
縛ろうっていうところが結構重視 していたところでどうしてもCSS

90
00:06:34,120 --> 00:06:37,280
グリッド使えないっていうこと が分かっててもCSSグリッドを書

91
00:06:37,280 --> 00:06:41,200
いちゃうっていうところはあったり するんですけどデバッグするとき

92
00:06:41,200 --> 00:06:44,760
って古いブラウザーを動かしながら デバッグするっていうのもでき

93
00:06:44,760 --> 00:06:48,520
なくはないんですけど開発効率 的にはやっぱり今手元にあるブラウザ

94
00:06:48,520 --> 00:06:52,760
で実装しながら開発するとは思 っていてそういった中で無意識

95
00:06:52,760 --> 00:06:57,000
のうちにCSSグリッド組んじゃって 実際レプロイしてみたら動きません

96
00:06:57,000 --> 00:07:00,840
だとやっぱり開発サイクル的な ところでも遅くなっちゃうっていう

97
00:07:00,840 --> 00:07:04,600
ところがあるとは思っています そういったところをリンター

98
00:07:04,600 --> 00:07:10,440
で制約かけることはしていて ESリントとかスタイルリントでこの

99
00:07:10,440 --> 00:07:14,840
ブラウザのバージョンより下の ものだと使えないみたいなのは

100
00:07:14,840 --> 00:07:18,000
どの機能が使えてどの機能が使 えないのかみたいなのをリント

101
00:07:18,000 --> 00:07:22,840
するっていうリンターを今回作 ったりしています

102
00:07:22,840 --> 00:07:26,680
自作で作ったんですか そうですね今回のためにESリント

103
00:07:26,680 --> 00:07:30,000
のほうは既存だったんですけど スタイルリントのほうは今回独自

104
00:07:30,000 --> 00:07:34,840
で作っていてここら辺のブラウザ でどのくらい使えるかみたいな

105
00:07:34,840 --> 00:07:38,760
ところっていうのがキャナユーズ とかあると思うんですけども最近

106
00:07:38,760 --> 00:07:44,040
だとMDNで提供されてたりするので そのMDNの情報を元にリントして

107
00:07:44,040 --> 00:07:48,040
くれるみたいなところを作った りしてましたね

108
00:07:48,040 --> 00:07:52,640
MDNの情報をあらかじめテキスト か何かデータとして引っ張って

109
00:07:52,640 --> 00:07:55,920
きといてリンターのルールに載 せるって感じじゃないですかね

110
00:07:55,920 --> 00:08:00,360
それとも毎回API叩いてみたいな 感じなんですか

111
00:08:00,360 --> 00:08:06,320
中の情報がMDNのブラウザ対応 の情報が実はパッケージとして

112
00:08:06,320 --> 00:08:11,040
提供されていて そのJSONデータをもとにどのスタイル

113
00:08:11,040 --> 00:08:14,320
リントが使えるみたいなのを判別 してくれるっていう形になっています

114
00:08:14,320 --> 00:08:20,040
上にですねウェブ開発にあったら 全然ぜひそれオープンしてもら

115
00:08:20,040 --> 00:08:22,480
いたいぐらい便利そうな気がします が

116
00:08:22,480 --> 00:08:28,760
スタイルリントのほうはオープン で作っていて既に公開していて

117
00:08:28,760 --> 00:08:31,680
自分のGitHubのレポジションの下 にあるんですけども

118
00:08:31,680 --> 00:08:36,360
じゃあぜひお聞きの方はレポジション に飛んでもらっていいねスター

119
00:08:36,360 --> 00:08:37,520
をつけてもらいたいですね

120
00:08:37,520 --> 00:08:40,440
そうですねぜひ使ってもらえたらな と思います

121
00:08:40,440 --> 00:08:44,440
結構使えそうなんですか他の開発 でも聞いてると全然使えそうな

122
00:08:44,440 --> 00:08:45,440
気がしますか

123
00:08:45,440 --> 00:08:50,160
そうですね割とどういう開発でも 使えるかなっていう気がしていて

124
00:08:50,160 --> 00:08:53,800
最近のブラウザだとエバーグリーン で常にアップデートするっていう

125
00:08:53,800 --> 00:08:57,760
形にはなってると思うんですけど それでもやっぱり2ブラウザ遅れて

126
00:08:57,760 --> 00:09:02,560
みたいなところはあったりはする と思うんでどうしてもずっと使える

127
00:09:02,560 --> 00:09:06,640
機能使えない機能っていう境目 みたいなこの問題は残っていく

128
00:09:06,640 --> 00:09:11,200
とは思うんですよねそういった ところでは活用する機会がある

129
00:09:11,200 --> 00:09:12,600
かなっていうふうには思います

130
00:09:12,600 --> 00:09:17,480
なるほどそういったリンターとか ルール決めとかをちゃんとしっかり

131
00:09:17,480 --> 00:09:22,960
やって開発に臨むっていうこと やってたんですね確かに短い期間

132
00:09:22,960 --> 00:09:27,320
の中で開発を効率よくやっていく のってそういったルールから決めて

133
00:09:27,320 --> 00:09:29,080
いくのって大事ですよね確かに

134
00:09:29,080 --> 00:09:33,240
そうですね他にも結構ルール開発 したところはあって

135
00:09:33,240 --> 00:09:34,400
他には何かあるんですか

136
00:09:34,400 --> 00:09:40,400
今回デザイントークンっていう まででもないんですけどデザイン

137
00:09:40,400 --> 00:09:45,320
を作る上でこういった値をベース にこの値の倍数で組んできます

138
00:09:45,320 --> 00:09:49,600
みたいなルールがあったりして 例えば何かの文字と文字の間の

139
00:09:49,600 --> 00:09:53,160
スペースマージンとかは4ピクセル の倍数にしましょうみたいなそう

140
00:09:53,160 --> 00:09:56,040
いったルール決めとかあったり するんですけどそういったところ

141
00:09:56,040 --> 00:10:00,720
に対してCSSパリアムズ使って変数 としておいて設定していきましょう

142
00:10:00,720 --> 00:10:04,680
みたいなときに組んでるとやっぱり 直で変えちゃうみたいなところ

143
00:10:04,680 --> 00:10:08,880
があったりしてCSSパリアムズ使 ってないよねみたいなところの

144
00:10:08,880 --> 00:10:12,680
レビューの指摘が何回かあった りはしたんですよね

145
00:10:12,680 --> 00:10:17,400
何回かあった順でこれはLinterで 制御したほうが多分レビューコスト

146
00:10:17,400 --> 00:10:20,920
が低くなるだろうというところ でLinter導入したりとかっていう

147
00:10:20,920 --> 00:10:22,400
のは実際ありましたね

148
00:10:22,400 --> 00:10:27,320
なるほど確かにルールから外れたら 自動で検知してくれるみたいな

149
00:10:27,320 --> 00:10:28,320
感じなんですね

150
00:10:28,320 --> 00:10:32,840
そうですねそうするとやっぱり レビューコストが低くなるのも

151
00:10:32,840 --> 00:10:38,160
あるし開発のサイクルも手元で Linter回せば気づけるので毎回

152
00:10:38,160 --> 00:10:42,680
CI回さなきゃいけないとか相手の レビュー待って数時間後に違います

153
00:10:42,680 --> 00:10:46,360
って聞くよりかは断然いいかな っていう感じですね

154
00:10:46,360 --> 00:10:50,240
確かによくありますよね2時間後 レビューいただいたらここ直して

155
00:10:50,240 --> 00:10:52,200
ください1行だけ直すみたいな

156
00:10:52,200 --> 00:10:53,200
そうなんですよね

157
00:10:53,200 --> 00:10:57,440
がよくあるからでも確かに結構 自動化大事ですよね

158
00:10:57,440 --> 00:11:10,200
スタイルの話を今話しましたけども そういうスタイル決めのルール

159
00:11:10,200 --> 00:11:14,600
決めってやっぱりデザイナーさん と結構深く関わっていってやって

160
00:11:14,600 --> 00:11:15,600
いったんですか

161
00:11:15,600 --> 00:11:20,800
そうですね結構スタイル周りは デザイナーと相談しながらやって

162
00:11:20,800 --> 00:11:25,160
たのでそこら辺のデザインどういう ふうにやってたのかみたいなのは

163
00:11:25,160 --> 00:11:28,320
サイバーエージェントのデベロッパー ブログのほうで記事投稿したり

164
00:11:28,320 --> 00:11:31,320
するんでもしよかったらそちら も読んでもらえたらと思うんですけ

165
00:11:31,320 --> 00:11:32,320
れども

166
00:11:32,320 --> 00:11:33,320
ぜひ見てください

167
00:11:33,320 --> 00:11:39,320
いろいろ新しい取り組みがあった ので密に連携しながらデザイン

168
00:11:39,320 --> 00:11:40,320
は組んでいきましたね

169
00:11:40,320 --> 00:11:47,320
なるほどデザインを実装していく 中で出来上がった成果物とかを

170
00:11:47,320 --> 00:11:52,160
確認する作業っていうのが入る かと思うんですけどもその中で

171
00:11:52,160 --> 00:11:59,600
開発環境の仕組みの改善でそう いったプロセスの効率化とかって

172
00:11:59,600 --> 00:12:03,520
どこか工夫したところとかって ありますか例えばさっき言った

173
00:12:03,520 --> 00:12:07,160
スタイルで新しいバージョンじゃない と動かないとかの確認っていう

174
00:12:07,160 --> 00:12:13,160
のは実際にブラウザを開いてやって いったのかそれともはたまた違う

175
00:12:13,160 --> 00:12:16,120
ツールで例えばストーリーブック とかでやったのかそういった

176
00:12:16,120 --> 00:12:20,000
感じの工夫とかってされて開発 されたんですかね

177
00:12:20,000 --> 00:12:25,320
そうですね結構スタイル周りについて は古いブラウザでは動かないみたいな

178
00:12:25,320 --> 00:12:29,960
ところは結構大いにあり得るとは 思っていたのでその古いブラウザ

179
00:12:29,960 --> 00:12:33,600
をまず動かすっていう環境を作った っていうのがまず一つあります

180
00:12:33,600 --> 00:12:40,000
Dockerの中で古いChromiumをインストール してそのChromiumを動かしてあとは

181
00:12:40,000 --> 00:12:48,320
VNCですねDockerで中でChromiumを動かして そのDocker上で仮想デスクトップ

182
00:12:48,320 --> 00:12:57,600
上で古いChromiumが動かせるみたいな 環境は作りましたそれを作ると

183
00:12:57,600 --> 00:13:01,160
ストーリーブックとか作ってあれば そこで動かせるのでストーリーブック

184
00:13:01,160 --> 00:13:05,480
も用意してストーリーブック上で 確認するみたいなのをやったり

185
00:13:05,480 --> 00:13:10,520
したんですけどストーリーブック 結構最近のブラウザに特化して

186
00:13:10,520 --> 00:13:16,600
作られててIEの対応とかも最近確か なくなったかと思うんですけど

187
00:13:16,600 --> 00:13:20,960
そんなんで動かなかったりして そこら辺のモンキーパッチを自

188
00:13:20,960 --> 00:13:25,280
前で書いたりしたのはちょっと 努力さかったかなっていう気は

189
00:13:25,280 --> 00:13:26,280
してますね

190
00:13:26,280 --> 00:13:32,200
大変そうですねそうすると毎回 確認してそういうバグというか

191
00:13:32,200 --> 00:13:37,320
動かないところがあるとそれごとに モンキーパッチをしていくみたいな

192
00:13:37,320 --> 00:13:39,040
形にしてたんですか

193
00:13:39,040 --> 00:13:42,280
ストーリーブックが動かなかった みたいなところに関してだけで

194
00:13:42,280 --> 00:13:47,480
言うと実際に試してみて動かなかった ところで他の手段があれば他の

195
00:13:47,480 --> 00:13:50,920
手段に変えたりとかあとはパッチ が当てれば動くみたいなところ

196
00:13:50,920 --> 00:13:55,480
であれば手元でパッチ当てて動かす みたいな感じでやってはいました

197
00:13:55,480 --> 00:14:00,400
基本的にはそんなにいろいろ調整 しないと動かないっていうこと

198
00:14:00,400 --> 00:14:03,840
ではなかったんですけどたまに 動かないアドオンとかがあったり

199
00:14:03,840 --> 00:14:08,200
したんでそういったところを調整 したりとかはしましたね

200
00:14:08,200 --> 00:14:13,880
なかなか難しいコースにかかる ような結構その辺でコースって

201
00:14:13,880 --> 00:14:16,120
取られましたか

202
00:14:16,120 --> 00:14:19,400
それなりに動かなくなって対応 みたいなのはあったにはあったん

203
00:14:19,400 --> 00:14:24,520
ですけどだからといってそれの 対応ばかりに追われて結構大変

204
00:14:24,520 --> 00:14:30,720
だったっていうわけでもなくて 割とついちょっと前まではIEの

205
00:14:30,720 --> 00:14:36,280
対応みたいなのが入ってたライブラリ が結構ウェブの界隈が多いので

206
00:14:36,280 --> 00:14:40,240
交互感性みたいなところは割と まだ残ってるようなライブラリ

207
00:14:40,240 --> 00:14:46,120
は多くて時折直さなきゃいけない けれどもむちゃくちゃがっつり

208
00:14:46,120 --> 00:14:49,960
それのためにコースが逆らっちゃう みたいなほどではなかったかな

209
00:14:49,960 --> 00:14:50,960
という気がしますね

210
00:14:50,960 --> 00:14:56,160
じゃあそこまでなかったわけですね なんか聞いてると実際にそういう

211
00:14:56,160 --> 00:15:01,720
ふうに環境を整えていって開発 でした恩恵って結構やっぱりあり

212
00:15:01,720 --> 00:15:02,720
ましたか

213
00:15:02,720 --> 00:15:06,280
ストーリーブックでレンダーした コンポーネントに対してスクリーン

214
00:15:06,280 --> 00:15:10,400
ショット撮ってそのスクリーン ショットの差分を撮るみたいな

215
00:15:10,400 --> 00:15:14,960
ビジュアルレギュレーションテスティング も導入していてこれのおかげで

216
00:15:14,960 --> 00:15:19,680
今回描いたスタイルがリントも ちょっとすり抜けちゃってうまく

217
00:15:19,680 --> 00:15:24,120
動いてないみたいなところに関して は差分があれれば気づけるっていう

218
00:15:24,120 --> 00:15:27,760
ところが作れたところとかあとは スクリーンショットが全コンポーネント

219
00:15:27,760 --> 00:15:33,120
に対して撮れてるのでそのレビュー のときに新しく追加されたスクリーン

220
00:15:33,120 --> 00:15:36,520
ショットさえ見れば古いブラウザ でちゃんとレンダーできてるか

221
00:15:36,520 --> 00:15:38,720
できてないかっていうのがすぐ 分かるっていう状態が作れたの

222
00:15:38,720 --> 00:15:44,160
が開発効率の中ではすごく良かった 点で実際にやってみたらむちゃ

223
00:15:44,160 --> 00:15:46,600
くちゃ崩れてるみたいなのは往々 にしてあったので

224
00:15:46,600 --> 00:15:47,600
そうなんですね

225
00:15:47,600 --> 00:15:51,760
なので用意しておいてすごく良かった なって思ってますね

226
00:15:51,760 --> 00:15:57,240
結構じゃあブラウザーごとにスクリーン ショットを撮って差分を検知して

227
00:15:57,240 --> 00:15:59,240
バージョンごとっていうんですか

228
00:15:59,240 --> 00:16:03,360
一番古いバージョンに合わせて 取り入れましたねやっぱりブラウザ

229
00:16:03,360 --> 00:16:08,240
全部で撮るってなるとコストが でかいので今回対応するブラウザ

230
00:16:08,240 --> 00:16:14,720
で一番古かったのがAndroid 5のとき のWebViewAndroidのWebViewってアップ

231
00:16:14,720 --> 00:16:17,920
ストアから更新できるようには できるんですけど更新したい

232
00:16:17,920 --> 00:16:22,040
ユーザーもやっぱりいるので一番 最低限のバージョンってなると

233
00:16:22,040 --> 00:16:26,480
Chromiumの372014年の頃のブラウザ らしいんですけど

234
00:16:26,480 --> 00:16:27,480
だいぶ前ですね

235
00:16:27,480 --> 00:16:33,600
Chromium 37のときのスクリーンショット だけでチェックしてます

236
00:16:33,600 --> 00:16:39,720
なるほど結構古いブラウザのところ からも見てそこを基準としてやって

237
00:16:39,720 --> 00:16:40,720
いたわけですね

238
00:16:40,720 --> 00:16:41,720
そうですね

239
00:16:41,720 --> 00:16:54,280
結構テストとか細かくやってる ような他に単体テストとかって

240
00:16:54,280 --> 00:16:55,280
入れてましたか

241
00:16:55,280 --> 00:16:59,760
さっきまでスタイリングの話が 結構主な話だったんですけれども

242
00:16:59,760 --> 00:17:02,960
ライブラリーをどうしても使って 開発していく上でライブラリー

243
00:17:02,960 --> 00:17:08,040
の中までってなかなか精査ができない っていうところはあってこのライブラリー

244
00:17:08,040 --> 00:17:11,480
を使ったときにライブラリーの 内部で必要なポリフィールが読み

245
00:17:11,480 --> 00:17:15,880
込まれてないよねとかそういった ところに気づくためにも単体テスト

246
00:17:15,880 --> 00:17:20,080
をブラウザ上で動かすみたいな ところを今回意識して技術選定

247
00:17:20,080 --> 00:17:21,800
をしたっていうところがあります

248
00:17:21,800 --> 00:17:25,720
単体テストをブラウザ上で動かす と言いますと

249
00:17:25,720 --> 00:17:31,280
単体テストって今だと結構ノード JS上で動かすことが多いかなと思

250
00:17:31,280 --> 00:17:36,640
っていてJSとかあとはAVAとかあとは VTestとかもそうですけどああいう

251
00:17:36,640 --> 00:17:41,640
のって基本的にはノードJS上で 動かしてもしROMとかが必要だったら

252
00:17:41,640 --> 00:17:45,760
JS DOMみたいな仮想的なDOM入れて 回すみたいなのがあると思うん

253
00:17:45,760 --> 00:17:50,440
ですけどそれではなくて実際に テスト書いたコードをブラウザ

254
00:17:50,440 --> 00:17:54,720
上でそのまま動かしてテストする みたいなので有名なのがKarmaっていう

255
00:17:54,720 --> 00:17:58,280
ライブラリーがあるんですけど そのKarmaを使ってブラウザ上で

256
00:17:58,280 --> 00:18:00,520
動かしたっていう形になります

257
00:18:00,520 --> 00:18:06,360
関数を作られたライブラリーなどの 関数をブラウザ上でただ動かして

258
00:18:06,360 --> 00:18:10,040
動作がちゃんと動くかどうかの 確認をするテストみたいな感じ

259
00:18:10,040 --> 00:18:11,400
ですかねイメージとしては

260
00:18:11,400 --> 00:18:15,520
ライブラリー自体をテストする っていうよりかは実際に使ってる

261
00:18:15,520 --> 00:18:20,920
単体テストの普通の手元のコード に対してのテストで使ってるライブラリー

262
00:18:20,920 --> 00:18:24,440
自体が動かなかったらそもそも 自分たちのコードも動いてない

263
00:18:24,440 --> 00:18:29,680
はずなんでテスト落ちるよねみたいな イメージで設計してたって感じ

264
00:18:29,680 --> 00:18:33,840
ですねなので単体テスト自体は 多分普通の開発と同じ感じで書いて

265
00:18:33,840 --> 00:18:34,840
はいるんですけど

266
00:18:34,840 --> 00:18:41,560
なるほど結構今先ほど話に出て きた中でJSTとかを使ってバーチャル

267
00:18:41,560 --> 00:18:46,320
のDOM使ってテストするっていう のはやらなかったってことですか

268
00:18:46,320 --> 00:18:52,000
一応そっちも導入はしていてなんで 両方あるのかっていう話をする

269
00:18:52,000 --> 00:18:56,640
とどうしてもブラウザで動かす と速度が遅いんですよね全ての

270
00:18:56,640 --> 00:19:00,160
テストを通してやるまでにどう してもGUIを動かしてるんでメモリ

271
00:19:00,160 --> 00:19:04,200
も苦しいみたいなところはあって やっぱりノードジェス上で回す

272
00:19:04,200 --> 00:19:09,400
テストみたいなところもローカル でとりあえず開発して最後動く

273
00:19:09,400 --> 00:19:13,320
かどうか確認するみたいなところ のテストを書いてコード修正自体

274
00:19:13,320 --> 00:19:18,480
のサイクルはやっぱり早く回せた ほうがいいし確かに長期的なところ

275
00:19:18,480 --> 00:19:25,400
でいうとCIとかも実際のPR上では ノードジェス上でテストして最終

276
00:19:25,400 --> 00:19:29,440
リリースするときとかにブラウザ でテストするみたいな使い分け

277
00:19:29,440 --> 00:19:33,600
みたいなところも将来的にはできる かなっていうところは考えて両方

278
00:19:33,600 --> 00:19:38,040
とも用意はしてます同じ単体テスト で動かすことしか変えられるよう

279
00:19:38,040 --> 00:19:43,160
になってるんで核側としてはテスト 一つなんですけれども動かす環境

280
00:19:43,160 --> 00:19:47,640
がブラウザとノードジェスで自分で 好きなほうを選べるみたいな状態

281
00:19:47,640 --> 00:19:48,640
になってます

282
00:19:48,640 --> 00:19:53,320
なるほど二つ用意して選んで状況 に応じて速度とかも考慮した上

283
00:19:53,320 --> 00:19:55,920
でテストをしていくって感じなん ですよね

284
00:19:55,920 --> 00:19:56,920
そうですね

285
00:19:56,920 --> 00:20:01,680
すごいいいですねそれやっぱり ローカルテストするのとやっぱり

286
00:20:01,680 --> 00:20:05,560
CIでテストするのってなかなか 速度も変わってきますし見る大事な

287
00:20:05,560 --> 00:20:08,640
ソフトウェアとかも変わってくる から大事なところですよね

288
00:20:08,640 --> 00:20:21,720
でも今のお話を聞いてるだけでも テストだけでもいろんな工夫が

289
00:20:21,720 --> 00:20:26,400
されてるからそれゆえの成功が あるんじゃないかなと思うんですけ

290
00:20:26,400 --> 00:20:31,720
ど例えば今古いバージョンのブラウザ とかの話を結構よくしてました

291
00:20:31,720 --> 00:20:36,120
けども逆にモダンのブラウザに 対してのアプローチとかって何か

292
00:20:36,120 --> 00:20:37,800
工夫されたこととかってあるんですか

293
00:20:37,800 --> 00:20:43,160
今結構古いブラウザの話をして るんですけども古いブラウザには

294
00:20:43,160 --> 00:20:46,120
やっぱり動かすためにはいろんな ポリフィルを入れなきゃいけない

295
00:20:46,120 --> 00:20:50,480
とかっていう話はあってポリフィル を入れるとどうしてもJavaScript

296
00:20:50,480 --> 00:20:53,200
のバンドルサイズっていうのは 肥大化していくっていうところ

297
00:20:53,200 --> 00:20:56,280
があるんですけどみんなはみんな 古いブラウザを使ってるわけではない

298
00:20:56,280 --> 00:21:00,120
のでモダンブラウザを使ってる 人にはもちろんもうちょっと軽量

299
00:21:00,120 --> 00:21:06,320
なバンドルのJavaScriptを提供した いよねっていう話はあります

300
00:21:06,320 --> 00:21:11,200
今回やったのがESモジュールを 使えるブラウザと使えないブラウザ

301
00:21:11,200 --> 00:21:17,960
で提供するJavaScriptを分けるっていう 手法があってなんて説明すれば

302
00:21:17,960 --> 00:21:22,400
いいんだろうスクリプトタグの 普通のスクリプトタグを書くと

303
00:21:22,400 --> 00:21:26,800
今までの普通のJavaScriptが輸入 込まれるんですけどもESモジュール

304
00:21:26,800 --> 00:21:30,480
に対応してるスクリプトをスクリプト タイプモジュールとかってやって

305
00:21:30,480 --> 00:21:35,280
あげるとESモジュールが対応してる ところだけブラウザだけ読み込む

306
00:21:35,280 --> 00:21:38,840
スクリプトはそっちのほうになる みたいなやり方があるんですけど

307
00:21:38,840 --> 00:21:42,760
それでどっちのスクリプトを使う かっていうのを出し分けしてたり

308
00:21:42,760 --> 00:21:43,760
します

309
00:21:43,760 --> 00:21:47,320
モジュールを使うと結構軽くなる

310
00:21:47,320 --> 00:21:52,560
モジュールを使うと軽くなるという かは出し分けにこれ言葉で説明

311
00:21:52,560 --> 00:22:01,320
するの無理だなちょっとやめます か

312
00:22:01,320 --> 00:22:03,440
結構図とかないと難しい

313
00:22:03,440 --> 00:22:07,640
そうですねコールかけが一発間違い なんですけど

314
00:22:07,640 --> 00:22:12,760
でも基本はブラウザがモジュール に対応してるか対応してないか

315
00:22:12,760 --> 00:22:18,240
を見て読み込むスクリプト先を 変えているみたいなスクリプト

316
00:22:18,240 --> 00:22:19,240
ですね

317
00:22:19,240 --> 00:22:24,520
基本的には確かChromiumの50なん ちゃらぐらいから使えるようになる

318
00:22:24,520 --> 00:22:25,520
んで

319
00:22:25,520 --> 00:22:27,960
そこら辺が境目になってそれより 古いブラウザにはもうちょっと

320
00:22:27,960 --> 00:22:32,320
大きいJavaScriptを提供して新しい ブラウザにはいらないプリフィル

321
00:22:32,320 --> 00:22:35,680
を削ったもうちょっと軽量なJavaScript を提供してっていうのをやって

322
00:22:35,680 --> 00:22:36,680
ます

323
00:22:36,680 --> 00:22:41,360
それのプリフィルの出し分けみたいな ところも基本的にはバベルのプラグイン

324
00:22:41,360 --> 00:22:46,240
のバベルプリセッテンブっていう プラグインがあると思うんですけど

325
00:22:46,240 --> 00:22:51,040
あれを使うと設定したブラウザリスト に対して対応するプリフィル

326
00:22:51,040 --> 00:22:55,160
が入る入らないっていうのが指定 できるんですけどそれのデメリット

327
00:22:55,160 --> 00:22:59,520
として基本的にはCore.jsのプリフィル に対しての出し分けになっちゃ

328
00:22:59,520 --> 00:23:00,520
うんですよね

329
00:23:00,520 --> 00:23:06,320
Core.jsってJavaScriptに対して ECMAScriptに対してのプリフィルが

330
00:23:06,320 --> 00:23:11,040
メインなんですけども今回使ってる のってWeb APIもいくつか使ってる

331
00:23:11,040 --> 00:23:15,920
のでWeb API自体の出し分けどうしよう みたいな問題はありました

332
00:23:15,920 --> 00:23:19,160
フェッチが使えるブラウザとフェッチ が使えないブラウザでフェッチ

333
00:23:19,160 --> 00:23:22,400
のプリフィル入れるか入れない か変わると思うんですけどそれ

334
00:23:22,400 --> 00:23:27,320
がプリセッテンブラと切り分け ができないっていうところで今回

335
00:23:27,320 --> 00:23:32,200
それもちょっと課題ではあった のでそれもプラグインを今回自作

336
00:23:32,200 --> 00:23:39,120
して対応したりしてますそれも MDNのデータ使ってWeb API対応して

337
00:23:39,120 --> 00:23:44,440
ればプリフィル入れるし対応しなかったら 入れないっていうのをやったりしてます

338
00:23:44,440 --> 00:23:48,400
プラグインも自作して本当にもう ブラウザに最適化するような仕組み

339
00:23:48,400 --> 00:23:51,920
をどんどん作っていったっていう 形なんですね

340
00:23:51,920 --> 00:23:56,960
そうですね今回はモダンな開発 しつつLegacyブラウザに対応する

341
00:23:56,960 --> 00:24:01,760
みたいなところではあったので そこのモダンな開発にうまく寄せる

342
00:24:01,760 --> 00:24:04,240
ためにいろいろツールを作った りしました

343
00:24:04,240 --> 00:24:21,040
なるほどそれのおかげでも幅広い 層のユーザーが見れることができましたね

344
00:24:21,040 --> 00:24:25,840
そろそろ時間もなってきました が今回このマディウェブのポッドキャスト

345
00:24:25,840 --> 00:24:31,800
で改めて振り返ってみて感想とか ってありますかどうでしたか

346
00:24:31,800 --> 00:24:38,320
そうですね結構Legacyブラウザって 今だとIE11がなくなって割とみんな

347
00:24:38,320 --> 00:24:41,840
気にしなくなってきたところだ とは思うんですけれども何らかん

348
00:24:41,840 --> 00:24:45,680
だずっと更新されないで残ってる ブラウザっていうのはやっぱり

349
00:24:45,680 --> 00:24:50,360
世の中あってこういったLegacyに 対応しつつモダンな開発をして

350
00:24:50,360 --> 00:24:55,840
いくみたいなこのノウハウ自体 はIEがなくなった後にも知識として

351
00:24:55,840 --> 00:24:58,720
残っていくといいのかなっていう ふうには思ってます

352
00:24:58,720 --> 00:25:02,720
今回ウェブビューの話をしました けど他にも結構組み込みのブラウザ

353
00:25:02,720 --> 00:25:06,720
とかはずっと古いまま残ってる ものとかも結構あったりするので

354
00:25:06,720 --> 00:25:09,800
そういったところでも使えるノウハウ になってくるのかなっていう気は

355
00:25:09,800 --> 00:25:10,800
してます

356
00:25:10,800 --> 00:25:15,720
そうですね結構ウェブブラウザ 今後もどんどん進化してきます

357
00:25:15,720 --> 00:25:20,920
し古いブラウザなんかもIEみたい にどんどん切り捨てられていく

358
00:25:20,920 --> 00:25:24,560
未来かもしれませんしそういった ところで今回のようなことを参考

359
00:25:24,560 --> 00:25:28,800
していただけるといい未来が見 れるんじゃないかなと思います

360
00:25:28,800 --> 00:25:29,800
ね

361
00:25:29,800 --> 00:25:34,400
本日はいろいろと驚くさい話聞 けて本当によかったですお越しいただ

362
00:25:34,400 --> 00:25:37,480
いた三浦さんありがとうございました ありがとうございました

363
00:25:37,480 --> 00:25:40,480
では聞いてる皆さんもまた会い ましょう

364
00:25:40,480 --> 00:25:57,800
ではバイバイ

